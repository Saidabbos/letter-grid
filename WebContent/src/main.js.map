{"version":3,"sources":["main.js","../ts/src/App.ts","../ts/src/screen/TryAgainWindow.ts","../ts/src/FitScaleManager.ts","../ts/src/core/Gameplay.ts","../ts/src/scene/Boot.ts","../ts/src/scene/MainScene.ts","../ts/src/scene/Preloader.ts","../ts/src/screen/AreYouSureWindow.ts","../ts/src/screen/CompleteWindow.ts","../ts/src/screen/GameplayScreen.ts","../ts/src/screen/InstructionPage.ts"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","minLen","_arrayLikeToArray","toString","call","slice","name","from","test","arr","len","arr2","_classCallCheck","instance","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Date","getPrototypeOf","game","sh","App","_Phaser$Game","Phaser","Game","_super","_this","config","type","AUTO","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","scale","mode","FitScaleManager","detectBestScaleMode","autoCenter","Scale","CENTER_BOTH","transparent","scene","add","Boot","window","onload","delayedCalls","delayedCall","delay","callback","args","callbackScope","getAt","dc","time","push","t","setTimeout","destroyAllDelayedCalls","_step","_iterator","Time","TimerEvent","remove","clearTimeout","setPageBackground","bg","document","querySelector","style","backgroundImage","setupButton","btn","frame","on","setFrame","sound","play","setupButtonTextureBased","texture","hoverTexture","setTexture","_this2","doResize","calculateScale","newCanvasWidth","phaserScaleManager","newCanvasHeight","canvasStyle","marginLeft","innerWidth","marginTop","innerHeight","canvas","addListener","Events","RESIZE","onResize","overridePhaserTransformMethods","scaleMode","NONE","Math","min","_this3","transformX","pageX","parseInt","split","transformY","pageY","RESIZE_DELAY","iOS","navigator","platform","isAndroid","userAgent","toLowerCase","indexOf","FIT","core","Gameplay","totalLettersCount","totalRoundsNum","failsNumToLose","choicesNumPerRound","currentRound","currentLetter","correctAnswersCount","wrongAnswersCount","correctAnswersCountThisRound","wrongAnswersCountThisRound","onComplete","onLose","isNewRound","nextLetter","roundsLetter","Utils","RemoveRandomElement","randomizeGrid","onLetterChosen","getCurrentTotalAnswersCount","_letters","letters","gridLettersNames","correctLetterName","getCorrectLetterName","k","rndLetterName","json","cache","get","_Phaser$Scene","Scene","_super2","setup","Preloader","MainScene","_Phaser$Scene2","_super3","gameplay","gameplayScreen","screen","GameplayScreen","children","showInstructionPage","_Phaser$Scene3","_super4","_this4","load","pack","nextScene","start","AreYouSureWindow","_Phaser$GameObjects$C","GameObjects","Container","_super5","onYes","onNo","_this5","_areYouSurePage","Image","setOrigin","setInteractive","_btnSureYes","cursor","once","_btnSureNo","CompleteWindow","_Phaser$GameObjects$C2","_super6","onBack","onReplay","onNext","_this6","music","setPosition","_bgComplete","_cup","_btnBack","_btnReplay","_btnNext","_CollectedPoints","totalScoreTxt","text","fontFamily","fontSize","color","align","stroke","strokeThickness","grd","context","createLinearGradient","addColorStop","setFill","starScoreTxt","stop","score","starScore","tweens","targets","duration","ease","Easing","Back","Out","String","_Phaser$GameObjects$C3","_super7","_this7","rows","cols","bgMusic","soundGooseYes","soundGooseNo","correctAudio","wfsnd","showCompleteWindow","completeWindow","playBtnClickAnim","destroyGameplay","setInputEnabled","show","showLoseWindow","tryAgainWindow","TryAgainWindow","loop","_gameStage","_btnSound","_btnClose","gameplayContainer","addAt","targetLetterLabel","reset","createGrid","createCrescentMoons","createInput","shuffleOutHexagons","setupCallbacks","_this8","j","c","grid","setScale","visible","resetCrescentMoons","updateClickLetterTargetLabel","isRoundsComplete","playCorrectAudio","_this9","_loop","_this10","_loop2","l","onCorrectAnswer","shuffleInHexagons","onWrongAnswer","onSoundClick","onCloseClick","rnd","crescentMoons","cm","setMoonsActive","index","active","getCurrentTotalAnswersCountThisRound","completed","lost","_this11","areYouSureWindow","parentContainer","pause","getCorrectAudioKey","console","log","showAreYouSurePage","scaleX","scaleY","yoyo","_this12","playInstructionSound","instructionPage","InstructionPage","showGameplay","_this13","pauseSounds","unpauseSounds","enabled","disableInteractive","resume","_Phaser$GameObjects$C4","_super8","onPlayClick","onSndClick","_this14","_instructionPage","_instructionPageTitle","_btnPlay","instrTxt","_btnSoundInstruction","_Phaser$GameObjects$C5","_super9","_this15","_bg","_star"],"mappings":"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","file":"main.js","sourcesContent":["var sh;\n(function (sh) {\n    class App extends Phaser.Game {\n        constructor() {\n            let config = {\n                type: Phaser.AUTO,\n                width: App.CANVAS_WIDTH,\n                height: App.CANVAS_HEIGHT,\n                scale: {\n                    mode: FitScaleManager.detectBestScaleMode(),\n                    autoCenter: Phaser.Scale.CENTER_BOTH\n                },\n                transparent: true,\n                scene: {\n                    create: () => {\n                        this.scene.add('Boot', sh.scene.Boot, true);\n                    }\n                }\n            };\n            super(config);\n        }\n    }\n    App.CANVAS_WIDTH = 980;\n    App.CANVAS_HEIGHT = 600;\n    sh.App = App;\n})(sh || (sh = {}));\nlet game;\nwindow.onload = () => {\n    game = new sh.App();\n};\nlet delayedCalls = [];\nfunction delayedCall(delay, callback, args, callbackScope) {\n    let scene = game.scene.getAt(0);\n    if (scene) {\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\n        delayedCalls.push(dc);\n        return dc;\n    }\n    let t = setTimeout(callback, delay);\n    delayedCalls.push(t);\n    return t;\n}\nfunction destroyAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.remove(false);\n        }\n        else {\n            clearTimeout(dc);\n        }\n    }\n    delayedCalls = [];\n}\nfunction setPageBackground(bg) {\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\n}\nfunction setupButton(btn, frame) {\n    btn.on('pointerdown', () => { btn.setFrame(frame + '_hover' + '0000'); });\n    btn.on('pointerover', () => { btn.setFrame(frame + '_hover' + '0000'); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setFrame(frame + '0000'); });\n    btn.on('pointerup', () => { btn.setFrame(frame + '0000'); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction setupButtonTextureBased(btn, texture, hoverTexture) {\n    btn.on('pointerdown', () => { btn.setTexture(hoverTexture); });\n    btn.on('pointerover', () => { btn.setTexture(hoverTexture); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setTexture(texture); });\n    btn.on('pointerup', () => { btn.setTexture(texture); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\n/**\n * @author Roman Parada\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\n *\n * How to use:\n * Just call the code line below in Boot scene's init() method of your project:\n * new FitScaleManager(this.game).setup();\n */\nclass FitScaleManager {\n    constructor(game) {\n        this.doResize = () => {\n            let scale = this.calculateScale();\n            let newCanvasWidth = this.phaserScaleManager.width * scale;\n            let newCanvasHeight = this.phaserScaleManager.height * scale;\n            this.canvasStyle.width = newCanvasWidth + 'px';\n            this.canvasStyle.height = newCanvasHeight + 'px';\n            this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\n            this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\n        };\n        this.game = game;\n        this.canvasStyle = this.game.canvas.style;\n        this.phaserScaleManager = this.game.scale;\n    }\n    static detectBestScaleMode() {\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\n    }\n    ;\n    /**\n     * Just call this method once in Boot scene's init() method\n     */\n    setup() {\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\n        this.overridePhaserTransformMethods();\n        this.onResize();\n    }\n    calculateScale() {\n        if (game.scale.scaleMode == Phaser.Scale.NONE)\n            return 1;\n        return Math.min(window.innerWidth / this.phaserScaleManager.width, window.innerHeight / this.phaserScaleManager.height);\n    }\n    overridePhaserTransformMethods() {\n        this.game.scale.transformX = (pageX) => {\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\n        };\n        this.game.scale.transformY = (pageY) => {\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\n        };\n    }\n    onResize() {\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\n    }\n}\nFitScaleManager.RESIZE_DELAY = 500;\nvar sh;\n(function (sh) {\n    var core;\n    (function (core) {\n        class Gameplay {\n            constructor() {\n                this.totalLettersCount = 25;\n                this.totalRoundsNum = 2;\n                this.failsNumToLose = 3;\n                this.choicesNumPerRound = 5;\n                // public readonly allLettersNames:string[] = [\"أ\",\"ث\",\"ج\",\"د \",\"ش\",\"ص\",\"ظ\",\"ع\",\"غ\",\"ق\",\"ك\",\"م\",\"ه\",\"و\",\"ي\"];\n                this.currentRound = 0;\n                this.currentLetter = null;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n            setupCallbacks(onComplete, onLose) {\n                this.onComplete = onComplete;\n                this.onLose = onLose;\n            }\n            onLetterChosen() {\n                if (this.isNewRound()) {\n                    this.currentRound++;\n                    if (this.currentRound >= this.totalRoundsNum) {\n                        this.onComplete(this.correctAnswersCount, this.correctAnswersCount);\n                        return true;\n                    }\n                    else {\n                        this.nextLetter();\n                    }\n                }\n                return false;\n            }\n            nextLetter() {\n                if (this.roundsLetter.length == 0) {\n                    this.currentLetter = null;\n                }\n                else {\n                    this.currentLetter = Phaser.Utils.Array.RemoveRandomElement(this.roundsLetter);\n                    this.randomizeGrid();\n                }\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n            getCorrectLetterName() {\n                return this.currentLetter['correctLetterName'];\n            }\n            getCorrectAudioKey() {\n                return this.currentLetter['correctAudioKey'];\n            }\n            onCorrectAnswer() {\n                this.correctAnswersCount++;\n                this.correctAnswersCountThisRound++;\n                return this.onLetterChosen();\n            }\n            onWrongAnswer() {\n                this.wrongAnswersCount++;\n                this.wrongAnswersCountThisRound++;\n                if (this.wrongAnswersCount >= this.failsNumToLose) {\n                    this.onLose(this.correctAnswersCount, this.correctAnswersCount);\n                    return true;\n                }\n                else {\n                    this.onLetterChosen();\n                }\n                return false;\n            }\n            getCurrentTotalAnswersCount() {\n                return this.correctAnswersCount + this.wrongAnswersCount;\n            }\n            getCurrentTotalAnswersCountThisRound() {\n                return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\n            }\n            isNewRound() {\n                return this.getCurrentTotalAnswersCount() % this.choicesNumPerRound == 0;\n            }\n            isRoundsComplete() {\n                return this.getCurrentTotalAnswersCount() / this.choicesNumPerRound >= this.totalRoundsNum;\n            }\n            randomizeGrid() {\n                let _letters = this.letters.slice();\n                this.gridLettersNames = [];\n                let correctLetterName = this.getCorrectLetterName();\n                for (let k = 0; k < this.totalLettersCount / this.choicesNumPerRound - 1; k++) {\n                    let rndLetterName = Phaser.Utils.Array.RemoveRandomElement(_letters);\n                    for (let i = 0; i < this.choicesNumPerRound; i++) {\n                        this.gridLettersNames.push(rndLetterName['correctLetterName']);\n                    }\n                }\n                for (let i = 0; i < this.choicesNumPerRound; i++) {\n                    this.gridLettersNames.push(correctLetterName);\n                }\n            }\n            reset() {\n                let json = game.cache.json.get('gameplay');\n                this.letters = json[\"letters\"].slice();\n                let _letters = this.letters.slice();\n                this.roundsLetter = [];\n                for (let i = 0; i < this.totalRoundsNum; i++) {\n                    this.roundsLetter.push(Phaser.Utils.Array.RemoveRandomElement(_letters));\n                }\n                this.nextLetter();\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n        }\n        core.Gameplay = Gameplay;\n    })(core = sh.core || (sh.core = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var scene;\n    (function (scene) {\n        class Boot extends Phaser.Scene {\n            init() {\n                new FitScaleManager(this.game).setup();\n            }\n            create() {\n                game.scene.remove('Boot');\n                game.scene.add('Preloader', sh.scene.Preloader, true);\n            }\n        }\n        scene.Boot = Boot;\n    })(scene = sh.scene || (sh.scene = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var scene;\n    (function (scene) {\n        var Gameplay = sh.core.Gameplay;\n        class MainScene extends Phaser.Scene {\n            create() {\n                this.gameplay = new Gameplay();\n                this.gameplayScreen = new sh.screen.GameplayScreen(this, this.gameplay);\n                this.children.add(this.gameplayScreen);\n                this.gameplayScreen.showInstructionPage();\n            }\n        }\n        scene.MainScene = MainScene;\n    })(scene = sh.scene || (sh.scene = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var scene;\n    (function (scene) {\n        class Preloader extends Phaser.Scene {\n            preload() {\n            }\n            create() {\n                this.load.json('gameplay', 'assets/json/gameplay.json');\n                this.load.pack('preloader', 'assets/pack.json');\n                this.load.on('progress', (value) => {\n                }, this);\n                this.load.on('complete', () => {\n                    this.nextScene();\n                });\n                this.load.start();\n            }\n            nextScene() {\n                game.scene.remove('Preloader');\n                game.scene.add('ScreenMain', sh.scene.MainScene, true);\n            }\n        }\n        scene.Preloader = Preloader;\n    })(scene = sh.scene || (sh.scene = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class AreYouSureWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onYes, onNo) {\n                super(scene);\n                this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0 - 48, 'Exit warning');\n                this._areYouSurePage.setOrigin(0, 0);\n                this._areYouSurePage.setInteractive();\n                this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485 - 50, 'btnYES1');\n                this._btnSureYes.setInteractive({ cursor: 'pointer' });\n                this._btnSureYes.once('pointerup', onYes);\n                setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\n                this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485 - 50, 'btnNO1');\n                this._btnSureNo.setInteractive({ cursor: 'pointer' });\n                this._btnSureNo.once('pointerup', onNo);\n                setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\n                this.add(this._areYouSurePage);\n                this.add(this._btnSureYes);\n                this.add(this._btnSureNo);\n            }\n        }\n        screen.AreYouSureWindow = AreYouSureWindow;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class CompleteWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay, onNext) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-104.5, -48);\n                this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\n                this._bgComplete.setOrigin(0, 0);\n                this._bgComplete.setInteractive();\n                this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\n                this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\n                let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\n                this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bgComplete,\n                    _CollectedPoints,\n                    this._cup,\n                    this._btnBack,\n                    this._btnReplay,\n                    this._btnNext,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n                this._btnNext.setInteractive({ cursor: 'pointer' });\n                this._btnNext.on('pointerup', () => {\n                    onNext(this._btnNext);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\n            }\n            show(score, starScore) {\n                this._cup.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._cup,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                // let music = this.scene.sound.add(\"viktory\");\n                this.music = this.scene.sound.add(\"Activity completion fantastic\");\n                this.music.play();\n            }\n        }\n        screen.CompleteWindow = CompleteWindow;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class GameplayScreen extends Phaser.GameObjects.Container {\n            constructor(scene, gameplay) {\n                super(scene);\n                this.rows = 5;\n                this.cols = 5;\n                this.bgMusic = null;\n                this.soundGooseYes = null;\n                this.soundGooseNo = null;\n                this.correctAudio = null;\n                this.wfsnd = null;\n                this.showCompleteWindow = (score, starScore) => {\n                    let completeWindow = new screen.CompleteWindow(this.scene, (target) => {\n                        this.playBtnClickAnim(target);\n                    }, (target) => {\n                        this.playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(completeWindow);\n                        this.showInstructionPage();\n                    }, (target) => {\n                        this.playBtnClickAnim(target);\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(750, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(completeWindow);\n                        completeWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.showLoseWindow = (score, starScore) => {\n                    let tryAgainWindow = new screen.TryAgainWindow(this.scene, (target) => {\n                        this.playBtnClickAnim(target);\n                    }, (target) => {\n                        this.playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(tryAgainWindow);\n                        this.showInstructionPage();\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(750, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(tryAgainWindow);\n                        tryAgainWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.gameplay = gameplay;\n                window[\"t\"] = this;\n            }\n            showGameplay() {\n                setPageBackground(\"bg-australia\");\n                this.bgMusic = this.scene.sound.add(\"bg_sound\");\n                this.bgMusic.play();\n                this.bgMusic.loop = true;\n                this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, '3 Letter Grid');\n                this._gameStage.setOrigin(0.485, 0.48);\n                this._gameStage.setInteractive();\n                this._btnSound = new Phaser.GameObjects.Image(this.scene, 160 - 105, 100 - 50, 'Sound');\n                this._btnSound.setInteractive({ cursor: 'pointer' });\n                setupButtonTextureBased(this._btnSound, 'Sound', 'Sound HOVER EFFECT');\n                this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025 - 105, 100 - 50, 'x Button');\n                this._btnClose.setInteractive({ cursor: 'pointer' });\n                setupButtonTextureBased(this._btnClose, 'x Button', 'x Button HOVER EFFECT');\n                this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\n                this.addAt(this.gameplayContainer, 0);\n                this.targetLetterLabel = new Phaser.GameObjects.Image(this.scene, 590, 90, null);\n                this.gameplayContainer.add([\n                    this._gameStage,\n                    this._btnSound,\n                    this._btnClose,\n                    this.targetLetterLabel\n                ]);\n                this.gameplay.reset();\n                this.createGrid();\n                this.createCrescentMoons();\n                this.createInput();\n                this.shuffleOutHexagons();\n                this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow);\n            }\n            shuffleOutHexagons() {\n                this.setInputEnabled(false);\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = this.grid[i][j];\n                        c.setScale(0);\n                        this.scene.tweens.add({\n                            targets: c,\n                            \"scale\": 1,\n                            duration: 300,\n                            delay: 700\n                        });\n                    }\n                }\n                this.targetLetterLabel.visible = false;\n                this.resetCrescentMoons();\n                this.randomizeGrid();\n                delayedCall(1200, () => {\n                    this.targetLetterLabel.visible = true;\n                    this.updateClickLetterTargetLabel();\n                    if (this.gameplay.isNewRound()) {\n                        if (!this.gameplay.isRoundsComplete()) {\n                            this.playCorrectAudio();\n                            delayedCall(2000, () => {\n                                this.setInputEnabled(true);\n                            });\n                        }\n                    }\n                    else {\n                        this.setInputEnabled(true);\n                    }\n                });\n            }\n            shuffleInHexagons() {\n                this.setInputEnabled(false);\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = this.grid[i][j];\n                        this.scene.tweens.add({\n                            targets: c,\n                            \"scale\": 0,\n                            duration: 300,\n                            delay: 700,\n                            onComplete: () => {\n                                c[\"bg\"].setTexture('rr_def');\n                            }\n                        });\n                    }\n                }\n                delayedCall(1000, () => {\n                    this.shuffleOutHexagons();\n                });\n            }\n            createInput() {\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = this.grid[i][j];\n                        c[\"bg\"].on('pointerup', () => {\n                            this.playBtnClickAnim(c);\n                            c[\"bg\"].setTexture('rr_active');\n                            let l = c[\"letter\"];\n                            if (l && l.texture.key == this.gameplay.getCorrectLetterName()) {\n                                let completed = this.onCorrectAnswer();\n                                if (!completed) {\n                                    if (this.gameplay.isNewRound()) {\n                                        this.shuffleInHexagons();\n                                    }\n                                }\n                            }\n                            else {\n                                let lost = this.onWrongAnswer();\n                                if (!lost) {\n                                    if (this.gameplay.isNewRound()) {\n                                        this.shuffleInHexagons();\n                                    }\n                                }\n                            }\n                        });\n                    }\n                }\n                this._btnSound.on('pointerup', () => {\n                    this.playBtnClickAnim(this._btnSound);\n                    this.onSoundClick();\n                });\n                this._btnClose.on('pointerup', () => {\n                    this.playBtnClickAnim(this._btnClose);\n                    this.onCloseClick();\n                });\n            }\n            createGrid() {\n                let startX = 355;\n                let startY = 200;\n                let dx = 76;\n                let dy = 71;\n                this.grid = [];\n                for (let i = 0; i < this.rows; i++) {\n                    let arr = [];\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = new Phaser.GameObjects.Container(this.scene, startX + i * dx, startY + j * dy);\n                        this.gameplayContainer.add(c);\n                        c[\"bg\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, 'rr_def');\n                        c.add(c[\"bg\"]);\n                        c[\"letter\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, null);\n                        c[\"letter\"][\"rectContainer\"] = c;\n                        c.add(c[\"letter\"]);\n                        arr.push(c);\n                    }\n                    this.grid.push(arr);\n                }\n            }\n            randomizeGrid() {\n                let gridLettersNames = this.gameplay.gridLettersNames.slice();\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let l = this.grid[i][j][\"letter\"];\n                        let rnd = Phaser.Utils.Array.RemoveRandomElement(gridLettersNames);\n                        l.setTexture(rnd);\n                    }\n                }\n            }\n            updateClickLetterTargetLabel() {\n                this.targetLetterLabel.setTexture(this.gameplay.getCorrectLetterName());\n            }\n            createCrescentMoons() {\n                this.crescentMoons = [];\n                let dy = 61;\n                for (let i = 0; i < this.gameplay.choicesNumPerRound; i++) {\n                    let cm = new Phaser.GameObjects.Image(this.scene, 179, 261 + i * dy, 'crescent_moon_def');\n                    this.crescentMoons.push(cm);\n                    this.gameplayContainer.add(cm);\n                    cm.visible = false;\n                }\n            }\n            resetCrescentMoons() {\n                for (let i = 0; i < this.crescentMoons.length; i++) {\n                    this.setMoonsActive(i, false);\n                    this.crescentMoons[i].visible = false;\n                }\n            }\n            setMoonsActive(index, active) {\n                this.crescentMoons[index].visible = true;\n                this.crescentMoons[index].setTexture(active ? 'crescent_moon_active' : 'crescent_moon_def');\n            }\n            onCorrectAnswer() {\n                this.setMoonsActive(this.gameplay.getCurrentTotalAnswersCountThisRound(), true);\n                let completed = this.gameplay.onCorrectAnswer();\n                this.soundGooseYes = this.scene.sound.add(\"Goose Yes\");\n                this.soundGooseYes.play();\n                return completed;\n            }\n            onWrongAnswer() {\n                this.setMoonsActive(this.gameplay.getCurrentTotalAnswersCountThisRound(), false);\n                let lost = this.gameplay.onWrongAnswer();\n                this.soundGooseNo = this.scene.sound.add(\"Goose no\");\n                this.soundGooseNo.play();\n                return lost;\n            }\n            playCorrectAudio() {\n                if (this.correctAudio) {\n                    this.correctAudio.stop();\n                }\n                try {\n                    this.correctAudio = this.scene.sound.add('translate_click_on');\n                    this.correctAudio.play();\n                    if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\n                        this.correctAudio.pause();\n                    }\n                    delayedCall(750, () => {\n                        this.correctAudio = this.scene.sound.add(this.gameplay.getCorrectAudioKey());\n                        this.correctAudio.play();\n                        if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\n                            this.correctAudio.pause();\n                        }\n                    });\n                }\n                catch (e) {\n                    console.log(e);\n                }\n            }\n            onSoundClick() {\n                this.playCorrectAudio();\n            }\n            onCloseClick() {\n                this.showAreYouSurePage();\n            }\n            playBtnClickAnim(target) {\n                target.scaleX = target.scaleY = 1;\n                this.scene.tweens.add({\n                    targets: target,\n                    \"scaleX\": 0.9,\n                    \"scaleY\": 0.9,\n                    duration: 100,\n                    yoyo: true\n                });\n            }\n            showInstructionPage() {\n                setPageBackground(\"bg-blue\");\n                let playInstructionSound = () => {\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                    this.wfsnd = this.scene.sound.add(\"Welcome Find the sound\");\n                    this.wfsnd.play();\n                };\n                this.instructionPage = new screen.InstructionPage(this.scene, (target) => {\n                    this.playBtnClickAnim(target);\n                    this.remove(this.instructionPage);\n                    this.showGameplay();\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                }, (target) => {\n                    this.playBtnClickAnim(target);\n                    playInstructionSound();\n                });\n                this.add(this.instructionPage);\n                playInstructionSound();\n            }\n            showAreYouSurePage() {\n                setPageBackground(\"bg-blue\");\n                this.pauseSounds();\n                this.areYouSureWindow = new screen.AreYouSureWindow(this.scene, () => {\n                    this.remove(this.areYouSureWindow);\n                    this.destroyGameplay();\n                    this.showInstructionPage();\n                }, () => {\n                    this.remove(this.areYouSureWindow);\n                    this.unpauseSounds();\n                    setPageBackground(\"bg-australia\");\n                });\n                this.add(this.areYouSureWindow);\n            }\n            setInputEnabled(enabled) {\n                if (enabled) {\n                    for (let i = 0; i < this.rows; i++) {\n                        for (let j = 0; j < this.cols; j++) {\n                            this.grid[i][j][\"bg\"].setInteractive({ cursor: 'pointer' });\n                        }\n                    }\n                }\n                else {\n                    for (let i = 0; i < this.rows; i++) {\n                        for (let j = 0; j < this.cols; j++) {\n                            this.grid[i][j][\"bg\"].disableInteractive();\n                        }\n                    }\n                }\n            }\n            pauseSounds() {\n                if (this.soundGooseYes)\n                    this.soundGooseYes.stop();\n                if (this.soundGooseNo)\n                    this.soundGooseNo.stop();\n                if (this.correctAudio)\n                    this.correctAudio.pause();\n                if (this.bgMusic)\n                    this.bgMusic.pause();\n            }\n            unpauseSounds() {\n                if (this.correctAudio)\n                    this.correctAudio.resume();\n                if (this.bgMusic)\n                    this.bgMusic.resume();\n            }\n            destroyGameplay() {\n                this.setInputEnabled(false);\n                this.remove(this.gameplayContainer);\n                destroyAllDelayedCalls();\n            }\n        }\n        screen.GameplayScreen = GameplayScreen;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class InstructionPage extends Phaser.GameObjects.Container {\n            constructor(scene, onPlayClick, onSndClick) {\n                super(scene);\n                this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0 - 105, 0 - 48, 'Instructions page  ALL ACTIVITY  TITLEs');\n                this._instructionPage.setOrigin(0, 0);\n                this._instructionPage.setInteractive();\n                this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'welcome');\n                this._instructionPageTitle.setScale(0.75);\n                this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\n                this._btnPlay.setInteractive({ cursor: 'pointer' });\n                this._btnPlay.once('pointerup', onPlayClick);\n                setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\n                this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Find the sound.\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 37,\n                    \"color\": \"#A25122\",\n                    \"align\": 'center',\n                    'stroke': '#FFFFFF',\n                    'strokeThickness': 6,\n                });\n                this.instrTxt.setOrigin(0.5, 0.5);\n                this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\n                this._btnSoundInstruction.setInteractive({ cursor: 'pointer' });\n                this._btnSoundInstruction.on('pointerup', onSndClick);\n                setupButtonTextureBased(this._btnSoundInstruction, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._instructionPage);\n                this.add(this._instructionPageTitle);\n                this.add(this.instrTxt);\n                this.add(this._btnPlay);\n                this.add(this._btnSoundInstruction);\n            }\n        }\n        screen.InstructionPage = InstructionPage;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class TryAgainWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-106, -48);\n                this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\n                this._bg.setOrigin(0, 0);\n                this._bg.setInteractive();\n                this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\n                this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bg,\n                    this._star,\n                    this._btnBack,\n                    this._btnReplay,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n            }\n            show(score, starScore) {\n                this._star.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._star,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                this.music = this.scene.sound.add(\"Fail - close one\");\n                this.music.play();\n            }\n        }\n        screen.TryAgainWindow = TryAgainWindow;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\n","namespace sh {\r\n    export class App extends Phaser.Game {\r\n\r\n        public static readonly CANVAS_WIDTH: number = 980;\r\n        public static readonly CANVAS_HEIGHT: number = 600;\r\n\r\n        constructor() {\r\n            let config: Phaser.Types.Core.GameConfig = {\r\n                type: Phaser.AUTO,\r\n                width: App.CANVAS_WIDTH,\r\n                height: App.CANVAS_HEIGHT,\r\n                scale: {\r\n                    mode: FitScaleManager.detectBestScaleMode(),\r\n                    autoCenter: Phaser.Scale.CENTER_BOTH\r\n                },\r\n                transparent: true,\r\n                scene: {\r\n                    create: () => {\r\n                        this.scene.add('Boot', sh.scene.Boot, true);\r\n                    }\r\n                }\r\n            };\r\n            super(config);\r\n        }\r\n    }\r\n}\r\n\r\nlet game: sh.App;\r\nwindow.onload = () => {\r\n    game = new sh.App();\r\n};\r\n\r\nlet delayedCalls = [];\r\nfunction delayedCall(delay: number, callback: Function, args?: any[], callbackScope?: any): Phaser.Time.TimerEvent | number {\r\n    let scene = game.scene.getAt(0);\r\n    if (scene) {\r\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\r\n        delayedCalls.push(dc);\r\n        return dc;\r\n    }\r\n    let t = setTimeout(callback, delay);\r\n    delayedCalls.push(t);\r\n    return t;\r\n}\r\nfunction destroyAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).remove(false);\r\n        } else {\r\n            clearTimeout(dc);\r\n        }\r\n    }\r\n    delayedCalls = [];\r\n}\r\n\r\nfunction setPageBackground(bg: string) {\r\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\r\n}\r\n\r\nfunction setupButton(btn, frame) {\r\n    btn.on('pointerdown', ()=>{btn.setFrame(frame + '_hover' + '0000')});\r\n    btn.on('pointerover', ()=>{btn.setFrame(frame + '_hover' + '0000');game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setFrame(frame + '0000')});\r\n    btn.on('pointerup', ()=>{btn.setFrame(frame + '0000');game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\nfunction setupButtonTextureBased(btn:Phaser.GameObjects.Image, texture, hoverTexture) {\r\n    btn.on('pointerdown', ()=>{btn.setTexture(hoverTexture)});\r\n    btn.on('pointerover', ()=>{btn.setTexture(hoverTexture);game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setTexture(texture)});\r\n    btn.on('pointerup', ()=>{btn.setTexture(texture);game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}","namespace sh.screen {\r\n    export class TryAgainWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bg:Phaser.GameObjects.Image;\r\n        _star:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-106, -48);\r\n\r\n            this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\r\n            this._bg.setOrigin(0, 0);\r\n            this._bg.setInteractive();\r\n            this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bg,\r\n                this._star,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._star.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._star,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            this.music = this.scene.sound.add(\"Fail - close one\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}","/**\r\n * @author Roman Parada\r\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\r\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\r\n *\r\n * How to use:\r\n * Just call the code line below in Boot scene's init() method of your project:\r\n * new FitScaleManager(this.game).setup();\r\n */\r\nclass FitScaleManager {\r\n\r\n    public static detectBestScaleMode():integer {\r\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\r\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\r\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\r\n    };\r\n\r\n    private static RESIZE_DELAY: number = 500;\r\n\r\n    private game: Phaser.Game;\r\n\r\n    private canvasStyle: CSSStyleDeclaration;\r\n    private phaserScaleManager: Phaser.Scale.ScaleManager;\r\n\r\n    constructor(game: Phaser.Game) {\r\n        this.game = game;\r\n\r\n        this.canvasStyle = this.game.canvas.style;\r\n        this.phaserScaleManager = this.game.scale;\r\n    }\r\n\r\n    /**\r\n     * Just call this method once in Boot scene's init() method\r\n     */\r\n    public setup(): void {\r\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\r\n\r\n        this.overridePhaserTransformMethods();\r\n\r\n        this.onResize();\r\n    }\r\n\r\n    private calculateScale(): number {\r\n        if (game.scale.scaleMode == Phaser.Scale.NONE) return 1;\r\n\r\n        return Math.min(\r\n            window.innerWidth / this.phaserScaleManager.width,\r\n            window.innerHeight / this.phaserScaleManager.height\r\n        );\r\n    }\r\n\r\n    private overridePhaserTransformMethods(): void {\r\n        this.game.scale.transformX = (pageX: number) => {\r\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n        this.game.scale.transformY = (pageY: number) => {\r\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n    }\r\n\r\n    private onResize(): void {\r\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\r\n    }\r\n\r\n    private doResize: () => void = () => {\r\n        let scale: number = this.calculateScale();\r\n\r\n        let newCanvasWidth: number = this.phaserScaleManager.width * scale;\r\n        let newCanvasHeight: number = this.phaserScaleManager.height * scale;\r\n\r\n        this.canvasStyle.width = newCanvasWidth + 'px';\r\n        this.canvasStyle.height = newCanvasHeight + 'px';\r\n\r\n        this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\r\n        this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\r\n    };\r\n}","namespace sh.core {\r\n    export class Gameplay {\r\n\r\n        private totalLettersCount:number = 25;\r\n\r\n        public readonly totalRoundsNum:number = 2;\r\n        public readonly failsNumToLose:number = 3;\r\n        public readonly choicesNumPerRound:number = 5;\r\n\r\n        // public readonly allLettersNames:string[] = [\"أ\",\"ث\",\"ج\",\"د \",\"ش\",\"ص\",\"ظ\",\"ع\",\"غ\",\"ق\",\"ك\",\"م\",\"ه\",\"و\",\"ي\"];\r\n\r\n        private currentRound:number = 0;\r\n        private currentLetter:object = null;\r\n        private letters:object[];\r\n\r\n        private correctAnswersCount: number = 0;\r\n        private wrongAnswersCount: number = 0;\r\n        public correctAnswersCountThisRound: number = 0;\r\n        public wrongAnswersCountThisRound: number = 0;\r\n\r\n        private roundsLetter:object[];\r\n\r\n        public gridLettersNames:string[];\r\n\r\n        private onComplete:(score:number, starScore:number)=>void;\r\n        private onLose:(score:number, starScore:number)=>void;\r\n\r\n        constructor() {\r\n        }\r\n\r\n        public setupCallbacks(onComplete:(score:number, starScore:number)=>void, onLose:(score:number, starScore:number)=>void):void {\r\n            this.onComplete = onComplete;\r\n            this.onLose = onLose;\r\n        }\r\n\r\n        public onLetterChosen():boolean {\r\n            if (this.isNewRound()) {\r\n                this.currentRound++;\r\n                if (this.currentRound >= this.totalRoundsNum) {\r\n                    this.onComplete(this.correctAnswersCount, this.correctAnswersCount);\r\n                    return true;\r\n                } else {\r\n                    this.nextLetter();\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public nextLetter():void {\r\n            if (this.roundsLetter.length == 0) {\r\n                this.currentLetter = null;\r\n            } else {\r\n                this.currentLetter = Phaser.Utils.Array.RemoveRandomElement(this.roundsLetter);\r\n                this.randomizeGrid();\r\n            }\r\n            this.correctAnswersCountThisRound = 0;\r\n            this.wrongAnswersCountThisRound = 0;\r\n        }\r\n\r\n        public getCorrectLetterName():string {\r\n            return this.currentLetter['correctLetterName'];\r\n        }\r\n\r\n        public getCorrectAudioKey():string {\r\n            return this.currentLetter['correctAudioKey'];\r\n        }\r\n\r\n        public onCorrectAnswer(): boolean {\r\n            this.correctAnswersCount++;\r\n            this.correctAnswersCountThisRound++;\r\n\r\n            return this.onLetterChosen();\r\n        }\r\n\r\n        public onWrongAnswer(): boolean {\r\n            this.wrongAnswersCount++;\r\n            this.wrongAnswersCountThisRound++;\r\n\r\n            if (this.wrongAnswersCount >= this.failsNumToLose) {\r\n                this.onLose(this.correctAnswersCount, this.correctAnswersCount);\r\n                return true;\r\n            } else {\r\n                this.onLetterChosen();\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCount(): number {\r\n            return this.correctAnswersCount + this.wrongAnswersCount;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCountThisRound(): number {\r\n            return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\r\n        }\r\n\r\n        public isNewRound():boolean {\r\n            return this.getCurrentTotalAnswersCount() % this.choicesNumPerRound == 0;\r\n        }\r\n\r\n        public isRoundsComplete():boolean {\r\n            return this.getCurrentTotalAnswersCount() / this.choicesNumPerRound >= this.totalRoundsNum;\r\n        }\r\n\r\n        private randomizeGrid():void {\r\n            let _letters:object[] = this.letters.slice();\r\n            this.gridLettersNames = [];\r\n            let correctLetterName = this.getCorrectLetterName();\r\n            for (let k:number = 0; k < this.totalLettersCount / this.choicesNumPerRound - 1; k++) {\r\n                let rndLetterName = Phaser.Utils.Array.RemoveRandomElement(_letters);\r\n                for (let i:number = 0; i < this.choicesNumPerRound; i++) {\r\n                    this.gridLettersNames.push(rndLetterName['correctLetterName']);\r\n                }\r\n            }\r\n            for (let i:number = 0; i < this.choicesNumPerRound; i++) {\r\n                this.gridLettersNames.push(correctLetterName);\r\n            }\r\n        }\r\n\r\n        public reset():void {\r\n            let json = game.cache.json.get('gameplay');\r\n            this.letters = json[\"letters\"].slice();\r\n\r\n            let _letters = this.letters.slice();\r\n            this.roundsLetter = [];\r\n            for (let i:number = 0; i < this.totalRoundsNum; i++) {\r\n                this.roundsLetter.push(Phaser.Utils.Array.RemoveRandomElement(_letters));\r\n            }\r\n\r\n            this.nextLetter();\r\n\r\n            this.currentRound = 0;\r\n            this.correctAnswersCount = 0;\r\n            this.wrongAnswersCount = 0;\r\n            this.correctAnswersCountThisRound = 0;\r\n            this.wrongAnswersCountThisRound = 0;\r\n        }\r\n    }\r\n}","module sh.scene {\r\n    export class Boot extends Phaser.Scene {\r\n        init() {\r\n            new FitScaleManager(this.game).setup();\r\n        }\r\n\r\n        create() {\r\n            game.scene.remove('Boot');\r\n            game.scene.add('Preloader', sh.scene.Preloader, true);\r\n        }\r\n    }\r\n}","namespace sh.scene {\r\n\r\n    import Gameplay = sh.core.Gameplay;\r\n    import GameplayScreen = sh.screen.GameplayScreen;\r\n\r\n    export class MainScene extends Phaser.Scene {\r\n\r\n        private gameplay:Gameplay;\r\n        private gameplayScreen:GameplayScreen;\r\n\r\n        public create():void {\r\n            this.gameplay = new Gameplay();\r\n\r\n            this.gameplayScreen = new sh.screen.GameplayScreen(this, this.gameplay);\r\n            this.children.add(this.gameplayScreen);\r\n            this.gameplayScreen.showInstructionPage();\r\n        }\r\n    }\r\n}","module sh.scene {\r\n\r\n    export class Preloader extends Phaser.Scene {\r\n\r\n        preload() {\r\n        }\r\n\r\n        create() {\r\n            this.load.json('gameplay', 'assets/json/gameplay.json');\r\n            this.load.pack('preloader', 'assets/pack.json');\r\n\r\n            this.load.on('progress', (value:number) => {\r\n            }, this);\r\n\r\n            this.load.on('complete', () => {\r\n                this.nextScene();\r\n            });\r\n\r\n            this.load.start();\r\n        }\r\n\r\n        private nextScene():void {\r\n            game.scene.remove('Preloader');\r\n            game.scene.add('ScreenMain', sh.scene.MainScene, true);\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class AreYouSureWindow extends Phaser.GameObjects.Container {\r\n\r\n        private _areYouSurePage: Phaser.GameObjects.Image;\r\n        private _btnSureYes: Phaser.GameObjects.Image;\r\n        private _btnSureNo: Phaser.GameObjects.Image;\r\n\r\n        constructor(scene: Phaser.Scene, onYes:()=>void, onNo:()=>void) {\r\n            super(scene);\r\n\r\n            this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0-48, 'Exit warning');\r\n            this._areYouSurePage.setOrigin(0, 0);\r\n            this._areYouSurePage.setInteractive();\r\n\r\n            this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485-50, 'btnYES1');\r\n            this._btnSureYes.setInteractive({cursor: 'pointer'});\r\n            this._btnSureYes.once('pointerup', onYes);\r\n            setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\r\n\r\n            this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485-50, 'btnNO1');\r\n            this._btnSureNo.setInteractive({cursor: 'pointer'});\r\n            this._btnSureNo.once('pointerup', onNo);\r\n            setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\r\n\r\n            this.add(this._areYouSurePage);\r\n            this.add(this._btnSureYes);\r\n            this.add(this._btnSureNo);\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class CompleteWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bgComplete:Phaser.GameObjects.Image;\r\n        _cup:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n        _btnNext:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void, onNext:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-104.5, -48);\r\n\r\n            this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\r\n            this._bgComplete.setOrigin(0, 0);\r\n            this._bgComplete.setInteractive();\r\n            this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\r\n            this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\r\n\r\n            let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bgComplete,\r\n                _CollectedPoints,\r\n                this._cup,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this._btnNext,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n            this._btnNext.setInteractive({cursor: 'pointer'});\r\n            this._btnNext.on('pointerup', ()=>{\r\n                onNext(this._btnNext);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._cup.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._cup,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            // let music = this.scene.sound.add(\"viktory\");\r\n            this.music = this.scene.sound.add(\"Activity completion fantastic\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n\r\n    import Gameplay = sh.core.Gameplay;\r\n\r\n    export class GameplayScreen extends Phaser.GameObjects.Container {\r\n        private rows:number = 5;\r\n        private cols:number = 5;\r\n\r\n        _gameStage: Phaser.GameObjects.Image;\r\n        _btnSound: Phaser.GameObjects.Image;\r\n        _btnClose: Phaser.GameObjects.Image;\r\n\r\n        private gameplayContainer: Phaser.GameObjects.Container;\r\n\r\n        grid: Phaser.GameObjects.Container[][];\r\n        crescentMoons:Phaser.GameObjects.Image[];\r\n\r\n        gameplay: Gameplay;\r\n        targetLetterLabel:Phaser.GameObjects.Image;\r\n\r\n        private bgMusic:any = null;\r\n\r\n        constructor(scene: Phaser.Scene, gameplay: Gameplay) {\r\n            super(scene);\r\n            this.gameplay = gameplay;window[\"t\"]=this;\r\n        }\r\n\r\n        public showGameplay(): void {\r\n            setPageBackground(\"bg-australia\");\r\n\r\n            this.bgMusic = this.scene.sound.add(\"bg_sound\");\r\n            this.bgMusic.play();\r\n            this.bgMusic.loop = true;\r\n\r\n            this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, '3 Letter Grid');\r\n            this._gameStage.setOrigin(0.485, 0.48);\r\n            this._gameStage.setInteractive();\r\n            this._btnSound = new Phaser.GameObjects.Image(this.scene, 160-105, 100-50, 'Sound');\r\n            this._btnSound.setInteractive({cursor: 'pointer'});\r\n            setupButtonTextureBased(this._btnSound, 'Sound','Sound HOVER EFFECT');\r\n            this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025-105, 100-50,'x Button');\r\n            this._btnClose.setInteractive({cursor: 'pointer'});\r\n            setupButtonTextureBased(this._btnClose, 'x Button','x Button HOVER EFFECT');\r\n\r\n            this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\r\n            this.addAt(this.gameplayContainer, 0);\r\n\r\n            this.targetLetterLabel = new Phaser.GameObjects.Image(this.scene, 590, 90, null);\r\n\r\n            this.gameplayContainer.add([\r\n                this._gameStage,\r\n                this._btnSound,\r\n                this._btnClose,\r\n                this.targetLetterLabel\r\n            ]);\r\n\r\n            this.gameplay.reset();\r\n            this.createGrid();\r\n            this.createCrescentMoons();\r\n            this.createInput();\r\n            this.shuffleOutHexagons();\r\n            this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow);\r\n        }\r\n\r\n        public shuffleOutHexagons():void {\r\n            this.setInputEnabled(false);\r\n\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c = this.grid[i][j];\r\n                    c.setScale(0);\r\n                    this.scene.tweens.add({\r\n                        targets: c,\r\n                        \"scale\": 1,\r\n                        duration: 300,\r\n                        delay: 700\r\n                    });\r\n                }\r\n            }\r\n\r\n            this.targetLetterLabel.visible = false;\r\n            this.resetCrescentMoons();\r\n            this.randomizeGrid();\r\n\r\n            delayedCall(1200, ()=>{\r\n                this.targetLetterLabel.visible = true;\r\n                this.updateClickLetterTargetLabel();\r\n\r\n                if (this.gameplay.isNewRound()) {\r\n                    if (!this.gameplay.isRoundsComplete()) {\r\n                        this.playCorrectAudio();\r\n                        delayedCall(2000, ()=>{\r\n                            this.setInputEnabled(true);\r\n                        });\r\n                    }\r\n                } else {\r\n                    this.setInputEnabled(true);\r\n                }\r\n            });\r\n        }\r\n\r\n        private shuffleInHexagons():void {\r\n            this.setInputEnabled(false);\r\n\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c = this.grid[i][j];\r\n                    this.scene.tweens.add({\r\n                        targets: c,\r\n                        \"scale\": 0,\r\n                        duration: 300,\r\n                        delay: 700,\r\n                        onComplete:()=>{\r\n                            c[\"bg\"].setTexture('rr_def');\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            delayedCall(1000, ()=>{\r\n                this.shuffleOutHexagons();\r\n            });\r\n        }\r\n\r\n        public createInput(): void {\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c = this.grid[i][j];\r\n                    c[\"bg\"].on('pointerup', () => {\r\n                        this.playBtnClickAnim(c);\r\n                        c[\"bg\"].setTexture('rr_active');\r\n\r\n                        let l = c[\"letter\"];\r\n                        if (l && l.texture.key == this.gameplay.getCorrectLetterName()) {\r\n                            let completed:boolean = this.onCorrectAnswer();\r\n                            if (!completed) {\r\n                                if (this.gameplay.isNewRound()) {\r\n                                    this.shuffleInHexagons();\r\n                                }\r\n                            }\r\n                        } else {\r\n                            let lost:boolean = this.onWrongAnswer();\r\n                            if (!lost) {\r\n                                if (this.gameplay.isNewRound()) {\r\n                                    this.shuffleInHexagons();\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n\r\n\r\n            this._btnSound.on('pointerup', () => {\r\n                this.playBtnClickAnim(this._btnSound);\r\n\r\n                this.onSoundClick();\r\n            });\r\n\r\n            this._btnClose.on('pointerup', () => {\r\n                this.playBtnClickAnim(this._btnClose);\r\n\r\n                this.onCloseClick();\r\n            });\r\n        }\r\n\r\n        public createGrid():void {\r\n            let startX:number = 355;\r\n            let startY:number = 200;\r\n            let dx:number = 76;\r\n            let dy:number = 71;\r\n            this.grid = [];\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                let arr = [];\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c:Phaser.GameObjects.Container = new Phaser.GameObjects.Container(this.scene, startX+i*dx, startY+j*dy);\r\n                    this.gameplayContainer.add(c);\r\n                    c[\"bg\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, 'rr_def');\r\n                    c.add(c[\"bg\"]);\r\n                    c[\"letter\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, null);\r\n                    c[\"letter\"][\"rectContainer\"] = c;\r\n                    c.add(c[\"letter\"]);\r\n                    arr.push(c);\r\n                }\r\n                this.grid.push(arr);\r\n            }\r\n        }\r\n\r\n        private randomizeGrid():void {\r\n            let gridLettersNames:string[] = this.gameplay.gridLettersNames.slice();\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let l:Phaser.GameObjects.Image = this.grid[i][j][\"letter\"];\r\n                    let rnd:any = Phaser.Utils.Array.RemoveRandomElement(gridLettersNames);\r\n                    l.setTexture(rnd);\r\n                }\r\n            }\r\n        }\r\n\r\n        public updateClickLetterTargetLabel():void {\r\n            this.targetLetterLabel.setTexture(this.gameplay.getCorrectLetterName());\r\n        }\r\n\r\n        public createCrescentMoons():void {\r\n            this.crescentMoons = [];\r\n            let dy:number = 61;\r\n            for (let i:number = 0; i < this.gameplay.choicesNumPerRound; i++) {\r\n                let cm = new Phaser.GameObjects.Image(this.scene, 179, 261 + i * dy, 'crescent_moon_def');\r\n                this.crescentMoons.push(cm);\r\n                this.gameplayContainer.add(cm);\r\n                cm.visible = false;\r\n            }\r\n        }\r\n\r\n        public resetCrescentMoons():void {\r\n            for (let i:number = 0; i < this.crescentMoons.length; i++) {\r\n                this.setMoonsActive(i, false);\r\n                this.crescentMoons[i].visible = false;\r\n            }\r\n        }\r\n\r\n        public setMoonsActive(index:number, active:boolean):void {\r\n            this.crescentMoons[index].visible = true;\r\n            this.crescentMoons[index].setTexture(active ? 'crescent_moon_active' : 'crescent_moon_def')\r\n        }\r\n\r\n        private soundGooseYes = null;\r\n        public onCorrectAnswer(): boolean {\r\n            this.setMoonsActive(this.gameplay.getCurrentTotalAnswersCountThisRound(), true);\r\n\r\n            let completed:boolean = this.gameplay.onCorrectAnswer();\r\n\r\n            this.soundGooseYes = this.scene.sound.add(\"Goose Yes\");\r\n            this.soundGooseYes.play();\r\n\r\n            return completed;\r\n        }\r\n\r\n        private soundGooseNo = null;\r\n        public onWrongAnswer(): boolean {\r\n            this.setMoonsActive(this.gameplay.getCurrentTotalAnswersCountThisRound(), false);\r\n\r\n            let lost:boolean = this.gameplay.onWrongAnswer();\r\n\r\n            this.soundGooseNo = this.scene.sound.add(\"Goose no\");\r\n            this.soundGooseNo.play();\r\n\r\n            return lost;\r\n        }\r\n\r\n        private correctAudio = null;\r\n        private playCorrectAudio():void {\r\n            if (this.correctAudio) {\r\n                this.correctAudio.stop();\r\n            }\r\n            try {\r\n                this.correctAudio = this.scene.sound.add('translate_click_on');\r\n                this.correctAudio.play();\r\n                if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\r\n                    this.correctAudio.pause();\r\n                }\r\n                delayedCall(750, ()=>{\r\n                    this.correctAudio = this.scene.sound.add(this.gameplay.getCorrectAudioKey());\r\n                    this.correctAudio.play();\r\n                    if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\r\n                        this.correctAudio.pause();\r\n                    }\r\n                });\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n        public onSoundClick(): void {\r\n            this.playCorrectAudio();\r\n        }\r\n\r\n        public onCloseClick(): void {\r\n            this.showAreYouSurePage();\r\n        }\r\n\r\n        private playBtnClickAnim(target): void {\r\n            target.scaleX = target.scaleY = 1;\r\n            this.scene.tweens.add({\r\n                targets: target,\r\n                \"scaleX\": 0.9,\r\n                \"scaleY\": 0.9,\r\n                duration: 100,\r\n                yoyo: true\r\n            });\r\n        }\r\n\r\n        private wfsnd = null;\r\n        private instructionPage: InstructionPage;\r\n        public showInstructionPage(): void {\r\n            setPageBackground(\"bg-blue\");\r\n\r\n            let playInstructionSound:()=>void = ()=>{\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n                this.wfsnd = this.scene.sound.add(\"Welcome Find the sound\");\r\n                this.wfsnd.play();\r\n            };\r\n\r\n            this.instructionPage = new InstructionPage(this.scene, (target) => {\r\n                this.playBtnClickAnim(target);\r\n                this.remove(this.instructionPage);\r\n                this.showGameplay();\r\n\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n            },(target) => {\r\n                this.playBtnClickAnim(target);\r\n                playInstructionSound();\r\n            });\r\n            this.add(this.instructionPage);\r\n            playInstructionSound();\r\n        }\r\n\r\n        private areYouSureWindow:AreYouSureWindow;\r\n        public showAreYouSurePage(): void {\r\n            setPageBackground(\"bg-blue\");\r\n\r\n            this.pauseSounds();\r\n\r\n            this.areYouSureWindow = new AreYouSureWindow(this.scene, ()=> {\r\n                this.remove(this.areYouSureWindow);\r\n                this.destroyGameplay();\r\n                this.showInstructionPage();\r\n            },()=> {\r\n                this.remove(this.areYouSureWindow);\r\n                this.unpauseSounds();\r\n                setPageBackground(\"bg-australia\");\r\n            });\r\n            this.add(this.areYouSureWindow);\r\n        }\r\n\r\n        public showCompleteWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let completeWindow: CompleteWindow = new CompleteWindow(this.scene, (target) => {\r\n                this.playBtnClickAnim(target);\r\n            }, (target) => {\r\n                this.playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(completeWindow);\r\n                this.showInstructionPage();\r\n            }, (target) => {\r\n                this.playBtnClickAnim(target);\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(750, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(completeWindow);\r\n                completeWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public showLoseWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let tryAgainWindow: TryAgainWindow = new TryAgainWindow(this.scene, (target) => {\r\n                this.playBtnClickAnim(target);\r\n            }, (target) => {\r\n                this.playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(tryAgainWindow);\r\n                this.showInstructionPage();\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(750, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(tryAgainWindow);\r\n                tryAgainWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public setInputEnabled(enabled: boolean): void {\r\n            if (enabled) {\r\n                for (let i:number = 0; i < this.rows; i++) {\r\n                    for (let j:number = 0; j < this.cols; j++) {\r\n                        this.grid[i][j][\"bg\"].setInteractive({cursor: 'pointer'});\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i:number = 0; i < this.rows; i++) {\r\n                    for (let j:number = 0; j < this.cols; j++) {\r\n                        this.grid[i][j][\"bg\"].disableInteractive();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public pauseSounds():void {\r\n            if (this.soundGooseYes) this.soundGooseYes.stop();\r\n            if (this.soundGooseNo) this.soundGooseNo.stop();\r\n            if (this.correctAudio) this.correctAudio.pause();\r\n            if (this.bgMusic) this.bgMusic.pause();\r\n        }\r\n\r\n        public unpauseSounds():void {\r\n            if (this.correctAudio) this.correctAudio.resume();\r\n            if (this.bgMusic) this.bgMusic.resume();\r\n        }\r\n\r\n        public destroyGameplay():void {\r\n            this.setInputEnabled(false);\r\n            this.remove(this.gameplayContainer);\r\n            destroyAllDelayedCalls();\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class InstructionPage extends Phaser.GameObjects.Container {\r\n\r\n        private _instructionPage: Phaser.GameObjects.Image;\r\n        private _instructionPageTitle: Phaser.GameObjects.Image;\r\n        private _btnPlay: Phaser.GameObjects.Image;\r\n        private _btnSoundInstruction: Phaser.GameObjects.Image;\r\n        private instrTxt: Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onPlayClick:(target)=>void, onSndClick:(target)=>void) {\r\n            super(scene);\r\n\r\n            this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0-105, 0-48, 'Instructions page  ALL ACTIVITY  TITLEs');\r\n            this._instructionPage.setOrigin(0, 0);\r\n            this._instructionPage.setInteractive();\r\n\r\n            this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'welcome');\r\n            this._instructionPageTitle.setScale(0.75);\r\n\r\n            this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\r\n            this._btnPlay.setInteractive({cursor: 'pointer'});\r\n            this._btnPlay.once('pointerup', onPlayClick);\r\n            setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\r\n\r\n            this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Find the sound.\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 37,\r\n                \"color\": \"#A25122\",\r\n                \"align\": 'center',\r\n                'stroke': '#FFFFFF',\r\n                'strokeThickness': 6,\r\n            });\r\n            this.instrTxt.setOrigin(0.5, 0.5);\r\n\r\n            this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\r\n            this._btnSoundInstruction.setInteractive({cursor: 'pointer'});\r\n            this._btnSoundInstruction.on('pointerup', onSndClick);\r\n            setupButtonTextureBased(this._btnSoundInstruction, 'Sound','Sound HOVER EFFECT');\r\n\r\n            this.add(this._instructionPage);\r\n            this.add(this._instructionPageTitle);\r\n            this.add(this.instrTxt);\r\n            this.add(this._btnPlay);\r\n            this.add(this._btnSoundInstruction);\r\n        }\r\n    }\r\n}"]}