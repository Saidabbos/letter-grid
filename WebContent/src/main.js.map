{"version":3,"sources":["main.js","../ts/src/App.ts","../ts/src/FitScaleManager.ts","../ts/src/core/Gameplay.ts","../ts/src/scene/Boot.ts","../ts/src/scene/MainScene.ts","../ts/src/scene/Preloader.ts","../ts/src/screen/AreYouSureWindow.ts","../ts/src/screen/CompleteWindow.ts","../ts/src/screen/DoorsWindow.ts","../ts/src/screen/GameplayScreen.ts","../ts/src/screen/InstructionPage.ts","../ts/src/screen/TryAgainWindow.ts"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","minLen","_arrayLikeToArray","toString","call","slice","name","from","test","arr","len","arr2","_classCallCheck","instance","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Date","getPrototypeOf","game","sh","App","_Phaser$Game","Phaser","Game","_super","_this","config","type","WEBGL","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","parent","dom","createContainer","scale","mode","FitScaleManager","detectBestScaleMode","autoCenter","Scale","CENTER_BOTH","transparent","scene","add","Boot","window","onload","delayedCalls","delayedCall","delay","callback","args","callbackScope","getAt","dc","time","push","t","setTimeout","pauseAllDelayedCalls","_step","_iterator","Time","TimerEvent","paused","resumeAllDelayedCalls","_step2","_iterator2","destroyAllDelayedCalls","_step3","_iterator3","remove","clearTimeout","setPageBackground","bg","document","querySelector","style","backgroundImage","setupButton","btn","frame","on","setFrame","sound","play","setupButtonTextureBased","texture","hoverTexture","setTexture","_this2","doResize","calculateScale","newCanvasWidth","phaserScaleManager","newCanvasHeight","canvasStyle","marginLeft","innerWidth","marginTop","innerHeight","canvas","addListener","Events","RESIZE","onResize","overridePhaserTransformMethods","scaleMode","NONE","Math","min","_this3","transformX","pageX","parseInt","split","transformY","pageY","RESIZE_DELAY","iOS","navigator","platform","isAndroid","userAgent","toLowerCase","indexOf","FIT","core","Gameplay","totalLettersCount","totalRoundsNum","failsNumToLose","choicesNumPerRound","currentRound","currentLetter","correctAnswersCount","wrongAnswersCount","correctAnswersCountThisRound","wrongAnswersCountThisRound","onComplete","onLose","score","calculateScore","nextLetter","roundsLetter","ind","floor","random","splice","gridLettersNames","correctLetterName","getCorrectLetterName","rwl","roundsWrongLetters","_step4","_iterator4","wl","onLetterChosen","getCurrentTotalAnswersCountThisRound","getCurrentTotalAnswersCount","json","cache","get","letters","rounds","_step5","_iterator5","r","l","_Phaser$Scene","Scene","_super2","Preloader","MainScene","_Phaser$Scene2","_super3","gameplay","gameplayScreen","screen","GameplayScreen","children","showInstructionPage","_Phaser$Scene3","_super4","_this4","load","pack","nextScene","start","AreYouSureWindow","_Phaser$GameObjects$C","GameObjects","Container","_super5","onYes","onNo","_this5","_areYouSurePage","Image","setOrigin","setInteractive","_btnSureYes","cursor","once","_btnSureNo","CompleteWindow","_Phaser$GameObjects$C2","_super6","onBack","onReplay","onNext","_this6","music","setPosition","_bgComplete","_cup","_btnBack","_btnReplay","_btnNext","_CollectedPoints","totalScoreTxt","text","fontFamily","fontSize","color","align","stroke","strokeThickness","grd","context","createLinearGradient","addColorStop","setFill","starScoreTxt","stop","starScore","tweens","targets","duration","ease","Easing","Back","Out","String","DoorsWindow","_Phaser$GameObjects$C3","_super7","_this7","_DoorR","_DoorL","_DoorInside","door","def_vertices_no_offset","vertXIndexes","vertYIndexes","vertYSign","tweenDoorValueY","visible","def_vertices","mesh","make","x","y","vertices","uv","tweenDoorValueX","Linear","onUpdate","k","_step6","_iterator6","openDoor","_Phaser$GameObjects$C4","_super8","_this8","rows","cols","bgMusic","sfxOpen","sfxClose","soundGooseYes","soundGooseNo","correctAudio","wfsnd","sfxCallToPrayer","showCompleteWindow","completeWindow","playBtnClickAnim","destroyGameplay","setInputEnabled","doorsWindow","open","show","showLoseWindow","tryAgainWindow","TryAgainWindow","loop","_gameStage","_btnSound","_btnClose","gameplayContainer","addAt","targetLetterLabel","tint","round","reset","createGrid","createCrescentMoons","createInput","showOutGrid","setupCallbacks","_this9","j","c","grid","setScale","resetCrescentMoons","randomizeGrid","updateClickLetterTargetLabel","isNewRound","isRoundsComplete","playCorrectAudio","showOut","_this10","_loop","_this11","_loop2","disableInteractive","onCorrectAnswer","showInGrid","onWrongAnswer","onSoundClick","onCloseClick","minTriesGrid","minTries","Number","MAX_VALUE","triesNum","sim","Utils","Shuffle","checkRandomizationSimilarity","rnd","shift","similarity","crescentMoons","cm","setMoonsActive","index","active","completed","lost","_this12","areYouSureWindow","parentContainer","pause","getCorrectAudioKey","console","log","showAreYouSurePage","scaleX","scaleY","yoyo","_this13","playInstructionSound","instructionPage","InstructionPage","showGameplay","_this14","pauseSounds","unpauseSounds","enabled","pauseAll","resumeAll","_Phaser$GameObjects$C5","_super9","onPlayClick","onSndClick","_this15","_instructionPage","_instructionPageTitle","_btnPlay","instrTxt","setLineSpacing","_btnSoundInstruction","_Phaser$GameObjects$C6","_super10","_this16","_bg","_star"],"mappings":"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","file":"main.js","sourcesContent":["var sh;\n(function (sh) {\n    class App extends Phaser.Game {\n        constructor() {\n            let config = {\n                type: Phaser.WEBGL,\n                width: App.CANVAS_WIDTH,\n                height: App.CANVAS_HEIGHT,\n                parent: 'game-container',\n                dom: {\n                    createContainer: false\n                },\n                scale: {\n                    mode: FitScaleManager.detectBestScaleMode(),\n                    autoCenter: Phaser.Scale.CENTER_BOTH\n                },\n                transparent: true,\n                scene: {\n                    create: () => {\n                        this.scene.add('Boot', sh.scene.Boot, true);\n                    }\n                }\n            };\n            super(config);\n        }\n    }\n    App.CANVAS_WIDTH = 980;\n    App.CANVAS_HEIGHT = 600;\n    sh.App = App;\n})(sh || (sh = {}));\nlet game;\nwindow.onload = () => {\n    game = new sh.App();\n};\nlet delayedCalls = [];\nfunction delayedCall(delay, callback, args, callbackScope) {\n    let scene = game.scene.getAt(0);\n    if (scene) {\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\n        delayedCalls.push(dc);\n        return dc;\n    }\n    let t = setTimeout(callback, delay);\n    delayedCalls.push(t);\n    return t;\n}\nfunction pauseAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = true;\n        }\n    }\n}\nfunction resumeAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = false;\n        }\n    }\n}\nfunction destroyAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.remove(false);\n        }\n        else {\n            clearTimeout(dc);\n        }\n    }\n    delayedCalls = [];\n}\nfunction setPageBackground(bg) {\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\n}\nfunction setupButton(btn, frame) {\n    btn.on('pointerdown', () => { btn.setFrame(frame + '_hover' + '0000'); });\n    btn.on('pointerover', () => { btn.setFrame(frame + '_hover' + '0000'); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setFrame(frame + '0000'); });\n    btn.on('pointerup', () => { btn.setFrame(frame + '0000'); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction setupButtonTextureBased(btn, texture, hoverTexture) {\n    btn.on('pointerdown', () => { btn.setTexture(hoverTexture); });\n    btn.on('pointerover', () => { btn.setTexture(hoverTexture); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setTexture(texture); });\n    btn.on('pointerup', () => { btn.setTexture(texture); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\n/**\n * @author Roman Parada\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\n *\n * How to use:\n * Just call the code line below in Boot scene's init() method of your project:\n * new FitScaleManager(this.game).setup();\n */\nclass FitScaleManager {\n    constructor(game) {\n        this.doResize = () => {\n            let scale = this.calculateScale();\n            let newCanvasWidth = this.phaserScaleManager.width * scale;\n            let newCanvasHeight = this.phaserScaleManager.height * scale;\n            this.canvasStyle.width = newCanvasWidth + 'px';\n            this.canvasStyle.height = newCanvasHeight + 'px';\n            this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\n            this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\n        };\n        this.game = game;\n        this.canvasStyle = this.game.canvas.style;\n        this.phaserScaleManager = this.game.scale;\n    }\n    static detectBestScaleMode() {\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\n    }\n    ;\n    /**\n     * Just call this method once in Boot scene's init() method\n     */\n    setup() {\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\n        this.overridePhaserTransformMethods();\n        this.onResize();\n    }\n    calculateScale() {\n        if (game.scale.scaleMode == Phaser.Scale.NONE)\n            return 1;\n        return Math.min(window.innerWidth / this.phaserScaleManager.width, window.innerHeight / this.phaserScaleManager.height);\n    }\n    overridePhaserTransformMethods() {\n        this.game.scale.transformX = (pageX) => {\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\n        };\n        this.game.scale.transformY = (pageY) => {\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\n        };\n    }\n    onResize() {\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\n    }\n}\nFitScaleManager.RESIZE_DELAY = 500;\nvar sh;\n(function (sh) {\n    var core;\n    (function (core) {\n        class Gameplay {\n            constructor() {\n                this.totalLettersCount = 25;\n                this.totalRoundsNum = 2;\n                this.failsNumToLose = 3;\n                this.choicesNumPerRound = 5;\n                this.currentRound = 0;\n                this.currentLetter = null;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n            setupCallbacks(onComplete, onLose) {\n                this.onComplete = onComplete;\n                this.onLose = onLose;\n            }\n            calculateScore() {\n                return this.choicesNumPerRound * this.totalRoundsNum - this.wrongAnswersCount;\n            }\n            onLetterChosen() {\n                if (this.correctAnswersCountThisRound == this.choicesNumPerRound) {\n                    this.currentRound++;\n                    if (this.currentRound >= this.totalRoundsNum) {\n                        let score = this.calculateScore();\n                        this.onComplete(score, score);\n                        return true;\n                    }\n                    else {\n                        this.nextLetter();\n                    }\n                }\n                return false;\n            }\n            nextLetter() {\n                if (this.roundsLetter.length == 0) {\n                    this.currentLetter = null;\n                }\n                else {\n                    let ind = Math.floor(Math.random() * this.roundsLetter.length);\n                    this.currentLetter = this.roundsLetter[ind];\n                    this.roundsLetter.splice(ind, 1);\n                    this.gridLettersNames = [];\n                    let correctLetterName = this.getCorrectLetterName();\n                    for (let i = 0; i < this.choicesNumPerRound; i++) {\n                        this.gridLettersNames.push(correctLetterName);\n                    }\n                    let rwl = this.roundsWrongLetters[ind];\n                    this.roundsWrongLetters.splice(ind, 1);\n                    for (let wl of rwl) {\n                        for (let i = 0; i < 2; i++) {\n                            this.gridLettersNames.push(wl);\n                        }\n                    }\n                }\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n            getCorrectLetterName() {\n                return this.currentLetter['correctLetterName'];\n            }\n            getCorrectAudioKey() {\n                return this.currentLetter['correctAudioKey'];\n            }\n            onCorrectAnswer() {\n                this.correctAnswersCount++;\n                this.correctAnswersCountThisRound++;\n                return this.onLetterChosen();\n            }\n            onWrongAnswer() {\n                this.wrongAnswersCount++;\n                this.wrongAnswersCountThisRound++;\n                if (this.wrongAnswersCountThisRound >= this.failsNumToLose) {\n                    this.onLose(0, 0);\n                    return true;\n                }\n                else {\n                    this.onLetterChosen();\n                }\n                return false;\n            }\n            getCurrentTotalAnswersCount() {\n                return this.correctAnswersCount + this.wrongAnswersCount;\n            }\n            getCurrentTotalAnswersCountThisRound() {\n                return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\n            }\n            isNewRound() {\n                return this.getCurrentTotalAnswersCountThisRound() == 0;\n            }\n            isRoundsComplete() {\n                return this.getCurrentTotalAnswersCount() / this.choicesNumPerRound >= this.totalRoundsNum;\n            }\n            reset() {\n                let json = game.cache.json.get('gameplay');\n                this.letters = json[\"letters\"].slice();\n                let rounds = json[\"rounds\"];\n                this.roundsLetter = [];\n                this.roundsWrongLetters = [];\n                for (let r of rounds) {\n                    let l = r[\"correctLetter\"];\n                    for (let i = this.letters.length - 1; i >= 0; i--) {\n                        if (this.letters[i]['correctLetterName'] == l) {\n                            this.roundsLetter.push(this.letters[i]);\n                            break;\n                        }\n                    }\n                    this.roundsWrongLetters.push(r[\"wrongLetters\"]);\n                }\n                this.totalRoundsNum = this.roundsLetter.length;\n                this.nextLetter();\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n        }\n        core.Gameplay = Gameplay;\n    })(core = sh.core || (sh.core = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var scene;\n    (function (scene) {\n        class Boot extends Phaser.Scene {\n            init() {\n                // new FitScaleManager(this.game).setup();\n            }\n            create() {\n                game.scene.remove('Boot');\n                game.scene.add('Preloader', sh.scene.Preloader, true);\n            }\n        }\n        scene.Boot = Boot;\n    })(scene = sh.scene || (sh.scene = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var scene;\n    (function (scene) {\n        var Gameplay = sh.core.Gameplay;\n        class MainScene extends Phaser.Scene {\n            create() {\n                this.gameplay = new Gameplay();\n                this.gameplayScreen = new sh.screen.GameplayScreen(this, this.gameplay);\n                this.children.add(this.gameplayScreen);\n                this.gameplayScreen.showInstructionPage();\n            }\n        }\n        scene.MainScene = MainScene;\n    })(scene = sh.scene || (sh.scene = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var scene;\n    (function (scene) {\n        class Preloader extends Phaser.Scene {\n            preload() {\n            }\n            create() {\n                this.load.json('gameplay', 'assets/json/gameplay.json');\n                this.load.pack('preloader', 'assets/pack.json');\n                this.load.on('progress', (value) => {\n                }, this);\n                this.load.on('complete', () => {\n                    this.nextScene();\n                });\n                this.load.start();\n            }\n            nextScene() {\n                game.scene.remove('Preloader');\n                game.scene.add('ScreenMain', sh.scene.MainScene, true);\n            }\n        }\n        scene.Preloader = Preloader;\n    })(scene = sh.scene || (sh.scene = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class AreYouSureWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onYes, onNo) {\n                super(scene);\n                this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0 - 48, 'Exit warning');\n                this._areYouSurePage.setOrigin(0, 0);\n                this._areYouSurePage.setInteractive();\n                this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485 - 50, 'btnYES1');\n                this._btnSureYes.setInteractive({ cursor: 'pointer' });\n                this._btnSureYes.once('pointerup', onYes);\n                setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\n                this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485 - 50, 'btnNO1');\n                this._btnSureNo.setInteractive({ cursor: 'pointer' });\n                this._btnSureNo.once('pointerup', onNo);\n                setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\n                this.add(this._areYouSurePage);\n                this.add(this._btnSureYes);\n                this.add(this._btnSureNo);\n            }\n        }\n        screen.AreYouSureWindow = AreYouSureWindow;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class CompleteWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay, onNext) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-104.5, -48);\n                this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\n                this._bgComplete.setOrigin(0, 0);\n                this._bgComplete.setInteractive();\n                this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\n                this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\n                let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\n                this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bgComplete,\n                    _CollectedPoints,\n                    this._cup,\n                    this._btnBack,\n                    this._btnReplay,\n                    this._btnNext,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n                this._btnNext.setInteractive({ cursor: 'pointer' });\n                this._btnNext.on('pointerup', () => {\n                    onNext(this._btnNext);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\n            }\n            show(score, starScore) {\n                this._cup.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._cup,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                // let music = this.scene.sound.add(\"viktory\");\n                this.music = this.scene.sound.add(\"Activity completion fantastic\");\n                this.music.play();\n            }\n        }\n        screen.CompleteWindow = CompleteWindow;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class DoorsWindow extends Phaser.GameObjects.Container {\n            constructor(scene) {\n                super(scene);\n                this._DoorR = new Phaser.GameObjects.Image(this.scene, 504.5, 158, 'Door R');\n                this._DoorR.setOrigin(0, 0);\n                this._DoorL = new Phaser.GameObjects.Image(this.scene, 313.5, 158, 'Door L');\n                this._DoorL.setOrigin(0, 0);\n                this._DoorInside = new Phaser.GameObjects.Image(this.scene, 313, 158, 'Door Inside');\n                this._DoorInside.setOrigin(0, 0);\n                this.add(this._DoorInside);\n                this.add(this._DoorR);\n                this.add(this._DoorL);\n            }\n            openDoor(door, duration, def_vertices_no_offset, vertXIndexes, vertYIndexes, vertYSign, tweenDoorValueY) {\n                door.visible = false;\n                let dx = 100, dy = 198;\n                let def_vertices = def_vertices_no_offset.slice();\n                for (let i = 0; i < def_vertices_no_offset.length; i += 2) {\n                    def_vertices[i] += dx;\n                }\n                for (let i = 1; i < def_vertices_no_offset.length; i += 2) {\n                    def_vertices[i] += dy;\n                }\n                let mesh = this.scene.make.mesh({\n                    key: door.texture.key,\n                    x: door.x,\n                    y: door.y,\n                    vertices: def_vertices.slice(),\n                    uv: [\n                        /*  U   |   V  */\n                        /* ----------- */\n                        0, 0,\n                        0, 1,\n                        1, 1,\n                        0, 0,\n                        1, 1,\n                        1, 0\n                    ]\n                });\n                mesh[\"def_vertices\"] = def_vertices;\n                door[\"tweenDoorValueX\"] = mesh[\"def_vertices\"][vertXIndexes[0]];\n                door[\"tweenDoorValueY\"] = 0;\n                this.scene.tweens.add({\n                    targets: door,\n                    tweenDoorValueX: -def_vertices_no_offset[vertXIndexes[0]] * 0.6 + dx,\n                    tweenDoorValueY: tweenDoorValueY,\n                    duration: duration,\n                    ease: Phaser.Math.Easing.Linear,\n                    onUpdate: () => {\n                        for (let k = 0; k < vertYIndexes.length; k++) {\n                            mesh.vertices[vertYIndexes[k]] = mesh[\"def_vertices\"][vertYIndexes[k]] + vertYSign[k] * door[\"tweenDoorValueY\"];\n                        }\n                        for (let i of vertXIndexes) {\n                            mesh.vertices[i] = door[\"tweenDoorValueX\"];\n                        }\n                    }\n                });\n                this.add(mesh);\n                this.scene.sound.add('Door opening').play();\n            }\n            open(onComplete) {\n                let duration = 2000;\n                let tweenDoorValueY = 50;\n                this.openDoor(this._DoorR, duration, [\n                    /*  X   |   Y  */\n                    /* ----------- */\n                    -this._DoorR.width / 2, -this._DoorR.height / 2,\n                    -this._DoorR.width / 2, this._DoorR.height / 2,\n                    this._DoorR.width / 2, this._DoorR.height / 2,\n                    -this._DoorR.width / 2, -this._DoorR.height / 2,\n                    this._DoorR.width / 2, this._DoorR.height / 2,\n                    this._DoorR.width / 2, -this._DoorR.height / 2\n                ], [0, 2, 6], [1, 3, 7], [-1, 1, -1], tweenDoorValueY);\n                this.openDoor(this._DoorL, duration, [\n                    /*  X   |   Y  */\n                    /* ----------- */\n                    -this._DoorL.width / 2, -this._DoorL.height / 2,\n                    -this._DoorL.width / 2, this._DoorL.height / 2,\n                    this._DoorL.width / 2, this._DoorL.height / 2,\n                    -this._DoorL.width / 2, -this._DoorL.height / 2,\n                    this._DoorL.width / 2, this._DoorL.height / 2,\n                    this._DoorL.width / 2, -this._DoorL.height / 2\n                ], [4, 8, 10], [5, 9, 11], [-1, -1, 1], -tweenDoorValueY);\n                delayedCall(duration, onComplete);\n            }\n        }\n        screen.DoorsWindow = DoorsWindow;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class GameplayScreen extends Phaser.GameObjects.Container {\n            constructor(scene, gameplay) {\n                super(scene);\n                this.rows = 5;\n                this.cols = 5;\n                this.bgMusic = null;\n                this.sfxOpen = null;\n                this.sfxClose = null;\n                this.soundGooseYes = null;\n                this.soundGooseNo = null;\n                this.correctAudio = null;\n                this.wfsnd = null;\n                this.sfxCallToPrayer = null;\n                this.showCompleteWindow = (score, starScore) => {\n                    let completeWindow = new screen.CompleteWindow(this.scene, (target) => {\n                        this.playBtnClickAnim(target);\n                    }, (target) => {\n                        this.playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(completeWindow);\n                        this.showInstructionPage();\n                    }, (target) => {\n                        this.playBtnClickAnim(target);\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(1500, () => {\n                        this.bgMusic.stop();\n                        this.doorsWindow.open(() => {\n                            this.sfxCallToPrayer = this.scene.sound.add(\"Call to prayer\");\n                            this.sfxCallToPrayer.play();\n                            delayedCall(6000, () => {\n                                setPageBackground(\"bg-blue\");\n                                this.add(completeWindow);\n                                completeWindow.show(score, starScore);\n                            });\n                        });\n                    });\n                };\n                this.showLoseWindow = (score, starScore) => {\n                    let tryAgainWindow = new screen.TryAgainWindow(this.scene, (target) => {\n                        this.playBtnClickAnim(target);\n                    }, (target) => {\n                        this.playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(tryAgainWindow);\n                        this.showInstructionPage();\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(750, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(tryAgainWindow);\n                        tryAgainWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.gameplay = gameplay;\n                window[\"t\"] = this;\n            }\n            showGameplay() {\n                setPageBackground(\"bg-australia\");\n                this.bgMusic = this.scene.sound.add(\"B-g ambience\");\n                this.bgMusic.play();\n                this.bgMusic.loop = true;\n                this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, '3 Letter Grid');\n                this._gameStage.setOrigin(0.485, 0.48);\n                this._gameStage.setInteractive();\n                this._btnSound = new Phaser.GameObjects.Image(this.scene, 160 - 105, 100 - 50, 'Sound');\n                this._btnSound.setInteractive({ cursor: 'pointer' });\n                setupButtonTextureBased(this._btnSound, 'Sound', 'Sound HOVER EFFECT');\n                this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025 - 105, 100 - 50, 'x Button');\n                this._btnClose.setInteractive({ cursor: 'pointer' });\n                setupButtonTextureBased(this._btnClose, 'x Button', 'x Button HOVER EFFECT');\n                this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\n                this.addAt(this.gameplayContainer, 0);\n                this.targetLetterLabel = new Phaser.GameObjects.Image(this.scene, 590, 90, null);\n                this.targetLetterLabel.tint = Math.round(0x000000 * 0.9);\n                this.doorsWindow = new screen.DoorsWindow(this.scene);\n                this.gameplayContainer.add([\n                    this._gameStage,\n                    this.doorsWindow,\n                    this._btnSound,\n                    this._btnClose,\n                    this.targetLetterLabel\n                ]);\n                this.gameplay.reset();\n                this.createGrid();\n                this.createCrescentMoons();\n                this.createInput();\n                this.showOutGrid();\n                this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow);\n            }\n            showOutGrid() {\n                this.setInputEnabled(false);\n                let delay = 700;\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = this.grid[i][j];\n                        c.setScale(0);\n                        this.scene.tweens.add({\n                            targets: c,\n                            \"scale\": 1,\n                            duration: 300,\n                            delay: delay\n                        });\n                    }\n                }\n                delayedCall(delay, () => {\n                    this.sfxOpen = this.scene.sound.add(\"open\");\n                    this.sfxOpen.play();\n                });\n                this.targetLetterLabel.visible = false;\n                this.resetCrescentMoons();\n                this.randomizeGrid();\n                delayedCall(1200, () => {\n                    this.targetLetterLabel.visible = true;\n                    this.updateClickLetterTargetLabel();\n                    if (this.gameplay.isNewRound()) {\n                        if (!this.gameplay.isRoundsComplete()) {\n                            this.playCorrectAudio();\n                            delayedCall(2000, () => {\n                                this.setInputEnabled(true);\n                            });\n                        }\n                    }\n                    else {\n                        this.setInputEnabled(true);\n                    }\n                });\n            }\n            showInGrid(showOut) {\n                this.setInputEnabled(false);\n                let delay = 700;\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = this.grid[i][j];\n                        this.scene.tweens.add({\n                            targets: c,\n                            \"scale\": 0,\n                            duration: 300,\n                            delay: delay,\n                            onComplete: () => {\n                                c[\"bg\"].setTexture('rr_def');\n                            }\n                        });\n                    }\n                }\n                delayedCall(delay, () => {\n                    this.sfxClose = this.scene.sound.add(\"close\");\n                    this.sfxClose.play();\n                });\n                if (showOut) {\n                    delayedCall(1000, () => {\n                        this.showOutGrid();\n                    });\n                }\n            }\n            createInput() {\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = this.grid[i][j];\n                        c[\"bg\"].on('pointerup', () => {\n                            this.playBtnClickAnim(c);\n                            c[\"bg\"].disableInteractive();\n                            let l = c[\"letter\"];\n                            if (l && l.texture.key == this.gameplay.getCorrectLetterName()) {\n                                c[\"bg\"].setTexture('rr_active');\n                                let completed = this.onCorrectAnswer();\n                                if (!completed) {\n                                    if (this.gameplay.isNewRound()) {\n                                        this.showInGrid(true);\n                                    }\n                                }\n                                else {\n                                    this.showInGrid(false);\n                                }\n                            }\n                            else {\n                                c[\"bg\"].setTexture('rr_wrong');\n                                let lost = this.onWrongAnswer();\n                                if (!lost) {\n                                    if (this.gameplay.isNewRound()) {\n                                        this.showInGrid(true);\n                                    }\n                                }\n                                else {\n                                    this.showInGrid(false);\n                                }\n                            }\n                        });\n                    }\n                }\n                this._btnSound.on('pointerup', () => {\n                    this.playBtnClickAnim(this._btnSound);\n                    this.onSoundClick();\n                });\n                this._btnClose.on('pointerup', () => {\n                    this.playBtnClickAnim(this._btnClose);\n                    this.onCloseClick();\n                });\n            }\n            createGrid() {\n                let startX = 355;\n                let startY = 215;\n                let dx = 76;\n                let dy = 71;\n                this.grid = [];\n                for (let i = 0; i < this.rows; i++) {\n                    let arr = [];\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = new Phaser.GameObjects.Container(this.scene, startX + i * dx, startY + j * dy);\n                        this.gameplayContainer.add(c);\n                        c[\"bg\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, 'rr_def');\n                        c.add(c[\"bg\"]);\n                        c[\"letter\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, null);\n                        c[\"letter\"][\"rectContainer\"] = c;\n                        c.add(c[\"letter\"]);\n                        c[\"letter\"].tint = Math.round(0x000000 * 0.9);\n                        arr.push(c);\n                    }\n                    this.grid.push(arr);\n                }\n            }\n            randomizeGrid() {\n                let gridLettersNames = null;\n                let minTriesGrid = null;\n                let minTries = Number.MAX_VALUE;\n                let triesNum = 0;\n                let sim = Number.MAX_VALUE;\n                do {\n                    triesNum++;\n                    gridLettersNames = Phaser.Utils.Array.Shuffle(this.gameplay.gridLettersNames.slice());\n                    sim = this.checkRandomizationSimilarity(gridLettersNames);\n                    if (sim < minTries) {\n                        minTries = sim;\n                        minTriesGrid = gridLettersNames;\n                    }\n                } while (sim > 0 && triesNum < 100);\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let l = this.grid[i][j][\"letter\"];\n                        let rnd = minTriesGrid.shift();\n                        l.setTexture(rnd);\n                    }\n                }\n            }\n            checkRandomizationSimilarity(gridLettersNames) {\n                let similarity = 0;\n                for (let i = 0; i < gridLettersNames.length - 1; i++) {\n                    if (gridLettersNames[i] == gridLettersNames[i + 1]) {\n                        similarity++;\n                    }\n                }\n                for (let i = 0; i < gridLettersNames.length - this.rows; i++) {\n                    if (i + this.rows < gridLettersNames.length && gridLettersNames[i] == gridLettersNames[i + this.rows]) {\n                        similarity++;\n                    }\n                }\n                // console.log(\"sim: \",similarity);\n                return similarity;\n            }\n            updateClickLetterTargetLabel() {\n                this.targetLetterLabel.setTexture(this.gameplay.getCorrectLetterName());\n            }\n            createCrescentMoons() {\n                this.crescentMoons = [];\n                let dy = 61;\n                for (let i = 0; i < this.gameplay.choicesNumPerRound; i++) {\n                    let cm = new Phaser.GameObjects.Image(this.scene, 179, 261 + i * dy, 'crescent_moon_def');\n                    this.crescentMoons.push(cm);\n                    this.gameplayContainer.add(cm);\n                }\n            }\n            resetCrescentMoons() {\n                for (let i = 0; i < this.crescentMoons.length; i++) {\n                    this.setMoonsActive(i, false);\n                }\n            }\n            setMoonsActive(index, active) {\n                this.crescentMoons[index].setTexture(active ? 'crescent_moon_active' : 'crescent_moon_def');\n            }\n            onCorrectAnswer() {\n                this.setMoonsActive(this.gameplay.correctAnswersCountThisRound, true);\n                let completed = this.gameplay.onCorrectAnswer();\n                this.soundGooseYes = this.scene.sound.add(\"Correct click\");\n                this.soundGooseYes.play();\n                return completed;\n            }\n            onWrongAnswer() {\n                let lost = this.gameplay.onWrongAnswer();\n                this.soundGooseNo = this.scene.sound.add(\"Incorrect click\");\n                this.soundGooseNo.play();\n                return lost;\n            }\n            playCorrectAudio() {\n                if (this.correctAudio) {\n                    this.correctAudio.stop();\n                }\n                try {\n                    this.correctAudio = this.scene.sound.add('translate_click_on');\n                    this.correctAudio.play();\n                    if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\n                        this.correctAudio.pause();\n                    }\n                    delayedCall(750, () => {\n                        this.correctAudio = this.scene.sound.add(this.gameplay.getCorrectAudioKey());\n                        this.correctAudio.play();\n                        if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\n                            this.correctAudio.pause();\n                        }\n                    });\n                }\n                catch (e) {\n                    console.log(e);\n                }\n            }\n            onSoundClick() {\n                this.playCorrectAudio();\n            }\n            onCloseClick() {\n                this.showAreYouSurePage();\n                this.scene.sound.add('warning page pop up sfx').play();\n            }\n            playBtnClickAnim(target) {\n                target.scaleX = target.scaleY = 1;\n                this.scene.tweens.add({\n                    targets: target,\n                    \"scaleX\": 0.9,\n                    \"scaleY\": 0.9,\n                    duration: 100,\n                    yoyo: true\n                });\n            }\n            showInstructionPage() {\n                setPageBackground(\"bg-blue\");\n                let playInstructionSound = () => {\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                    this.wfsnd = this.scene.sound.add(\"Unlock the Gate Open the mosque gate by entering the passcode.\");\n                    this.wfsnd.play();\n                };\n                this.instructionPage = new screen.InstructionPage(this.scene, (target) => {\n                    this.playBtnClickAnim(target);\n                    this.remove(this.instructionPage);\n                    this.showGameplay();\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                }, (target) => {\n                    this.playBtnClickAnim(target);\n                    playInstructionSound();\n                });\n                this.add(this.instructionPage);\n                playInstructionSound();\n            }\n            showAreYouSurePage() {\n                pauseAllDelayedCalls();\n                setPageBackground(\"bg-blue\");\n                this.pauseSounds();\n                this.areYouSureWindow = new screen.AreYouSureWindow(this.scene, () => {\n                    this.remove(this.areYouSureWindow);\n                    this.destroyGameplay();\n                    this.showInstructionPage();\n                }, () => {\n                    this.remove(this.areYouSureWindow);\n                    this.unpauseSounds();\n                    resumeAllDelayedCalls();\n                    setPageBackground(\"bg-australia\");\n                });\n                this.add(this.areYouSureWindow);\n            }\n            setInputEnabled(enabled) {\n                if (enabled) {\n                    for (let i = 0; i < this.rows; i++) {\n                        for (let j = 0; j < this.cols; j++) {\n                            this.grid[i][j][\"bg\"].setInteractive({ cursor: 'pointer' });\n                        }\n                    }\n                }\n                else {\n                    for (let i = 0; i < this.rows; i++) {\n                        for (let j = 0; j < this.cols; j++) {\n                            this.grid[i][j][\"bg\"].disableInteractive();\n                        }\n                    }\n                }\n            }\n            pauseSounds() {\n                this.scene.sound.pauseAll();\n            }\n            unpauseSounds() {\n                this.scene.sound.resumeAll();\n            }\n            destroyGameplay() {\n                this.setInputEnabled(false);\n                this.remove(this.gameplayContainer);\n                destroyAllDelayedCalls();\n            }\n        }\n        screen.GameplayScreen = GameplayScreen;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class InstructionPage extends Phaser.GameObjects.Container {\n            constructor(scene, onPlayClick, onSndClick) {\n                super(scene);\n                this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0 - 105, 0 - 48, 'Instructions page  ALL ACTIVITY  TITLEs');\n                this._instructionPage.setOrigin(0, 0);\n                this._instructionPage.setInteractive();\n                this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'welcome');\n                this._instructionPageTitle.setScale(0.75);\n                this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\n                this._btnPlay.setInteractive({ cursor: 'pointer' });\n                this._btnPlay.once('pointerup', onPlayClick);\n                setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\n                this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Open the mosque gate by entering\\nthe passcode.\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 30,\n                    \"color\": \"#43425D\",\n                    \"align\": 'center'\n                });\n                this.instrTxt.setLineSpacing(20);\n                this.instrTxt.setOrigin(0.5, 0.5);\n                this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\n                this._btnSoundInstruction.setInteractive({ cursor: 'pointer' });\n                this._btnSoundInstruction.on('pointerup', onSndClick);\n                setupButtonTextureBased(this._btnSoundInstruction, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._instructionPage);\n                this.add(this._instructionPageTitle);\n                this.add(this.instrTxt);\n                this.add(this._btnPlay);\n                this.add(this._btnSoundInstruction);\n            }\n        }\n        screen.InstructionPage = InstructionPage;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class TryAgainWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-106, -48);\n                this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\n                this._bg.setOrigin(0, 0);\n                this._bg.setInteractive();\n                this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\n                this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bg,\n                    this._star,\n                    this._btnBack,\n                    this._btnReplay,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n            }\n            show(score, starScore) {\n                this._star.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._star,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                this.music = this.scene.sound.add(\"Fail - close one\");\n                this.music.play();\n            }\n        }\n        screen.TryAgainWindow = TryAgainWindow;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\n","namespace sh {\r\n    export class App extends Phaser.Game {\r\n\r\n        public static readonly CANVAS_WIDTH: number = 980;\r\n        public static readonly CANVAS_HEIGHT: number = 600;\r\n\r\n        constructor() {\r\n            let config: Phaser.Types.Core.GameConfig = {\r\n                type: Phaser.WEBGL,\r\n                width: App.CANVAS_WIDTH,\r\n                height: App.CANVAS_HEIGHT,\r\n                parent: 'game-container',\r\n                dom: {\r\n                    createContainer: false\r\n                },\r\n                scale: {\r\n                    mode: FitScaleManager.detectBestScaleMode(),\r\n                    autoCenter: Phaser.Scale.CENTER_BOTH\r\n                },\r\n                transparent: true,\r\n                scene: {\r\n                    create: () => {\r\n                        this.scene.add('Boot', sh.scene.Boot, true);\r\n                    }\r\n                }\r\n            };\r\n            super(config);\r\n        }\r\n    }\r\n}\r\n\r\nlet game: sh.App;\r\nwindow.onload = () => {\r\n    game = new sh.App();\r\n};\r\n\r\nlet delayedCalls = [];\r\nfunction delayedCall(delay: number, callback: Function, args?: any[], callbackScope?: any): Phaser.Time.TimerEvent | number {\r\n    let scene = game.scene.getAt(0);\r\n    if (scene) {\r\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\r\n        delayedCalls.push(dc);\r\n        return dc;\r\n    }\r\n    let t = setTimeout(callback, delay);\r\n    delayedCalls.push(t);\r\n    return t;\r\n}\r\nfunction pauseAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = true;\r\n        }\r\n    }\r\n}\r\nfunction resumeAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = false;\r\n        }\r\n    }\r\n}\r\nfunction destroyAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).remove(false);\r\n        } else {\r\n            clearTimeout(dc);\r\n        }\r\n    }\r\n    delayedCalls = [];\r\n}\r\n\r\nfunction setPageBackground(bg: string) {\r\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\r\n}\r\n\r\nfunction setupButton(btn, frame) {\r\n    btn.on('pointerdown', ()=>{btn.setFrame(frame + '_hover' + '0000')});\r\n    btn.on('pointerover', ()=>{btn.setFrame(frame + '_hover' + '0000');game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setFrame(frame + '0000')});\r\n    btn.on('pointerup', ()=>{btn.setFrame(frame + '0000');game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\nfunction setupButtonTextureBased(btn:Phaser.GameObjects.Image, texture, hoverTexture) {\r\n    btn.on('pointerdown', ()=>{btn.setTexture(hoverTexture)});\r\n    btn.on('pointerover', ()=>{btn.setTexture(hoverTexture);game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setTexture(texture)});\r\n    btn.on('pointerup', ()=>{btn.setTexture(texture);game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}","/**\r\n * @author Roman Parada\r\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\r\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\r\n *\r\n * How to use:\r\n * Just call the code line below in Boot scene's init() method of your project:\r\n * new FitScaleManager(this.game).setup();\r\n */\r\nclass FitScaleManager {\r\n\r\n    public static detectBestScaleMode():integer {\r\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\r\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\r\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\r\n    };\r\n\r\n    private static RESIZE_DELAY: number = 500;\r\n\r\n    private game: Phaser.Game;\r\n\r\n    private canvasStyle: CSSStyleDeclaration;\r\n    private phaserScaleManager: Phaser.Scale.ScaleManager;\r\n\r\n    constructor(game: Phaser.Game) {\r\n        this.game = game;\r\n\r\n        this.canvasStyle = this.game.canvas.style;\r\n        this.phaserScaleManager = this.game.scale;\r\n    }\r\n\r\n    /**\r\n     * Just call this method once in Boot scene's init() method\r\n     */\r\n    public setup(): void {\r\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\r\n\r\n        this.overridePhaserTransformMethods();\r\n\r\n        this.onResize();\r\n    }\r\n\r\n    private calculateScale(): number {\r\n        if (game.scale.scaleMode == Phaser.Scale.NONE) return 1;\r\n\r\n        return Math.min(\r\n            window.innerWidth / this.phaserScaleManager.width,\r\n            window.innerHeight / this.phaserScaleManager.height\r\n        );\r\n    }\r\n\r\n    private overridePhaserTransformMethods(): void {\r\n        this.game.scale.transformX = (pageX: number) => {\r\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n        this.game.scale.transformY = (pageY: number) => {\r\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n    }\r\n\r\n    private onResize(): void {\r\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\r\n    }\r\n\r\n    private doResize: () => void = () => {\r\n        let scale: number = this.calculateScale();\r\n\r\n        let newCanvasWidth: number = this.phaserScaleManager.width * scale;\r\n        let newCanvasHeight: number = this.phaserScaleManager.height * scale;\r\n\r\n        this.canvasStyle.width = newCanvasWidth + 'px';\r\n        this.canvasStyle.height = newCanvasHeight + 'px';\r\n\r\n        this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\r\n        this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\r\n    };\r\n}","namespace sh.core {\r\n    export class Gameplay {\r\n\r\n        private totalLettersCount:number = 25;\r\n\r\n        public totalRoundsNum:number = 2;\r\n        public readonly failsNumToLose:number = 3;\r\n        public readonly choicesNumPerRound:number = 5;\r\n\r\n        private currentRound:number = 0;\r\n        private currentLetter:object = null;\r\n        private letters:object[];\r\n\r\n        private correctAnswersCount: number = 0;\r\n        private wrongAnswersCount: number = 0;\r\n        public correctAnswersCountThisRound: number = 0;\r\n        public wrongAnswersCountThisRound: number = 0;\r\n\r\n        private roundsLetter:object[];\r\n        private roundsWrongLetters:object[][];\r\n\r\n        public gridLettersNames:string[];\r\n\r\n        private onComplete:(score:number, starScore:number)=>void;\r\n        private onLose:(score:number, starScore:number)=>void;\r\n\r\n        constructor() {\r\n        }\r\n\r\n        public setupCallbacks(onComplete:(score:number, starScore:number)=>void, onLose:(score:number, starScore:number)=>void):void {\r\n            this.onComplete = onComplete;\r\n            this.onLose = onLose;\r\n        }\r\n\r\n        public calculateScore():number {\r\n            return this.choicesNumPerRound * this.totalRoundsNum - this.wrongAnswersCount;\r\n        }\r\n\r\n        public onLetterChosen():boolean {\r\n            if (this.correctAnswersCountThisRound == this.choicesNumPerRound) {\r\n                this.currentRound++;\r\n                if (this.currentRound >= this.totalRoundsNum) {\r\n                    let score:number = this.calculateScore();\r\n                    this.onComplete(score, score);\r\n                    return true;\r\n                } else {\r\n                    this.nextLetter();\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public nextLetter():void {\r\n            if (this.roundsLetter.length == 0) {\r\n                this.currentLetter = null;\r\n            } else {\r\n                let ind:number = Math.floor(Math.random()*this.roundsLetter.length);\r\n                this.currentLetter = this.roundsLetter[ind];\r\n                this.roundsLetter.splice(ind, 1);\r\n\r\n                this.gridLettersNames = [];\r\n\r\n                let correctLetterName = this.getCorrectLetterName();\r\n                for (let i:number = 0; i < this.choicesNumPerRound; i++) {\r\n                    this.gridLettersNames.push(correctLetterName);\r\n                }\r\n\r\n                let rwl:any = this.roundsWrongLetters[ind];\r\n                this.roundsWrongLetters.splice(ind, 1);\r\n                for (let wl of rwl) {\r\n                    for (let i:number = 0; i < 2; i++) {\r\n                        this.gridLettersNames.push(wl);\r\n                    }\r\n                }\r\n            }\r\n            this.correctAnswersCountThisRound = 0;\r\n            this.wrongAnswersCountThisRound = 0;\r\n        }\r\n\r\n        public getCorrectLetterName():string {\r\n            return this.currentLetter['correctLetterName'];\r\n        }\r\n\r\n        public getCorrectAudioKey():string {\r\n            return this.currentLetter['correctAudioKey'];\r\n        }\r\n\r\n        public onCorrectAnswer(): boolean {\r\n            this.correctAnswersCount++;\r\n            this.correctAnswersCountThisRound++;\r\n\r\n            return this.onLetterChosen();\r\n        }\r\n\r\n        public onWrongAnswer(): boolean {\r\n            this.wrongAnswersCount++;\r\n            this.wrongAnswersCountThisRound++;\r\n\r\n            if (this.wrongAnswersCountThisRound >= this.failsNumToLose) {\r\n                this.onLose(0, 0);\r\n                return true;\r\n            } else {\r\n                this.onLetterChosen();\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCount(): number {\r\n            return this.correctAnswersCount + this.wrongAnswersCount;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCountThisRound(): number {\r\n            return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\r\n        }\r\n\r\n        public isNewRound():boolean {\r\n            return this.getCurrentTotalAnswersCountThisRound() == 0;\r\n        }\r\n\r\n        public isRoundsComplete():boolean {\r\n            return this.getCurrentTotalAnswersCount() / this.choicesNumPerRound >= this.totalRoundsNum;\r\n        }\r\n\r\n        public reset():void {\r\n            let json = game.cache.json.get('gameplay');\r\n            this.letters = json[\"letters\"].slice();\r\n            let rounds = json[\"rounds\"];\r\n\r\n            this.roundsLetter = [];\r\n            this.roundsWrongLetters = [];\r\n\r\n            for (let r of rounds) {\r\n                let l:string = r[\"correctLetter\"];\r\n                for (let i:number = this.letters.length - 1; i >= 0; i--) {\r\n                    if (this.letters[i]['correctLetterName'] == l) {\r\n                        this.roundsLetter.push(this.letters[i]);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                this.roundsWrongLetters.push(r[\"wrongLetters\"]);\r\n            }\r\n\r\n            this.totalRoundsNum = this.roundsLetter.length;\r\n\r\n            this.nextLetter();\r\n\r\n            this.currentRound = 0;\r\n            this.correctAnswersCount = 0;\r\n            this.wrongAnswersCount = 0;\r\n            this.correctAnswersCountThisRound = 0;\r\n            this.wrongAnswersCountThisRound = 0;\r\n        }\r\n    }\r\n}","module sh.scene {\r\n    export class Boot extends Phaser.Scene {\r\n        init() {\r\n            // new FitScaleManager(this.game).setup();\r\n        }\r\n\r\n        create() {\r\n            game.scene.remove('Boot');\r\n            game.scene.add('Preloader', sh.scene.Preloader, true);\r\n        }\r\n    }\r\n}","namespace sh.scene {\r\n\r\n    import Gameplay = sh.core.Gameplay;\r\n    import GameplayScreen = sh.screen.GameplayScreen;\r\n\r\n    export class MainScene extends Phaser.Scene {\r\n\r\n        private gameplay:Gameplay;\r\n        private gameplayScreen:GameplayScreen;\r\n\r\n        public create():void {\r\n            this.gameplay = new Gameplay();\r\n\r\n            this.gameplayScreen = new sh.screen.GameplayScreen(this, this.gameplay);\r\n            this.children.add(this.gameplayScreen);\r\n            this.gameplayScreen.showInstructionPage();\r\n        }\r\n    }\r\n}","module sh.scene {\r\n\r\n    export class Preloader extends Phaser.Scene {\r\n\r\n        preload() {\r\n        }\r\n\r\n        create() {\r\n            this.load.json('gameplay', 'assets/json/gameplay.json');\r\n            this.load.pack('preloader', 'assets/pack.json');\r\n\r\n            this.load.on('progress', (value:number) => {\r\n            }, this);\r\n\r\n            this.load.on('complete', () => {\r\n                this.nextScene();\r\n            });\r\n\r\n            this.load.start();\r\n        }\r\n\r\n        private nextScene():void {\r\n            game.scene.remove('Preloader');\r\n            game.scene.add('ScreenMain', sh.scene.MainScene, true);\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class AreYouSureWindow extends Phaser.GameObjects.Container {\r\n\r\n        private _areYouSurePage: Phaser.GameObjects.Image;\r\n        private _btnSureYes: Phaser.GameObjects.Image;\r\n        private _btnSureNo: Phaser.GameObjects.Image;\r\n\r\n        constructor(scene: Phaser.Scene, onYes:()=>void, onNo:()=>void) {\r\n            super(scene);\r\n\r\n            this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0-48, 'Exit warning');\r\n            this._areYouSurePage.setOrigin(0, 0);\r\n            this._areYouSurePage.setInteractive();\r\n\r\n            this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485-50, 'btnYES1');\r\n            this._btnSureYes.setInteractive({cursor: 'pointer'});\r\n            this._btnSureYes.once('pointerup', onYes);\r\n            setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\r\n\r\n            this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485-50, 'btnNO1');\r\n            this._btnSureNo.setInteractive({cursor: 'pointer'});\r\n            this._btnSureNo.once('pointerup', onNo);\r\n            setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\r\n\r\n            this.add(this._areYouSurePage);\r\n            this.add(this._btnSureYes);\r\n            this.add(this._btnSureNo);\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class CompleteWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bgComplete:Phaser.GameObjects.Image;\r\n        _cup:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n        _btnNext:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void, onNext:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-104.5, -48);\r\n\r\n            this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\r\n            this._bgComplete.setOrigin(0, 0);\r\n            this._bgComplete.setInteractive();\r\n            this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\r\n            this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\r\n\r\n            let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bgComplete,\r\n                _CollectedPoints,\r\n                this._cup,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this._btnNext,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n            this._btnNext.setInteractive({cursor: 'pointer'});\r\n            this._btnNext.on('pointerup', ()=>{\r\n                onNext(this._btnNext);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._cup.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._cup,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            // let music = this.scene.sound.add(\"viktory\");\r\n            this.music = this.scene.sound.add(\"Activity completion fantastic\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class DoorsWindow extends Phaser.GameObjects.Container {\r\n\r\n        private _DoorR: Phaser.GameObjects.Image;\r\n        private _DoorL: Phaser.GameObjects.Image;\r\n        private _DoorInside: Phaser.GameObjects.Image;\r\n\r\n        constructor(scene: Phaser.Scene) {\r\n            super(scene);\r\n\r\n            this._DoorR = new Phaser.GameObjects.Image(this.scene, 504.5, 158, 'Door R');\r\n            this._DoorR.setOrigin(0, 0);\r\n            this._DoorL = new Phaser.GameObjects.Image(this.scene, 313.5, 158, 'Door L');\r\n            this._DoorL.setOrigin(0, 0);\r\n            this._DoorInside = new Phaser.GameObjects.Image(this.scene, 313, 158, 'Door Inside');\r\n            this._DoorInside.setOrigin(0, 0);\r\n\r\n            this.add(this._DoorInside);\r\n            this.add(this._DoorR);\r\n            this.add(this._DoorL);\r\n        }\r\n\r\n        private openDoor(door:Phaser.GameObjects.Image, duration:number, def_vertices_no_offset:number[], vertXIndexes:number[], vertYIndexes:number[], vertYSign:number[], tweenDoorValueY:number):void {\r\n            door.visible = false;\r\n\r\n            let dx:number = 100, dy:number = 198;\r\n            let def_vertices:number[] = def_vertices_no_offset.slice();\r\n            for (let i:number = 0; i < def_vertices_no_offset.length; i+=2) {\r\n                def_vertices[i] += dx;\r\n            }\r\n            for (let i:number = 1; i < def_vertices_no_offset.length; i+=2) {\r\n                def_vertices[i] += dy;\r\n            }\r\n            let mesh:Phaser.GameObjects.Mesh = this.scene.make.mesh({\r\n                key: door.texture.key,\r\n                x: door.x,\r\n                y: door.y,\r\n                vertices: def_vertices.slice(),\r\n                uv: [\r\n                    /*  U   |   V  */\r\n                    /* ----------- */\r\n                    0,      0,\r\n                    0,      1,\r\n                    1,      1,\r\n\r\n                    0,      0,\r\n                    1,      1,\r\n                    1,      0\r\n                ]\r\n            });\r\n            mesh[\"def_vertices\"] = def_vertices;\r\n            door[\"tweenDoorValueX\"] = mesh[\"def_vertices\"][vertXIndexes[0]];\r\n            door[\"tweenDoorValueY\"] = 0;\r\n            this.scene.tweens.add({\r\n                targets: door,\r\n                tweenDoorValueX: -def_vertices_no_offset[vertXIndexes[0]] * 0.6 + dx,\r\n                tweenDoorValueY: tweenDoorValueY,\r\n                duration: duration,\r\n                ease: Phaser.Math.Easing.Linear,\r\n                onUpdate:()=>{\r\n                    for (let k:number = 0; k < vertYIndexes.length; k++) {\r\n                        mesh.vertices[vertYIndexes[k]] = mesh[\"def_vertices\"][vertYIndexes[k]] + vertYSign[k] * door[\"tweenDoorValueY\"];\r\n                    }\r\n                    for (let i of vertXIndexes) {\r\n                        mesh.vertices[i] = door[\"tweenDoorValueX\"];\r\n                    }\r\n                }\r\n            });\r\n            this.add(mesh);\r\n\r\n            this.scene.sound.add('Door opening').play();\r\n        }\r\n\r\n        public open(onComplete:()=>void):void {\r\n            let duration:number = 2000;\r\n            let tweenDoorValueY:number = 50;\r\n            this.openDoor(this._DoorR, duration, [\r\n                /*  X   |   Y  */\r\n                /* ----------- */\r\n                -this._DoorR.width/2, -this._DoorR.height/2,\r\n                -this._DoorR.width/2, this._DoorR.height/2,\r\n                this._DoorR.width/2, this._DoorR.height/2,\r\n                -this._DoorR.width/2, -this._DoorR.height/2,\r\n                this._DoorR.width/2, this._DoorR.height/2,\r\n                this._DoorR.width/2, -this._DoorR.height/2\r\n            ], [0, 2, 6], [1, 3, 7], [-1, 1, -1], tweenDoorValueY);\r\n            this.openDoor(this._DoorL, duration, [\r\n                /*  X   |   Y  */\r\n                /* ----------- */\r\n                -this._DoorL.width/2, -this._DoorL.height/2,\r\n                -this._DoorL.width/2, this._DoorL.height/2,\r\n                this._DoorL.width/2, this._DoorL.height/2,\r\n                -this._DoorL.width/2, -this._DoorL.height/2,\r\n                this._DoorL.width/2, this._DoorL.height/2,\r\n                this._DoorL.width/2, -this._DoorL.height/2\r\n            ], [4, 8, 10], [5, 9, 11], [-1, -1, 1], -tweenDoorValueY);\r\n            delayedCall(duration, onComplete);\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n\r\n    import Gameplay = sh.core.Gameplay;\r\n\r\n    export class GameplayScreen extends Phaser.GameObjects.Container {\r\n        private rows:number = 5;\r\n        private cols:number = 5;\r\n\r\n        _gameStage: Phaser.GameObjects.Image;\r\n        _btnSound: Phaser.GameObjects.Image;\r\n        _btnClose: Phaser.GameObjects.Image;\r\n\r\n        private gameplayContainer: Phaser.GameObjects.Container;\r\n\r\n        grid: Phaser.GameObjects.Container[][];\r\n        crescentMoons:Phaser.GameObjects.Image[];\r\n\r\n        gameplay: Gameplay;\r\n        targetLetterLabel:Phaser.GameObjects.Image;\r\n\r\n        private bgMusic:any = null;\r\n\r\n        private doorsWindow:DoorsWindow;\r\n\r\n        constructor(scene: Phaser.Scene, gameplay: Gameplay) {\r\n            super(scene);\r\n            this.gameplay = gameplay;window[\"t\"]=this;\r\n        }\r\n\r\n        public showGameplay(): void {\r\n            setPageBackground(\"bg-australia\");\r\n\r\n            this.bgMusic = this.scene.sound.add(\"B-g ambience\");\r\n            this.bgMusic.play();\r\n            this.bgMusic.loop = true;\r\n\r\n            this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, '3 Letter Grid');\r\n            this._gameStage.setOrigin(0.485, 0.48);\r\n            this._gameStage.setInteractive();\r\n            this._btnSound = new Phaser.GameObjects.Image(this.scene, 160-105, 100-50, 'Sound');\r\n            this._btnSound.setInteractive({cursor: 'pointer'});\r\n            setupButtonTextureBased(this._btnSound, 'Sound','Sound HOVER EFFECT');\r\n            this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025-105, 100-50,'x Button');\r\n            this._btnClose.setInteractive({cursor: 'pointer'});\r\n            setupButtonTextureBased(this._btnClose, 'x Button','x Button HOVER EFFECT');\r\n\r\n            this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\r\n            this.addAt(this.gameplayContainer, 0);\r\n\r\n            this.targetLetterLabel = new Phaser.GameObjects.Image(this.scene, 590, 90, null);\r\n            this.targetLetterLabel.tint = Math.round(0x000000 * 0.9);\r\n\r\n            this.doorsWindow = new DoorsWindow(this.scene);\r\n\r\n            this.gameplayContainer.add([\r\n                this._gameStage,\r\n                this.doorsWindow,\r\n                this._btnSound,\r\n                this._btnClose,\r\n                this.targetLetterLabel\r\n            ]);\r\n\r\n            this.gameplay.reset();\r\n            this.createGrid();\r\n            this.createCrescentMoons();\r\n            this.createInput();\r\n            this.showOutGrid();\r\n            this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow);\r\n        }\r\n\r\n        private sfxOpen = null;\r\n        public showOutGrid():void {\r\n            this.setInputEnabled(false);\r\n\r\n            let delay:number = 700;\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c = this.grid[i][j];\r\n                    c.setScale(0);\r\n                    this.scene.tweens.add({\r\n                        targets: c,\r\n                        \"scale\": 1,\r\n                        duration: 300,\r\n                        delay: delay\r\n                    });\r\n                }\r\n            }\r\n\r\n            delayedCall(delay, ()=>{\r\n                this.sfxOpen = this.scene.sound.add(\"open\");\r\n                this.sfxOpen.play();\r\n            });\r\n\r\n            this.targetLetterLabel.visible = false;\r\n            this.resetCrescentMoons();\r\n            this.randomizeGrid();\r\n\r\n            delayedCall(1200, ()=>{\r\n                this.targetLetterLabel.visible = true;\r\n                this.updateClickLetterTargetLabel();\r\n\r\n                if (this.gameplay.isNewRound()) {\r\n                    if (!this.gameplay.isRoundsComplete()) {\r\n                        this.playCorrectAudio();\r\n                        delayedCall(2000, ()=>{\r\n                            this.setInputEnabled(true);\r\n                        });\r\n                    }\r\n                } else {\r\n                    this.setInputEnabled(true);\r\n                }\r\n            });\r\n        }\r\n\r\n        private sfxClose = null;\r\n        private showInGrid(showOut:boolean):void {\r\n            this.setInputEnabled(false);\r\n\r\n            let delay:number = 700;\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c = this.grid[i][j];\r\n                    this.scene.tweens.add({\r\n                        targets: c,\r\n                        \"scale\": 0,\r\n                        duration: 300,\r\n                        delay: delay,\r\n                        onComplete:()=>{\r\n                            c[\"bg\"].setTexture('rr_def');\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            delayedCall(delay, ()=>{\r\n                this.sfxClose = this.scene.sound.add(\"close\");\r\n                this.sfxClose.play();\r\n            });\r\n\r\n            if (showOut) {\r\n                delayedCall(1000, ()=>{\r\n                    this.showOutGrid();\r\n                });\r\n            }\r\n        }\r\n\r\n        public createInput(): void {\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c = this.grid[i][j];\r\n                    c[\"bg\"].on('pointerup', () => {\r\n                        this.playBtnClickAnim(c);\r\n                        c[\"bg\"].disableInteractive();\r\n\r\n                        let l = c[\"letter\"];\r\n                        if (l && l.texture.key == this.gameplay.getCorrectLetterName()) {\r\n                            c[\"bg\"].setTexture('rr_active');\r\n                            let completed:boolean = this.onCorrectAnswer();\r\n                            if (!completed) {\r\n                                if (this.gameplay.isNewRound()) {\r\n                                    this.showInGrid(true);\r\n                                }\r\n                            } else {\r\n                                this.showInGrid(false);\r\n                            }\r\n                        } else {\r\n                            c[\"bg\"].setTexture('rr_wrong');\r\n                            let lost:boolean = this.onWrongAnswer();\r\n                            if (!lost) {\r\n                                if (this.gameplay.isNewRound()) {\r\n                                    this.showInGrid(true);\r\n                                }\r\n                            } else {\r\n                                this.showInGrid(false);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n\r\n\r\n            this._btnSound.on('pointerup', () => {\r\n                this.playBtnClickAnim(this._btnSound);\r\n\r\n                this.onSoundClick();\r\n            });\r\n\r\n            this._btnClose.on('pointerup', () => {\r\n                this.playBtnClickAnim(this._btnClose);\r\n\r\n                this.onCloseClick();\r\n            });\r\n        }\r\n\r\n        public createGrid():void {\r\n            let startX:number = 355;\r\n            let startY:number = 215;\r\n            let dx:number = 76;\r\n            let dy:number = 71;\r\n            this.grid = [];\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                let arr = [];\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c:Phaser.GameObjects.Container = new Phaser.GameObjects.Container(this.scene, startX+i*dx, startY+j*dy);\r\n                    this.gameplayContainer.add(c);\r\n                    c[\"bg\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, 'rr_def');\r\n                    c.add(c[\"bg\"]);\r\n                    c[\"letter\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, null);\r\n                    c[\"letter\"][\"rectContainer\"] = c;\r\n                    c.add(c[\"letter\"]);\r\n                    c[\"letter\"].tint = Math.round(0x000000 * 0.9);\r\n                    arr.push(c);\r\n                }\r\n                this.grid.push(arr);\r\n            }\r\n        }\r\n\r\n        private randomizeGrid():void {\r\n            let gridLettersNames:string[] = null;\r\n            let minTriesGrid:string[] = null;\r\n            let minTries:number = Number.MAX_VALUE;\r\n            let triesNum:number = 0;\r\n            let sim:number = Number.MAX_VALUE;\r\n            do {\r\n                triesNum++;\r\n\r\n                gridLettersNames = Phaser.Utils.Array.Shuffle(this.gameplay.gridLettersNames.slice());\r\n                sim = this.checkRandomizationSimilarity(gridLettersNames);\r\n\r\n                if (sim < minTries) {\r\n                    minTries = sim;\r\n                    minTriesGrid = gridLettersNames;\r\n                }\r\n\r\n            } while (sim > 0 && triesNum < 100);\r\n\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let l:Phaser.GameObjects.Image = this.grid[i][j][\"letter\"];\r\n                    let rnd:any = minTriesGrid.shift();\r\n                    l.setTexture(rnd);\r\n                }\r\n            }\r\n        }\r\n\r\n        private checkRandomizationSimilarity(gridLettersNames:string[]):number {\r\n            let similarity:number = 0;\r\n            for (let i:number = 0; i < gridLettersNames.length - 1; i++) {\r\n                if (gridLettersNames[i] == gridLettersNames[i+1]) {\r\n                    similarity++;\r\n                }\r\n            }\r\n            for (let i:number = 0; i < gridLettersNames.length - this.rows; i++) {\r\n                if (i+this.rows < gridLettersNames.length && gridLettersNames[i] == gridLettersNames[i+this.rows]) {\r\n                    similarity++;\r\n                }\r\n            }\r\n            // console.log(\"sim: \",similarity);\r\n            return similarity;\r\n        }\r\n\r\n        public updateClickLetterTargetLabel():void {\r\n            this.targetLetterLabel.setTexture(this.gameplay.getCorrectLetterName());\r\n        }\r\n\r\n        public createCrescentMoons():void {\r\n            this.crescentMoons = [];\r\n            let dy:number = 61;\r\n            for (let i:number = 0; i < this.gameplay.choicesNumPerRound; i++) {\r\n                let cm = new Phaser.GameObjects.Image(this.scene, 179, 261 + i * dy, 'crescent_moon_def');\r\n                this.crescentMoons.push(cm);\r\n                this.gameplayContainer.add(cm);\r\n            }\r\n        }\r\n\r\n        public resetCrescentMoons():void {\r\n            for (let i:number = 0; i < this.crescentMoons.length; i++) {\r\n                this.setMoonsActive(i, false);\r\n            }\r\n        }\r\n\r\n        public setMoonsActive(index:number, active:boolean):void {\r\n            this.crescentMoons[index].setTexture(active ? 'crescent_moon_active' : 'crescent_moon_def')\r\n        }\r\n\r\n        private soundGooseYes = null;\r\n        public onCorrectAnswer(): boolean {\r\n            this.setMoonsActive(this.gameplay.correctAnswersCountThisRound, true);\r\n\r\n            let completed:boolean = this.gameplay.onCorrectAnswer();\r\n\r\n            this.soundGooseYes = this.scene.sound.add(\"Correct click\");\r\n            this.soundGooseYes.play();\r\n\r\n            return completed;\r\n        }\r\n\r\n        private soundGooseNo = null;\r\n        public onWrongAnswer(): boolean {\r\n            let lost:boolean = this.gameplay.onWrongAnswer();\r\n\r\n            this.soundGooseNo = this.scene.sound.add(\"Incorrect click\");\r\n            this.soundGooseNo.play();\r\n\r\n            return lost;\r\n        }\r\n\r\n        private correctAudio = null;\r\n        private playCorrectAudio():void {\r\n            if (this.correctAudio) {\r\n                this.correctAudio.stop();\r\n            }\r\n            try {\r\n                this.correctAudio = this.scene.sound.add('translate_click_on');\r\n                this.correctAudio.play();\r\n                if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\r\n                    this.correctAudio.pause();\r\n                }\r\n                delayedCall(750, ()=>{\r\n                    this.correctAudio = this.scene.sound.add(this.gameplay.getCorrectAudioKey());\r\n                    this.correctAudio.play();\r\n                    if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\r\n                        this.correctAudio.pause();\r\n                    }\r\n                });\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n        public onSoundClick(): void {\r\n            this.playCorrectAudio();\r\n        }\r\n\r\n        public onCloseClick(): void {\r\n            this.showAreYouSurePage();\r\n            this.scene.sound.add('warning page pop up sfx').play();\r\n        }\r\n\r\n        private playBtnClickAnim(target): void {\r\n            target.scaleX = target.scaleY = 1;\r\n            this.scene.tweens.add({\r\n                targets: target,\r\n                \"scaleX\": 0.9,\r\n                \"scaleY\": 0.9,\r\n                duration: 100,\r\n                yoyo: true\r\n            });\r\n        }\r\n\r\n        private wfsnd = null;\r\n        private instructionPage: InstructionPage;\r\n        public showInstructionPage(): void {\r\n            setPageBackground(\"bg-blue\");\r\n\r\n            let playInstructionSound:()=>void = ()=>{\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n                this.wfsnd = this.scene.sound.add(\"Unlock the Gate Open the mosque gate by entering the passcode.\");\r\n                this.wfsnd.play();\r\n            };\r\n\r\n            this.instructionPage = new InstructionPage(this.scene, (target) => {\r\n                this.playBtnClickAnim(target);\r\n                this.remove(this.instructionPage);\r\n                this.showGameplay();\r\n\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n            },(target) => {\r\n                this.playBtnClickAnim(target);\r\n                playInstructionSound();\r\n            });\r\n            this.add(this.instructionPage);\r\n            playInstructionSound();\r\n        }\r\n\r\n        private areYouSureWindow:AreYouSureWindow;\r\n        public showAreYouSurePage(): void {\r\n            pauseAllDelayedCalls();\r\n            setPageBackground(\"bg-blue\");\r\n\r\n            this.pauseSounds();\r\n\r\n            this.areYouSureWindow = new AreYouSureWindow(this.scene, ()=> {\r\n                this.remove(this.areYouSureWindow);\r\n                this.destroyGameplay();\r\n                this.showInstructionPage();\r\n            },()=> {\r\n                this.remove(this.areYouSureWindow);\r\n                this.unpauseSounds();\r\n                resumeAllDelayedCalls();\r\n                setPageBackground(\"bg-australia\");\r\n            });\r\n            this.add(this.areYouSureWindow);\r\n        }\r\n\r\n        private sfxCallToPrayer = null;\r\n\r\n        public showCompleteWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let completeWindow: CompleteWindow = new CompleteWindow(this.scene, (target) => {\r\n                this.playBtnClickAnim(target);\r\n            }, (target) => {\r\n                this.playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(completeWindow);\r\n                this.showInstructionPage();\r\n            }, (target) => {\r\n                this.playBtnClickAnim(target);\r\n            });\r\n            this.setInputEnabled(false);\r\n\r\n            delayedCall(1500, () => {\r\n                this.bgMusic.stop();\r\n\r\n                this.doorsWindow.open(()=>{\r\n                    this.sfxCallToPrayer = this.scene.sound.add(\"Call to prayer\");\r\n                    this.sfxCallToPrayer.play();\r\n\r\n                    delayedCall(6000, () => {\r\n                        setPageBackground(\"bg-blue\");\r\n\r\n                        this.add(completeWindow);\r\n                        completeWindow.show(score, starScore);\r\n                    });\r\n                });\r\n            });\r\n        };\r\n\r\n        public showLoseWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let tryAgainWindow: TryAgainWindow = new TryAgainWindow(this.scene, (target) => {\r\n                this.playBtnClickAnim(target);\r\n            }, (target) => {\r\n                this.playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(tryAgainWindow);\r\n                this.showInstructionPage();\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(750, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(tryAgainWindow);\r\n                tryAgainWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public setInputEnabled(enabled: boolean): void {\r\n            if (enabled) {\r\n                for (let i:number = 0; i < this.rows; i++) {\r\n                    for (let j:number = 0; j < this.cols; j++) {\r\n                        this.grid[i][j][\"bg\"].setInteractive({cursor: 'pointer'});\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i:number = 0; i < this.rows; i++) {\r\n                    for (let j:number = 0; j < this.cols; j++) {\r\n                        this.grid[i][j][\"bg\"].disableInteractive();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public pauseSounds():void {\r\n            this.scene.sound.pauseAll();\r\n        }\r\n\r\n        public unpauseSounds():void {\r\n            this.scene.sound.resumeAll();\r\n        }\r\n\r\n        public destroyGameplay():void {\r\n            this.setInputEnabled(false);\r\n            this.remove(this.gameplayContainer);\r\n            destroyAllDelayedCalls();\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class InstructionPage extends Phaser.GameObjects.Container {\r\n\r\n        private _instructionPage: Phaser.GameObjects.Image;\r\n        private _instructionPageTitle: Phaser.GameObjects.Image;\r\n        private _btnPlay: Phaser.GameObjects.Image;\r\n        private _btnSoundInstruction: Phaser.GameObjects.Image;\r\n        private instrTxt: Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onPlayClick:(target)=>void, onSndClick:(target)=>void) {\r\n            super(scene);\r\n\r\n            this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0-105, 0-48, 'Instructions page  ALL ACTIVITY  TITLEs');\r\n            this._instructionPage.setOrigin(0, 0);\r\n            this._instructionPage.setInteractive();\r\n\r\n            this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'welcome');\r\n            this._instructionPageTitle.setScale(0.75);\r\n\r\n            this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\r\n            this._btnPlay.setInteractive({cursor: 'pointer'});\r\n            this._btnPlay.once('pointerup', onPlayClick);\r\n            setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\r\n\r\n            this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Open the mosque gate by entering\\nthe passcode.\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 30,\r\n                \"color\": \"#43425D\",\r\n                \"align\": 'center'\r\n            });\r\n            this.instrTxt.setLineSpacing(20);\r\n            this.instrTxt.setOrigin(0.5, 0.5);\r\n\r\n            this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\r\n            this._btnSoundInstruction.setInteractive({cursor: 'pointer'});\r\n            this._btnSoundInstruction.on('pointerup', onSndClick);\r\n            setupButtonTextureBased(this._btnSoundInstruction, 'Sound','Sound HOVER EFFECT');\r\n\r\n            this.add(this._instructionPage);\r\n            this.add(this._instructionPageTitle);\r\n            this.add(this.instrTxt);\r\n            this.add(this._btnPlay);\r\n            this.add(this._btnSoundInstruction);\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class TryAgainWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bg:Phaser.GameObjects.Image;\r\n        _star:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-106, -48);\r\n\r\n            this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\r\n            this._bg.setOrigin(0, 0);\r\n            this._bg.setInteractive();\r\n            this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bg,\r\n                this._star,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._star.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._star,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            this.music = this.scene.sound.add(\"Fail - close one\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}"]}