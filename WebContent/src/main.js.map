{"version":3,"sources":["main.js","../ts/src/App.ts","../ts/src/FitScaleManager.ts","../ts/src/core/Gameplay.ts","../ts/src/scene/Boot.ts","../ts/src/scene/MainScene.ts","../ts/src/scene/Preloader.ts","../ts/src/screen/AreYouSureWindow.ts","../ts/src/screen/CompleteWindow.ts","../ts/src/screen/DoorsWindow.ts","../ts/src/screen/GameplayScreen.ts","../ts/src/screen/InstructionPage.ts","../ts/src/screen/TryAgainWindow.ts"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","minLen","_arrayLikeToArray","toString","call","slice","name","from","test","arr","len","arr2","_classCallCheck","instance","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Date","getPrototypeOf","game","sh","App","_Phaser$Game","Phaser","Game","_super","_this","config","type","WEBGL","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","parent","dom","createContainer","scale","mode","FitScaleManager","detectBestScaleMode","autoCenter","Scale","CENTER_BOTH","transparent","scene","add","Boot","window","onload","delayedCalls","delayedCall","delay","callback","args","callbackScope","getAt","dc","time","push","t","setTimeout","pauseAllDelayedCalls","_step","_iterator","Time","TimerEvent","paused","resumeAllDelayedCalls","_step2","_iterator2","destroyAllDelayedCalls","_step3","_iterator3","remove","clearTimeout","setPageBackground","bg","document","querySelector","style","backgroundImage","setupButton","btn","frame","on","setFrame","sound","play","setupButtonTextureBased","texture","hoverTexture","setTexture","_this2","doResize","calculateScale","newCanvasWidth","phaserScaleManager","newCanvasHeight","canvasStyle","marginLeft","innerWidth","marginTop","innerHeight","canvas","addListener","Events","RESIZE","onResize","overridePhaserTransformMethods","scaleMode","NONE","Math","min","_this3","transformX","pageX","parseInt","split","transformY","pageY","RESIZE_DELAY","iOS","navigator","platform","isAndroid","userAgent","toLowerCase","indexOf","FIT","core","Gameplay","totalLettersCount","totalRoundsNum","failsNumToLose","choicesNumPerRound","currentRound","currentLetter","correctAnswersCount","wrongAnswersCount","correctAnswersCountThisRound","wrongAnswersCountThisRound","onComplete","onLose","score","calculateScore","nextLetter","roundsLetter","ind","floor","random","splice","gridLettersNames","correctLetterName","getCorrectLetterName","rwl","roundsWrongLetters","_step4","_iterator4","wl","onLetterChosen","getCurrentTotalAnswersCountThisRound","getCurrentTotalAnswersCount","json","cache","get","letters","rounds","_step5","_iterator5","r","l","_Phaser$Scene","Scene","_super2","_this4","offsetLeft","parentElement","displayScale","x","offsetTop","y","Preloader","MainScene","_Phaser$Scene2","_super3","gameplay","gameplayScreen","screen","GameplayScreen","children","showInstructionPage","_Phaser$Scene3","_super4","_this5","load","pack","nextScene","start","AreYouSureWindow","_Phaser$GameObjects$C","GameObjects","Container","_super5","onYes","onNo","_this6","_areYouSurePage","Image","setOrigin","setInteractive","_btnSureYes","cursor","once","_btnSureNo","CompleteWindow","_Phaser$GameObjects$C2","_super6","onBack","onReplay","onNext","_this7","music","setPosition","_bgComplete","_cup","_btnBack","_btnReplay","_btnNext","_CollectedPoints","totalScoreTxt","text","fontFamily","fontSize","color","align","stroke","strokeThickness","grd","context","createLinearGradient","addColorStop","setFill","starScoreTxt","stop","starScore","tweens","targets","duration","ease","Easing","Back","Out","String","DoorsWindow","_Phaser$GameObjects$C3","_super7","_this8","_DoorR","_DoorL","_DoorInside","door","def_vertices_no_offset","vertXIndexes","vertYIndexes","vertYSign","tweenDoorValueY","visible","def_vertices","mesh","make","vertices","uv","tweenDoorValueX","Linear","onUpdate","k","_step6","_iterator6","openDoor","_Phaser$GameObjects$C4","_super8","_this9","rows","cols","bgMusic","sfxOpen","sfxClose","soundGooseYes","soundGooseNo","correctAudio","wfsnd","sfxCallToPrayer","showCompleteWindow","completeWindow","playBtnClickAnim","destroyGameplay","setInputEnabled","doorsWindow","open","show","showLoseWindow","tryAgainWindow","TryAgainWindow","loop","_gameStage","_btnSound","_btnClose","gameplayContainer","addAt","targetLetterLabel","tint","round","reset","createGrid","createCrescentMoons","createInput","showOutGrid","setupCallbacks","_this10","j","c","grid","setScale","resetCrescentMoons","randomizeGrid","updateClickLetterTargetLabel","isNewRound","isRoundsComplete","playCorrectAudio","showOut","_this11","_loop","_this12","_loop2","disableInteractive","onCorrectAnswer","showInGrid","onWrongAnswer","onSoundClick","onCloseClick","minTriesGrid","minTries","Number","MAX_VALUE","triesNum","sim","Utils","Shuffle","checkRandomizationSimilarity","rnd","shift","similarity","crescentMoons","cm","setMoonsActive","index","active","completed","lost","_this13","areYouSureWindow","parentContainer","pause","getCorrectAudioKey","console","log","showAreYouSurePage","scaleX","scaleY","yoyo","_this14","playInstructionSound","instructionPage","InstructionPage","showGameplay","_this15","pauseSounds","unpauseSounds","enabled","pauseAll","resumeAll","_Phaser$GameObjects$C5","_super9","onPlayClick","onSndClick","_this16","_instructionPage","_instructionPageTitle","_btnPlay","instrTxt","setLineSpacing","_btnSoundInstruction","_Phaser$GameObjects$C6","_super10","_this17","_bg","_star"],"mappings":"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","file":"main.js","sourcesContent":["var sh;\n(function (sh) {\n    class App extends Phaser.Game {\n        constructor() {\n            let config = {\n                type: Phaser.WEBGL,\n                width: App.CANVAS_WIDTH,\n                height: App.CANVAS_HEIGHT,\n                parent: 'game-container',\n                dom: {\n                    createContainer: false\n                },\n                scale: {\n                    mode: FitScaleManager.detectBestScaleMode(),\n                    autoCenter: Phaser.Scale.CENTER_BOTH\n                },\n                transparent: true,\n                scene: {\n                    create: () => {\n                        this.scene.add('Boot', sh.scene.Boot, true);\n                    }\n                }\n            };\n            super(config);\n        }\n    }\n    App.CANVAS_WIDTH = 980;\n    App.CANVAS_HEIGHT = 600;\n    sh.App = App;\n})(sh || (sh = {}));\nlet game;\nwindow.onload = () => {\n    game = new sh.App();\n};\nlet delayedCalls = [];\nfunction delayedCall(delay, callback, args, callbackScope) {\n    let scene = game.scene.getAt(0);\n    if (scene) {\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\n        delayedCalls.push(dc);\n        return dc;\n    }\n    let t = setTimeout(callback, delay);\n    delayedCalls.push(t);\n    return t;\n}\nfunction pauseAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = true;\n        }\n    }\n}\nfunction resumeAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = false;\n        }\n    }\n}\nfunction destroyAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.remove(false);\n        }\n        else {\n            clearTimeout(dc);\n        }\n    }\n    delayedCalls = [];\n}\nfunction setPageBackground(bg) {\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\n}\nfunction setupButton(btn, frame) {\n    btn.on('pointerdown', () => { btn.setFrame(frame + '_hover' + '0000'); });\n    btn.on('pointerover', () => { btn.setFrame(frame + '_hover' + '0000'); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setFrame(frame + '0000'); });\n    btn.on('pointerup', () => { btn.setFrame(frame + '0000'); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction setupButtonTextureBased(btn, texture, hoverTexture) {\n    btn.on('pointerdown', () => { btn.setTexture(hoverTexture); });\n    btn.on('pointerover', () => { btn.setTexture(hoverTexture); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setTexture(texture); });\n    btn.on('pointerup', () => { btn.setTexture(texture); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\n/**\n * @author Roman Parada\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\n *\n * How to use:\n * Just call the code line below in Boot scene's init() method of your project:\n * new FitScaleManager(this.game).setup();\n */\nclass FitScaleManager {\n    constructor(game) {\n        this.doResize = () => {\n            let scale = this.calculateScale();\n            let newCanvasWidth = this.phaserScaleManager.width * scale;\n            let newCanvasHeight = this.phaserScaleManager.height * scale;\n            this.canvasStyle.width = newCanvasWidth + 'px';\n            this.canvasStyle.height = newCanvasHeight + 'px';\n            this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\n            this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\n        };\n        this.game = game;\n        this.canvasStyle = this.game.canvas.style;\n        this.phaserScaleManager = this.game.scale;\n    }\n    static detectBestScaleMode() {\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\n    }\n    ;\n    /**\n     * Just call this method once in Boot scene's init() method\n     */\n    setup() {\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\n        this.overridePhaserTransformMethods();\n        this.onResize();\n    }\n    calculateScale() {\n        if (game.scale.scaleMode == Phaser.Scale.NONE)\n            return 1;\n        return Math.min(window.innerWidth / this.phaserScaleManager.width, window.innerHeight / this.phaserScaleManager.height);\n    }\n    overridePhaserTransformMethods() {\n        this.game.scale.transformX = (pageX) => {\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\n        };\n        this.game.scale.transformY = (pageY) => {\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\n        };\n    }\n    onResize() {\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\n    }\n}\nFitScaleManager.RESIZE_DELAY = 500;\nvar sh;\n(function (sh) {\n    var core;\n    (function (core) {\n        class Gameplay {\n            constructor() {\n                this.totalLettersCount = 25;\n                this.totalRoundsNum = 2;\n                this.failsNumToLose = 3;\n                this.choicesNumPerRound = 5;\n                this.currentRound = 0;\n                this.currentLetter = null;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n            setupCallbacks(onComplete, onLose) {\n                this.onComplete = onComplete;\n                this.onLose = onLose;\n            }\n            calculateScore() {\n                return this.choicesNumPerRound * this.totalRoundsNum - this.wrongAnswersCount;\n            }\n            onLetterChosen() {\n                if (this.correctAnswersCountThisRound == this.choicesNumPerRound) {\n                    this.currentRound++;\n                    if (this.currentRound >= this.totalRoundsNum) {\n                        let score = this.calculateScore();\n                        this.onComplete(score, score);\n                        return true;\n                    }\n                    else {\n                        this.nextLetter();\n                    }\n                }\n                return false;\n            }\n            nextLetter() {\n                if (this.roundsLetter.length == 0) {\n                    this.currentLetter = null;\n                }\n                else {\n                    let ind = Math.floor(Math.random() * this.roundsLetter.length);\n                    this.currentLetter = this.roundsLetter[ind];\n                    this.roundsLetter.splice(ind, 1);\n                    this.gridLettersNames = [];\n                    let correctLetterName = this.getCorrectLetterName();\n                    for (let i = 0; i < this.choicesNumPerRound; i++) {\n                        this.gridLettersNames.push(correctLetterName);\n                    }\n                    let rwl = this.roundsWrongLetters[ind];\n                    this.roundsWrongLetters.splice(ind, 1);\n                    for (let wl of rwl) {\n                        for (let i = 0; i < 2; i++) {\n                            this.gridLettersNames.push(wl);\n                        }\n                    }\n                }\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n            getCorrectLetterName() {\n                return this.currentLetter['correctLetterName'];\n            }\n            getCorrectAudioKey() {\n                return this.currentLetter['correctAudioKey'];\n            }\n            onCorrectAnswer() {\n                this.correctAnswersCount++;\n                this.correctAnswersCountThisRound++;\n                return this.onLetterChosen();\n            }\n            onWrongAnswer() {\n                this.wrongAnswersCount++;\n                this.wrongAnswersCountThisRound++;\n                if (this.wrongAnswersCountThisRound >= this.failsNumToLose) {\n                    this.onLose(0, 0);\n                    return true;\n                }\n                else {\n                    this.onLetterChosen();\n                }\n                return false;\n            }\n            getCurrentTotalAnswersCount() {\n                return this.correctAnswersCount + this.wrongAnswersCount;\n            }\n            getCurrentTotalAnswersCountThisRound() {\n                return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\n            }\n            isNewRound() {\n                return this.getCurrentTotalAnswersCountThisRound() == 0;\n            }\n            isRoundsComplete() {\n                return this.getCurrentTotalAnswersCount() / this.choicesNumPerRound >= this.totalRoundsNum;\n            }\n            reset() {\n                let json = game.cache.json.get('gameplay');\n                this.letters = json[\"letters\"].slice();\n                let rounds = json[\"rounds\"];\n                this.roundsLetter = [];\n                this.roundsWrongLetters = [];\n                for (let r of rounds) {\n                    let l = r[\"correctLetter\"];\n                    for (let i = this.letters.length - 1; i >= 0; i--) {\n                        if (this.letters[i]['correctLetterName'] == l) {\n                            this.roundsLetter.push(this.letters[i]);\n                            break;\n                        }\n                    }\n                    this.roundsWrongLetters.push(r[\"wrongLetters\"]);\n                }\n                this.totalRoundsNum = this.roundsLetter.length;\n                this.nextLetter();\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n        }\n        core.Gameplay = Gameplay;\n    })(core = sh.core || (sh.core = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var scene;\n    (function (scene) {\n        class Boot extends Phaser.Scene {\n            init() {\n                this.game.scale.transformX = (pageX) => {\n                    let offsetLeft = 0;\n                    let parentElement = game.canvas.parentElement;\n                    while (parentElement) {\n                        if (parentElement.offsetLeft) {\n                            offsetLeft = parentElement.offsetLeft;\n                            break;\n                        }\n                        parentElement = parentElement.parentElement;\n                    }\n                    return (pageX - offsetLeft) * this.game.scale.displayScale.x;\n                };\n                this.game.scale.transformY = (pageY) => {\n                    let offsetTop = 0;\n                    let parentElement = game.canvas.parentElement;\n                    while (parentElement) {\n                        if (parentElement.offsetTop) {\n                            offsetTop = parentElement.offsetTop;\n                            break;\n                        }\n                        parentElement = parentElement.parentElement;\n                    }\n                    return (pageY - offsetTop) * this.game.scale.displayScale.y;\n                };\n            }\n            create() {\n                game.scene.remove('Boot');\n                game.scene.add('Preloader', sh.scene.Preloader, true);\n            }\n        }\n        scene.Boot = Boot;\n    })(scene = sh.scene || (sh.scene = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var scene;\n    (function (scene) {\n        var Gameplay = sh.core.Gameplay;\n        class MainScene extends Phaser.Scene {\n            create() {\n                this.gameplay = new Gameplay();\n                this.gameplayScreen = new sh.screen.GameplayScreen(this, this.gameplay);\n                this.children.add(this.gameplayScreen);\n                this.gameplayScreen.showInstructionPage();\n            }\n        }\n        scene.MainScene = MainScene;\n    })(scene = sh.scene || (sh.scene = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var scene;\n    (function (scene) {\n        class Preloader extends Phaser.Scene {\n            preload() {\n            }\n            create() {\n                this.load.json('gameplay', 'assets/json/gameplay.json');\n                this.load.pack('preloader', 'assets/pack.json');\n                this.load.on('progress', (value) => {\n                }, this);\n                this.load.on('complete', () => {\n                    this.nextScene();\n                });\n                this.load.start();\n            }\n            nextScene() {\n                game.scene.remove('Preloader');\n                game.scene.add('ScreenMain', sh.scene.MainScene, true);\n            }\n        }\n        scene.Preloader = Preloader;\n    })(scene = sh.scene || (sh.scene = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class AreYouSureWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onYes, onNo) {\n                super(scene);\n                this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0 - 48, 'Exit warning');\n                this._areYouSurePage.setOrigin(0, 0);\n                this._areYouSurePage.setInteractive();\n                this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485 - 50, 'btnYES1');\n                this._btnSureYes.setInteractive({ cursor: 'pointer' });\n                this._btnSureYes.once('pointerup', onYes);\n                setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\n                this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485 - 50, 'btnNO1');\n                this._btnSureNo.setInteractive({ cursor: 'pointer' });\n                this._btnSureNo.once('pointerup', onNo);\n                setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\n                this.add(this._areYouSurePage);\n                this.add(this._btnSureYes);\n                this.add(this._btnSureNo);\n            }\n        }\n        screen.AreYouSureWindow = AreYouSureWindow;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class CompleteWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay, onNext) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-104.5, -48);\n                this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\n                this._bgComplete.setOrigin(0, 0);\n                this._bgComplete.setInteractive();\n                this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\n                this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\n                let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\n                this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bgComplete,\n                    _CollectedPoints,\n                    this._cup,\n                    this._btnBack,\n                    this._btnReplay,\n                    this._btnNext,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n                this._btnNext.setInteractive({ cursor: 'pointer' });\n                this._btnNext.on('pointerup', () => {\n                    onNext(this._btnNext);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\n            }\n            show(score, starScore) {\n                this._cup.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._cup,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                // let music = this.scene.sound.add(\"viktory\");\n                this.music = this.scene.sound.add(\"Activity completion fantastic\");\n                this.music.play();\n            }\n        }\n        screen.CompleteWindow = CompleteWindow;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class DoorsWindow extends Phaser.GameObjects.Container {\n            constructor(scene) {\n                super(scene);\n                this._DoorR = new Phaser.GameObjects.Image(this.scene, 504.5, 158, 'Door R');\n                this._DoorR.setOrigin(0, 0);\n                this._DoorL = new Phaser.GameObjects.Image(this.scene, 313.5, 158, 'Door L');\n                this._DoorL.setOrigin(0, 0);\n                this._DoorInside = new Phaser.GameObjects.Image(this.scene, 313, 158, 'Door Inside');\n                this._DoorInside.setOrigin(0, 0);\n                this.add(this._DoorInside);\n                this.add(this._DoorR);\n                this.add(this._DoorL);\n            }\n            openDoor(door, duration, def_vertices_no_offset, vertXIndexes, vertYIndexes, vertYSign, tweenDoorValueY) {\n                door.visible = false;\n                let dx = 100, dy = 198;\n                let def_vertices = def_vertices_no_offset.slice();\n                for (let i = 0; i < def_vertices_no_offset.length; i += 2) {\n                    def_vertices[i] += dx;\n                }\n                for (let i = 1; i < def_vertices_no_offset.length; i += 2) {\n                    def_vertices[i] += dy;\n                }\n                let mesh = this.scene.make.mesh({\n                    key: door.texture.key,\n                    x: door.x,\n                    y: door.y,\n                    vertices: def_vertices.slice(),\n                    uv: [\n                        /*  U   |   V  */\n                        /* ----------- */\n                        0, 0,\n                        0, 1,\n                        1, 1,\n                        0, 0,\n                        1, 1,\n                        1, 0\n                    ]\n                });\n                mesh[\"def_vertices\"] = def_vertices;\n                door[\"tweenDoorValueX\"] = mesh[\"def_vertices\"][vertXIndexes[0]];\n                door[\"tweenDoorValueY\"] = 0;\n                this.scene.tweens.add({\n                    targets: door,\n                    tweenDoorValueX: -def_vertices_no_offset[vertXIndexes[0]] * 0.6 + dx,\n                    tweenDoorValueY: tweenDoorValueY,\n                    duration: duration,\n                    ease: Phaser.Math.Easing.Linear,\n                    onUpdate: () => {\n                        for (let k = 0; k < vertYIndexes.length; k++) {\n                            mesh.vertices[vertYIndexes[k]] = mesh[\"def_vertices\"][vertYIndexes[k]] + vertYSign[k] * door[\"tweenDoorValueY\"];\n                        }\n                        for (let i of vertXIndexes) {\n                            mesh.vertices[i] = door[\"tweenDoorValueX\"];\n                        }\n                    }\n                });\n                this.add(mesh);\n                this.scene.sound.add('Door opening').play();\n            }\n            open(onComplete) {\n                let duration = 2000;\n                let tweenDoorValueY = 50;\n                this.openDoor(this._DoorR, duration, [\n                    /*  X   |   Y  */\n                    /* ----------- */\n                    -this._DoorR.width / 2, -this._DoorR.height / 2,\n                    -this._DoorR.width / 2, this._DoorR.height / 2,\n                    this._DoorR.width / 2, this._DoorR.height / 2,\n                    -this._DoorR.width / 2, -this._DoorR.height / 2,\n                    this._DoorR.width / 2, this._DoorR.height / 2,\n                    this._DoorR.width / 2, -this._DoorR.height / 2\n                ], [0, 2, 6], [1, 3, 7], [-1, 1, -1], tweenDoorValueY);\n                this.openDoor(this._DoorL, duration, [\n                    /*  X   |   Y  */\n                    /* ----------- */\n                    -this._DoorL.width / 2, -this._DoorL.height / 2,\n                    -this._DoorL.width / 2, this._DoorL.height / 2,\n                    this._DoorL.width / 2, this._DoorL.height / 2,\n                    -this._DoorL.width / 2, -this._DoorL.height / 2,\n                    this._DoorL.width / 2, this._DoorL.height / 2,\n                    this._DoorL.width / 2, -this._DoorL.height / 2\n                ], [4, 8, 10], [5, 9, 11], [-1, -1, 1], -tweenDoorValueY);\n                delayedCall(duration, onComplete);\n            }\n        }\n        screen.DoorsWindow = DoorsWindow;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class GameplayScreen extends Phaser.GameObjects.Container {\n            constructor(scene, gameplay) {\n                super(scene);\n                this.rows = 5;\n                this.cols = 5;\n                this.bgMusic = null;\n                this.sfxOpen = null;\n                this.sfxClose = null;\n                this.soundGooseYes = null;\n                this.soundGooseNo = null;\n                this.correctAudio = null;\n                this.wfsnd = null;\n                this.sfxCallToPrayer = null;\n                this.showCompleteWindow = (score, starScore) => {\n                    let completeWindow = new screen.CompleteWindow(this.scene, (target) => {\n                        this.playBtnClickAnim(target);\n                    }, (target) => {\n                        this.playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(completeWindow);\n                        this.showInstructionPage();\n                    }, (target) => {\n                        this.playBtnClickAnim(target);\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(1500, () => {\n                        this.bgMusic.stop();\n                        this.doorsWindow.open(() => {\n                            this.sfxCallToPrayer = this.scene.sound.add(\"Call to prayer\");\n                            this.sfxCallToPrayer.play();\n                            delayedCall(6000, () => {\n                                setPageBackground(\"bg-blue\");\n                                this.add(completeWindow);\n                                completeWindow.show(score, starScore);\n                            });\n                        });\n                    });\n                };\n                this.showLoseWindow = (score, starScore) => {\n                    let tryAgainWindow = new screen.TryAgainWindow(this.scene, (target) => {\n                        this.playBtnClickAnim(target);\n                    }, (target) => {\n                        this.playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(tryAgainWindow);\n                        this.showInstructionPage();\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(750, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(tryAgainWindow);\n                        tryAgainWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.gameplay = gameplay;\n                window[\"t\"] = this;\n            }\n            showGameplay() {\n                setPageBackground(\"bg-australia\");\n                this.bgMusic = this.scene.sound.add(\"B-g ambience\");\n                this.bgMusic.play();\n                this.bgMusic.loop = true;\n                this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, '3 Letter Grid');\n                this._gameStage.setOrigin(0.485, 0.48);\n                this._gameStage.setInteractive();\n                this._btnSound = new Phaser.GameObjects.Image(this.scene, 160 - 105, 100 - 50, 'Sound');\n                this._btnSound.setInteractive({ cursor: 'pointer' });\n                setupButtonTextureBased(this._btnSound, 'Sound', 'Sound HOVER EFFECT');\n                this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025 - 105, 100 - 50, 'x Button');\n                this._btnClose.setInteractive({ cursor: 'pointer' });\n                setupButtonTextureBased(this._btnClose, 'x Button', 'x Button HOVER EFFECT');\n                this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\n                this.addAt(this.gameplayContainer, 0);\n                this.targetLetterLabel = new Phaser.GameObjects.Image(this.scene, 590, 90, null);\n                this.targetLetterLabel.tint = Math.round(0x000000 * 0.9);\n                this.doorsWindow = new screen.DoorsWindow(this.scene);\n                this.gameplayContainer.add([\n                    this._gameStage,\n                    this.doorsWindow,\n                    this._btnSound,\n                    this._btnClose,\n                    this.targetLetterLabel\n                ]);\n                this.gameplay.reset();\n                this.createGrid();\n                this.createCrescentMoons();\n                this.createInput();\n                this.showOutGrid();\n                this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow);\n            }\n            showOutGrid() {\n                this.setInputEnabled(false);\n                let delay = 700;\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = this.grid[i][j];\n                        c.setScale(0);\n                        this.scene.tweens.add({\n                            targets: c,\n                            \"scale\": 1,\n                            duration: 300,\n                            delay: delay\n                        });\n                    }\n                }\n                delayedCall(delay, () => {\n                    this.sfxOpen = this.scene.sound.add(\"open\");\n                    this.sfxOpen.play();\n                });\n                this.targetLetterLabel.visible = false;\n                this.resetCrescentMoons();\n                this.randomizeGrid();\n                delayedCall(1200, () => {\n                    this.targetLetterLabel.visible = true;\n                    this.updateClickLetterTargetLabel();\n                    if (this.gameplay.isNewRound()) {\n                        if (!this.gameplay.isRoundsComplete()) {\n                            this.playCorrectAudio();\n                            delayedCall(2000, () => {\n                                this.setInputEnabled(true);\n                            });\n                        }\n                    }\n                    else {\n                        this.setInputEnabled(true);\n                    }\n                });\n            }\n            showInGrid(showOut) {\n                this.setInputEnabled(false);\n                let delay = 700;\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = this.grid[i][j];\n                        this.scene.tweens.add({\n                            targets: c,\n                            \"scale\": 0,\n                            duration: 300,\n                            delay: delay,\n                            onComplete: () => {\n                                c[\"bg\"].setTexture('rr_def');\n                            }\n                        });\n                    }\n                }\n                delayedCall(delay, () => {\n                    this.sfxClose = this.scene.sound.add(\"close\");\n                    this.sfxClose.play();\n                });\n                if (showOut) {\n                    delayedCall(1000, () => {\n                        this.showOutGrid();\n                    });\n                }\n            }\n            createInput() {\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = this.grid[i][j];\n                        c[\"bg\"].on('pointerup', () => {\n                            this.playBtnClickAnim(c);\n                            c[\"bg\"].disableInteractive();\n                            let l = c[\"letter\"];\n                            if (l && l.texture.key == this.gameplay.getCorrectLetterName()) {\n                                c[\"bg\"].setTexture('rr_active');\n                                let completed = this.onCorrectAnswer();\n                                if (!completed) {\n                                    if (this.gameplay.isNewRound()) {\n                                        this.showInGrid(true);\n                                    }\n                                }\n                                else {\n                                    this.showInGrid(false);\n                                }\n                            }\n                            else {\n                                c[\"bg\"].setTexture('rr_wrong');\n                                let lost = this.onWrongAnswer();\n                                if (!lost) {\n                                    if (this.gameplay.isNewRound()) {\n                                        this.showInGrid(true);\n                                    }\n                                }\n                                else {\n                                    this.showInGrid(false);\n                                }\n                            }\n                        });\n                    }\n                }\n                this._btnSound.on('pointerup', () => {\n                    this.playBtnClickAnim(this._btnSound);\n                    this.onSoundClick();\n                });\n                this._btnClose.on('pointerup', () => {\n                    this.playBtnClickAnim(this._btnClose);\n                    this.onCloseClick();\n                });\n            }\n            createGrid() {\n                let startX = 355;\n                let startY = 215;\n                let dx = 76;\n                let dy = 71;\n                this.grid = [];\n                for (let i = 0; i < this.rows; i++) {\n                    let arr = [];\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = new Phaser.GameObjects.Container(this.scene, startX + i * dx, startY + j * dy);\n                        this.gameplayContainer.add(c);\n                        c[\"bg\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, 'rr_def');\n                        c.add(c[\"bg\"]);\n                        c[\"letter\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, null);\n                        c[\"letter\"][\"rectContainer\"] = c;\n                        c.add(c[\"letter\"]);\n                        c[\"letter\"].tint = Math.round(0x000000 * 0.9);\n                        arr.push(c);\n                    }\n                    this.grid.push(arr);\n                }\n            }\n            randomizeGrid() {\n                let gridLettersNames = null;\n                let minTriesGrid = null;\n                let minTries = Number.MAX_VALUE;\n                let triesNum = 0;\n                let sim = Number.MAX_VALUE;\n                do {\n                    triesNum++;\n                    gridLettersNames = Phaser.Utils.Array.Shuffle(this.gameplay.gridLettersNames.slice());\n                    sim = this.checkRandomizationSimilarity(gridLettersNames);\n                    if (sim < minTries) {\n                        minTries = sim;\n                        minTriesGrid = gridLettersNames;\n                    }\n                } while (sim > 0 && triesNum < 100);\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let l = this.grid[i][j][\"letter\"];\n                        let rnd = minTriesGrid.shift();\n                        l.setTexture(rnd);\n                    }\n                }\n            }\n            checkRandomizationSimilarity(gridLettersNames) {\n                let similarity = 0;\n                for (let i = 0; i < gridLettersNames.length - 1; i++) {\n                    if (gridLettersNames[i] == gridLettersNames[i + 1]) {\n                        similarity++;\n                    }\n                }\n                for (let i = 0; i < gridLettersNames.length - this.rows; i++) {\n                    if (i + this.rows < gridLettersNames.length && gridLettersNames[i] == gridLettersNames[i + this.rows]) {\n                        similarity++;\n                    }\n                }\n                // console.log(\"sim: \",similarity);\n                return similarity;\n            }\n            updateClickLetterTargetLabel() {\n                this.targetLetterLabel.setTexture(this.gameplay.getCorrectLetterName());\n            }\n            createCrescentMoons() {\n                this.crescentMoons = [];\n                let dy = 61;\n                for (let i = 0; i < this.gameplay.choicesNumPerRound; i++) {\n                    let cm = new Phaser.GameObjects.Image(this.scene, 179, 261 + i * dy, 'crescent_moon_def');\n                    this.crescentMoons.push(cm);\n                    this.gameplayContainer.add(cm);\n                }\n            }\n            resetCrescentMoons() {\n                for (let i = 0; i < this.crescentMoons.length; i++) {\n                    this.setMoonsActive(i, false);\n                }\n            }\n            setMoonsActive(index, active) {\n                this.crescentMoons[index].setTexture(active ? 'crescent_moon_active' : 'crescent_moon_def');\n            }\n            onCorrectAnswer() {\n                this.setMoonsActive(this.gameplay.correctAnswersCountThisRound, true);\n                let completed = this.gameplay.onCorrectAnswer();\n                this.soundGooseYes = this.scene.sound.add(\"Correct click\");\n                this.soundGooseYes.play();\n                return completed;\n            }\n            onWrongAnswer() {\n                let lost = this.gameplay.onWrongAnswer();\n                this.soundGooseNo = this.scene.sound.add(\"Incorrect click\");\n                this.soundGooseNo.play();\n                return lost;\n            }\n            playCorrectAudio() {\n                if (this.correctAudio) {\n                    this.correctAudio.stop();\n                }\n                try {\n                    this.correctAudio = this.scene.sound.add('translate_click_on');\n                    this.correctAudio.play();\n                    if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\n                        this.correctAudio.pause();\n                    }\n                    delayedCall(750, () => {\n                        this.correctAudio = this.scene.sound.add(this.gameplay.getCorrectAudioKey());\n                        this.correctAudio.play();\n                        if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\n                            this.correctAudio.pause();\n                        }\n                    });\n                }\n                catch (e) {\n                    console.log(e);\n                }\n            }\n            onSoundClick() {\n                this.playCorrectAudio();\n            }\n            onCloseClick() {\n                this.showAreYouSurePage();\n                this.scene.sound.add('warning page pop up sfx').play();\n            }\n            playBtnClickAnim(target) {\n                target.scaleX = target.scaleY = 1;\n                this.scene.tweens.add({\n                    targets: target,\n                    \"scaleX\": 0.9,\n                    \"scaleY\": 0.9,\n                    duration: 100,\n                    yoyo: true\n                });\n            }\n            showInstructionPage() {\n                setPageBackground(\"bg-blue\");\n                let playInstructionSound = () => {\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                    this.wfsnd = this.scene.sound.add(\"Unlock the Gate Open the mosque gate by entering the passcode.\");\n                    this.wfsnd.play();\n                };\n                this.instructionPage = new screen.InstructionPage(this.scene, (target) => {\n                    this.playBtnClickAnim(target);\n                    this.remove(this.instructionPage);\n                    this.showGameplay();\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                }, (target) => {\n                    this.playBtnClickAnim(target);\n                    playInstructionSound();\n                });\n                this.add(this.instructionPage);\n                playInstructionSound();\n            }\n            showAreYouSurePage() {\n                pauseAllDelayedCalls();\n                setPageBackground(\"bg-blue\");\n                this.pauseSounds();\n                this.areYouSureWindow = new screen.AreYouSureWindow(this.scene, () => {\n                    this.remove(this.areYouSureWindow);\n                    this.destroyGameplay();\n                    this.showInstructionPage();\n                }, () => {\n                    this.remove(this.areYouSureWindow);\n                    this.unpauseSounds();\n                    resumeAllDelayedCalls();\n                    setPageBackground(\"bg-australia\");\n                });\n                this.add(this.areYouSureWindow);\n            }\n            setInputEnabled(enabled) {\n                if (enabled) {\n                    for (let i = 0; i < this.rows; i++) {\n                        for (let j = 0; j < this.cols; j++) {\n                            this.grid[i][j][\"bg\"].setInteractive({ cursor: 'pointer' });\n                        }\n                    }\n                }\n                else {\n                    for (let i = 0; i < this.rows; i++) {\n                        for (let j = 0; j < this.cols; j++) {\n                            this.grid[i][j][\"bg\"].disableInteractive();\n                        }\n                    }\n                }\n            }\n            pauseSounds() {\n                this.scene.sound.pauseAll();\n            }\n            unpauseSounds() {\n                this.scene.sound.resumeAll();\n            }\n            destroyGameplay() {\n                this.setInputEnabled(false);\n                this.remove(this.gameplayContainer);\n                destroyAllDelayedCalls();\n            }\n        }\n        screen.GameplayScreen = GameplayScreen;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class InstructionPage extends Phaser.GameObjects.Container {\n            constructor(scene, onPlayClick, onSndClick) {\n                super(scene);\n                this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0 - 105, 0 - 48, 'Instructions page  ALL ACTIVITY  TITLEs');\n                this._instructionPage.setOrigin(0, 0);\n                this._instructionPage.setInteractive();\n                this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'welcome');\n                this._instructionPageTitle.setScale(0.75);\n                this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\n                this._btnPlay.setInteractive({ cursor: 'pointer' });\n                this._btnPlay.once('pointerup', onPlayClick);\n                setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\n                this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Open the mosque gate by entering\\nthe passcode.\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 30,\n                    \"color\": \"#43425D\",\n                    \"align\": 'center'\n                });\n                this.instrTxt.setLineSpacing(20);\n                this.instrTxt.setOrigin(0.5, 0.5);\n                this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\n                this._btnSoundInstruction.setInteractive({ cursor: 'pointer' });\n                this._btnSoundInstruction.on('pointerup', onSndClick);\n                setupButtonTextureBased(this._btnSoundInstruction, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._instructionPage);\n                this.add(this._instructionPageTitle);\n                this.add(this.instrTxt);\n                this.add(this._btnPlay);\n                this.add(this._btnSoundInstruction);\n            }\n        }\n        screen.InstructionPage = InstructionPage;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class TryAgainWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-106, -48);\n                this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\n                this._bg.setOrigin(0, 0);\n                this._bg.setInteractive();\n                this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\n                this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bg,\n                    this._star,\n                    this._btnBack,\n                    this._btnReplay,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n            }\n            show(score, starScore) {\n                this._star.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._star,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                this.music = this.scene.sound.add(\"Fail - close one\");\n                this.music.play();\n            }\n        }\n        screen.TryAgainWindow = TryAgainWindow;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\n","namespace sh {\r\n    export class App extends Phaser.Game {\r\n\r\n        public static readonly CANVAS_WIDTH: number = 980;\r\n        public static readonly CANVAS_HEIGHT: number = 600;\r\n\r\n        constructor() {\r\n            let config: Phaser.Types.Core.GameConfig = {\r\n                type: Phaser.WEBGL,\r\n                width: App.CANVAS_WIDTH,\r\n                height: App.CANVAS_HEIGHT,\r\n                parent: 'game-container',\r\n                dom: {\r\n                    createContainer: false\r\n                },\r\n                scale: {\r\n                    mode: FitScaleManager.detectBestScaleMode(),\r\n                    autoCenter: Phaser.Scale.CENTER_BOTH\r\n                },\r\n                transparent: true,\r\n                scene: {\r\n                    create: () => {\r\n                        this.scene.add('Boot', sh.scene.Boot, true);\r\n                    }\r\n                }\r\n            };\r\n            super(config);\r\n        }\r\n    }\r\n}\r\n\r\nlet game: sh.App;\r\nwindow.onload = () => {\r\n    game = new sh.App();\r\n};\r\n\r\nlet delayedCalls = [];\r\nfunction delayedCall(delay: number, callback: Function, args?: any[], callbackScope?: any): Phaser.Time.TimerEvent | number {\r\n    let scene = game.scene.getAt(0);\r\n    if (scene) {\r\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\r\n        delayedCalls.push(dc);\r\n        return dc;\r\n    }\r\n    let t = setTimeout(callback, delay);\r\n    delayedCalls.push(t);\r\n    return t;\r\n}\r\nfunction pauseAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = true;\r\n        }\r\n    }\r\n}\r\nfunction resumeAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = false;\r\n        }\r\n    }\r\n}\r\nfunction destroyAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).remove(false);\r\n        } else {\r\n            clearTimeout(dc);\r\n        }\r\n    }\r\n    delayedCalls = [];\r\n}\r\n\r\nfunction setPageBackground(bg: string) {\r\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\r\n}\r\n\r\nfunction setupButton(btn, frame) {\r\n    btn.on('pointerdown', ()=>{btn.setFrame(frame + '_hover' + '0000')});\r\n    btn.on('pointerover', ()=>{btn.setFrame(frame + '_hover' + '0000');game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setFrame(frame + '0000')});\r\n    btn.on('pointerup', ()=>{btn.setFrame(frame + '0000');game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\nfunction setupButtonTextureBased(btn:Phaser.GameObjects.Image, texture, hoverTexture) {\r\n    btn.on('pointerdown', ()=>{btn.setTexture(hoverTexture)});\r\n    btn.on('pointerover', ()=>{btn.setTexture(hoverTexture);game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setTexture(texture)});\r\n    btn.on('pointerup', ()=>{btn.setTexture(texture);game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}","/**\r\n * @author Roman Parada\r\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\r\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\r\n *\r\n * How to use:\r\n * Just call the code line below in Boot scene's init() method of your project:\r\n * new FitScaleManager(this.game).setup();\r\n */\r\nclass FitScaleManager {\r\n\r\n    public static detectBestScaleMode():integer {\r\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\r\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\r\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\r\n    };\r\n\r\n    private static RESIZE_DELAY: number = 500;\r\n\r\n    private game: Phaser.Game;\r\n\r\n    private canvasStyle: CSSStyleDeclaration;\r\n    private phaserScaleManager: Phaser.Scale.ScaleManager;\r\n\r\n    constructor(game: Phaser.Game) {\r\n        this.game = game;\r\n\r\n        this.canvasStyle = this.game.canvas.style;\r\n        this.phaserScaleManager = this.game.scale;\r\n    }\r\n\r\n    /**\r\n     * Just call this method once in Boot scene's init() method\r\n     */\r\n    public setup(): void {\r\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\r\n\r\n        this.overridePhaserTransformMethods();\r\n\r\n        this.onResize();\r\n    }\r\n\r\n    private calculateScale(): number {\r\n        if (game.scale.scaleMode == Phaser.Scale.NONE) return 1;\r\n\r\n        return Math.min(\r\n            window.innerWidth / this.phaserScaleManager.width,\r\n            window.innerHeight / this.phaserScaleManager.height\r\n        );\r\n    }\r\n\r\n    private overridePhaserTransformMethods(): void {\r\n        this.game.scale.transformX = (pageX: number) => {\r\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n        this.game.scale.transformY = (pageY: number) => {\r\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n    }\r\n\r\n    private onResize(): void {\r\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\r\n    }\r\n\r\n    private doResize: () => void = () => {\r\n        let scale: number = this.calculateScale();\r\n\r\n        let newCanvasWidth: number = this.phaserScaleManager.width * scale;\r\n        let newCanvasHeight: number = this.phaserScaleManager.height * scale;\r\n\r\n        this.canvasStyle.width = newCanvasWidth + 'px';\r\n        this.canvasStyle.height = newCanvasHeight + 'px';\r\n\r\n        this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\r\n        this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\r\n    };\r\n}","namespace sh.core {\r\n    export class Gameplay {\r\n\r\n        private totalLettersCount:number = 25;\r\n\r\n        public totalRoundsNum:number = 2;\r\n        public readonly failsNumToLose:number = 3;\r\n        public readonly choicesNumPerRound:number = 5;\r\n\r\n        private currentRound:number = 0;\r\n        private currentLetter:object = null;\r\n        private letters:object[];\r\n\r\n        private correctAnswersCount: number = 0;\r\n        private wrongAnswersCount: number = 0;\r\n        public correctAnswersCountThisRound: number = 0;\r\n        public wrongAnswersCountThisRound: number = 0;\r\n\r\n        private roundsLetter:object[];\r\n        private roundsWrongLetters:object[][];\r\n\r\n        public gridLettersNames:string[];\r\n\r\n        private onComplete:(score:number, starScore:number)=>void;\r\n        private onLose:(score:number, starScore:number)=>void;\r\n\r\n        constructor() {\r\n        }\r\n\r\n        public setupCallbacks(onComplete:(score:number, starScore:number)=>void, onLose:(score:number, starScore:number)=>void):void {\r\n            this.onComplete = onComplete;\r\n            this.onLose = onLose;\r\n        }\r\n\r\n        public calculateScore():number {\r\n            return this.choicesNumPerRound * this.totalRoundsNum - this.wrongAnswersCount;\r\n        }\r\n\r\n        public onLetterChosen():boolean {\r\n            if (this.correctAnswersCountThisRound == this.choicesNumPerRound) {\r\n                this.currentRound++;\r\n                if (this.currentRound >= this.totalRoundsNum) {\r\n                    let score:number = this.calculateScore();\r\n                    this.onComplete(score, score);\r\n                    return true;\r\n                } else {\r\n                    this.nextLetter();\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public nextLetter():void {\r\n            if (this.roundsLetter.length == 0) {\r\n                this.currentLetter = null;\r\n            } else {\r\n                let ind:number = Math.floor(Math.random()*this.roundsLetter.length);\r\n                this.currentLetter = this.roundsLetter[ind];\r\n                this.roundsLetter.splice(ind, 1);\r\n\r\n                this.gridLettersNames = [];\r\n\r\n                let correctLetterName = this.getCorrectLetterName();\r\n                for (let i:number = 0; i < this.choicesNumPerRound; i++) {\r\n                    this.gridLettersNames.push(correctLetterName);\r\n                }\r\n\r\n                let rwl:any = this.roundsWrongLetters[ind];\r\n                this.roundsWrongLetters.splice(ind, 1);\r\n                for (let wl of rwl) {\r\n                    for (let i:number = 0; i < 2; i++) {\r\n                        this.gridLettersNames.push(wl);\r\n                    }\r\n                }\r\n            }\r\n            this.correctAnswersCountThisRound = 0;\r\n            this.wrongAnswersCountThisRound = 0;\r\n        }\r\n\r\n        public getCorrectLetterName():string {\r\n            return this.currentLetter['correctLetterName'];\r\n        }\r\n\r\n        public getCorrectAudioKey():string {\r\n            return this.currentLetter['correctAudioKey'];\r\n        }\r\n\r\n        public onCorrectAnswer(): boolean {\r\n            this.correctAnswersCount++;\r\n            this.correctAnswersCountThisRound++;\r\n\r\n            return this.onLetterChosen();\r\n        }\r\n\r\n        public onWrongAnswer(): boolean {\r\n            this.wrongAnswersCount++;\r\n            this.wrongAnswersCountThisRound++;\r\n\r\n            if (this.wrongAnswersCountThisRound >= this.failsNumToLose) {\r\n                this.onLose(0, 0);\r\n                return true;\r\n            } else {\r\n                this.onLetterChosen();\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCount(): number {\r\n            return this.correctAnswersCount + this.wrongAnswersCount;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCountThisRound(): number {\r\n            return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\r\n        }\r\n\r\n        public isNewRound():boolean {\r\n            return this.getCurrentTotalAnswersCountThisRound() == 0;\r\n        }\r\n\r\n        public isRoundsComplete():boolean {\r\n            return this.getCurrentTotalAnswersCount() / this.choicesNumPerRound >= this.totalRoundsNum;\r\n        }\r\n\r\n        public reset():void {\r\n            let json = game.cache.json.get('gameplay');\r\n            this.letters = json[\"letters\"].slice();\r\n            let rounds = json[\"rounds\"];\r\n\r\n            this.roundsLetter = [];\r\n            this.roundsWrongLetters = [];\r\n\r\n            for (let r of rounds) {\r\n                let l:string = r[\"correctLetter\"];\r\n                for (let i:number = this.letters.length - 1; i >= 0; i--) {\r\n                    if (this.letters[i]['correctLetterName'] == l) {\r\n                        this.roundsLetter.push(this.letters[i]);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                this.roundsWrongLetters.push(r[\"wrongLetters\"]);\r\n            }\r\n\r\n            this.totalRoundsNum = this.roundsLetter.length;\r\n\r\n            this.nextLetter();\r\n\r\n            this.currentRound = 0;\r\n            this.correctAnswersCount = 0;\r\n            this.wrongAnswersCount = 0;\r\n            this.correctAnswersCountThisRound = 0;\r\n            this.wrongAnswersCountThisRound = 0;\r\n        }\r\n    }\r\n}","module sh.scene {\r\n    export class Boot extends Phaser.Scene {\r\n        init() {\r\n            this.game.scale.transformX = (pageX: number) => {\r\n                let offsetLeft: number = 0;\r\n                let parentElement = game.canvas.parentElement;\r\n                while (parentElement) {\r\n                    if (parentElement.offsetLeft) {\r\n                        offsetLeft = parentElement.offsetLeft;\r\n                        break;\r\n                    }\r\n                    parentElement = parentElement.parentElement;\r\n                }\r\n                return (pageX - offsetLeft) * this.game.scale.displayScale.x;\r\n            };\r\n            this.game.scale.transformY = (pageY: number) => {\r\n                let offsetTop: number = 0;\r\n                let parentElement = game.canvas.parentElement;\r\n                while (parentElement) {\r\n                    if (parentElement.offsetTop) {\r\n                        offsetTop = parentElement.offsetTop;\r\n                        break;\r\n                    }\r\n                    parentElement = parentElement.parentElement;\r\n                }\r\n                return (pageY - offsetTop) * this.game.scale.displayScale.y;\r\n            };\r\n        }\r\n\r\n        create() {\r\n            game.scene.remove('Boot');\r\n            game.scene.add('Preloader', sh.scene.Preloader, true);\r\n        }\r\n    }\r\n}","namespace sh.scene {\r\n\r\n    import Gameplay = sh.core.Gameplay;\r\n    import GameplayScreen = sh.screen.GameplayScreen;\r\n\r\n    export class MainScene extends Phaser.Scene {\r\n\r\n        private gameplay:Gameplay;\r\n        private gameplayScreen:GameplayScreen;\r\n\r\n        public create():void {\r\n            this.gameplay = new Gameplay();\r\n\r\n            this.gameplayScreen = new sh.screen.GameplayScreen(this, this.gameplay);\r\n            this.children.add(this.gameplayScreen);\r\n            this.gameplayScreen.showInstructionPage();\r\n        }\r\n    }\r\n}","module sh.scene {\r\n\r\n    export class Preloader extends Phaser.Scene {\r\n\r\n        preload() {\r\n        }\r\n\r\n        create() {\r\n            this.load.json('gameplay', 'assets/json/gameplay.json');\r\n            this.load.pack('preloader', 'assets/pack.json');\r\n\r\n            this.load.on('progress', (value:number) => {\r\n            }, this);\r\n\r\n            this.load.on('complete', () => {\r\n                this.nextScene();\r\n            });\r\n\r\n            this.load.start();\r\n        }\r\n\r\n        private nextScene():void {\r\n            game.scene.remove('Preloader');\r\n            game.scene.add('ScreenMain', sh.scene.MainScene, true);\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class AreYouSureWindow extends Phaser.GameObjects.Container {\r\n\r\n        private _areYouSurePage: Phaser.GameObjects.Image;\r\n        private _btnSureYes: Phaser.GameObjects.Image;\r\n        private _btnSureNo: Phaser.GameObjects.Image;\r\n\r\n        constructor(scene: Phaser.Scene, onYes:()=>void, onNo:()=>void) {\r\n            super(scene);\r\n\r\n            this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0-48, 'Exit warning');\r\n            this._areYouSurePage.setOrigin(0, 0);\r\n            this._areYouSurePage.setInteractive();\r\n\r\n            this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485-50, 'btnYES1');\r\n            this._btnSureYes.setInteractive({cursor: 'pointer'});\r\n            this._btnSureYes.once('pointerup', onYes);\r\n            setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\r\n\r\n            this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485-50, 'btnNO1');\r\n            this._btnSureNo.setInteractive({cursor: 'pointer'});\r\n            this._btnSureNo.once('pointerup', onNo);\r\n            setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\r\n\r\n            this.add(this._areYouSurePage);\r\n            this.add(this._btnSureYes);\r\n            this.add(this._btnSureNo);\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class CompleteWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bgComplete:Phaser.GameObjects.Image;\r\n        _cup:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n        _btnNext:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void, onNext:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-104.5, -48);\r\n\r\n            this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\r\n            this._bgComplete.setOrigin(0, 0);\r\n            this._bgComplete.setInteractive();\r\n            this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\r\n            this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\r\n\r\n            let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bgComplete,\r\n                _CollectedPoints,\r\n                this._cup,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this._btnNext,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n            this._btnNext.setInteractive({cursor: 'pointer'});\r\n            this._btnNext.on('pointerup', ()=>{\r\n                onNext(this._btnNext);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._cup.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._cup,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            // let music = this.scene.sound.add(\"viktory\");\r\n            this.music = this.scene.sound.add(\"Activity completion fantastic\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class DoorsWindow extends Phaser.GameObjects.Container {\r\n\r\n        private _DoorR: Phaser.GameObjects.Image;\r\n        private _DoorL: Phaser.GameObjects.Image;\r\n        private _DoorInside: Phaser.GameObjects.Image;\r\n\r\n        constructor(scene: Phaser.Scene) {\r\n            super(scene);\r\n\r\n            this._DoorR = new Phaser.GameObjects.Image(this.scene, 504.5, 158, 'Door R');\r\n            this._DoorR.setOrigin(0, 0);\r\n            this._DoorL = new Phaser.GameObjects.Image(this.scene, 313.5, 158, 'Door L');\r\n            this._DoorL.setOrigin(0, 0);\r\n            this._DoorInside = new Phaser.GameObjects.Image(this.scene, 313, 158, 'Door Inside');\r\n            this._DoorInside.setOrigin(0, 0);\r\n\r\n            this.add(this._DoorInside);\r\n            this.add(this._DoorR);\r\n            this.add(this._DoorL);\r\n        }\r\n\r\n        private openDoor(door:Phaser.GameObjects.Image, duration:number, def_vertices_no_offset:number[], vertXIndexes:number[], vertYIndexes:number[], vertYSign:number[], tweenDoorValueY:number):void {\r\n            door.visible = false;\r\n\r\n            let dx:number = 100, dy:number = 198;\r\n            let def_vertices:number[] = def_vertices_no_offset.slice();\r\n            for (let i:number = 0; i < def_vertices_no_offset.length; i+=2) {\r\n                def_vertices[i] += dx;\r\n            }\r\n            for (let i:number = 1; i < def_vertices_no_offset.length; i+=2) {\r\n                def_vertices[i] += dy;\r\n            }\r\n            let mesh:Phaser.GameObjects.Mesh = this.scene.make.mesh({\r\n                key: door.texture.key,\r\n                x: door.x,\r\n                y: door.y,\r\n                vertices: def_vertices.slice(),\r\n                uv: [\r\n                    /*  U   |   V  */\r\n                    /* ----------- */\r\n                    0,      0,\r\n                    0,      1,\r\n                    1,      1,\r\n\r\n                    0,      0,\r\n                    1,      1,\r\n                    1,      0\r\n                ]\r\n            });\r\n            mesh[\"def_vertices\"] = def_vertices;\r\n            door[\"tweenDoorValueX\"] = mesh[\"def_vertices\"][vertXIndexes[0]];\r\n            door[\"tweenDoorValueY\"] = 0;\r\n            this.scene.tweens.add({\r\n                targets: door,\r\n                tweenDoorValueX: -def_vertices_no_offset[vertXIndexes[0]] * 0.6 + dx,\r\n                tweenDoorValueY: tweenDoorValueY,\r\n                duration: duration,\r\n                ease: Phaser.Math.Easing.Linear,\r\n                onUpdate:()=>{\r\n                    for (let k:number = 0; k < vertYIndexes.length; k++) {\r\n                        mesh.vertices[vertYIndexes[k]] = mesh[\"def_vertices\"][vertYIndexes[k]] + vertYSign[k] * door[\"tweenDoorValueY\"];\r\n                    }\r\n                    for (let i of vertXIndexes) {\r\n                        mesh.vertices[i] = door[\"tweenDoorValueX\"];\r\n                    }\r\n                }\r\n            });\r\n            this.add(mesh);\r\n\r\n            this.scene.sound.add('Door opening').play();\r\n        }\r\n\r\n        public open(onComplete:()=>void):void {\r\n            let duration:number = 2000;\r\n            let tweenDoorValueY:number = 50;\r\n            this.openDoor(this._DoorR, duration, [\r\n                /*  X   |   Y  */\r\n                /* ----------- */\r\n                -this._DoorR.width/2, -this._DoorR.height/2,\r\n                -this._DoorR.width/2, this._DoorR.height/2,\r\n                this._DoorR.width/2, this._DoorR.height/2,\r\n                -this._DoorR.width/2, -this._DoorR.height/2,\r\n                this._DoorR.width/2, this._DoorR.height/2,\r\n                this._DoorR.width/2, -this._DoorR.height/2\r\n            ], [0, 2, 6], [1, 3, 7], [-1, 1, -1], tweenDoorValueY);\r\n            this.openDoor(this._DoorL, duration, [\r\n                /*  X   |   Y  */\r\n                /* ----------- */\r\n                -this._DoorL.width/2, -this._DoorL.height/2,\r\n                -this._DoorL.width/2, this._DoorL.height/2,\r\n                this._DoorL.width/2, this._DoorL.height/2,\r\n                -this._DoorL.width/2, -this._DoorL.height/2,\r\n                this._DoorL.width/2, this._DoorL.height/2,\r\n                this._DoorL.width/2, -this._DoorL.height/2\r\n            ], [4, 8, 10], [5, 9, 11], [-1, -1, 1], -tweenDoorValueY);\r\n            delayedCall(duration, onComplete);\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n\r\n    import Gameplay = sh.core.Gameplay;\r\n\r\n    export class GameplayScreen extends Phaser.GameObjects.Container {\r\n        private rows:number = 5;\r\n        private cols:number = 5;\r\n\r\n        _gameStage: Phaser.GameObjects.Image;\r\n        _btnSound: Phaser.GameObjects.Image;\r\n        _btnClose: Phaser.GameObjects.Image;\r\n\r\n        private gameplayContainer: Phaser.GameObjects.Container;\r\n\r\n        grid: Phaser.GameObjects.Container[][];\r\n        crescentMoons:Phaser.GameObjects.Image[];\r\n\r\n        gameplay: Gameplay;\r\n        targetLetterLabel:Phaser.GameObjects.Image;\r\n\r\n        private bgMusic:any = null;\r\n\r\n        private doorsWindow:DoorsWindow;\r\n\r\n        constructor(scene: Phaser.Scene, gameplay: Gameplay) {\r\n            super(scene);\r\n            this.gameplay = gameplay;window[\"t\"]=this;\r\n        }\r\n\r\n        public showGameplay(): void {\r\n            setPageBackground(\"bg-australia\");\r\n\r\n            this.bgMusic = this.scene.sound.add(\"B-g ambience\");\r\n            this.bgMusic.play();\r\n            this.bgMusic.loop = true;\r\n\r\n            this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, '3 Letter Grid');\r\n            this._gameStage.setOrigin(0.485, 0.48);\r\n            this._gameStage.setInteractive();\r\n            this._btnSound = new Phaser.GameObjects.Image(this.scene, 160-105, 100-50, 'Sound');\r\n            this._btnSound.setInteractive({cursor: 'pointer'});\r\n            setupButtonTextureBased(this._btnSound, 'Sound','Sound HOVER EFFECT');\r\n            this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025-105, 100-50,'x Button');\r\n            this._btnClose.setInteractive({cursor: 'pointer'});\r\n            setupButtonTextureBased(this._btnClose, 'x Button','x Button HOVER EFFECT');\r\n\r\n            this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\r\n            this.addAt(this.gameplayContainer, 0);\r\n\r\n            this.targetLetterLabel = new Phaser.GameObjects.Image(this.scene, 590, 90, null);\r\n            this.targetLetterLabel.tint = Math.round(0x000000 * 0.9);\r\n\r\n            this.doorsWindow = new DoorsWindow(this.scene);\r\n\r\n            this.gameplayContainer.add([\r\n                this._gameStage,\r\n                this.doorsWindow,\r\n                this._btnSound,\r\n                this._btnClose,\r\n                this.targetLetterLabel\r\n            ]);\r\n\r\n            this.gameplay.reset();\r\n            this.createGrid();\r\n            this.createCrescentMoons();\r\n            this.createInput();\r\n            this.showOutGrid();\r\n            this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow);\r\n        }\r\n\r\n        private sfxOpen = null;\r\n        public showOutGrid():void {\r\n            this.setInputEnabled(false);\r\n\r\n            let delay:number = 700;\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c = this.grid[i][j];\r\n                    c.setScale(0);\r\n                    this.scene.tweens.add({\r\n                        targets: c,\r\n                        \"scale\": 1,\r\n                        duration: 300,\r\n                        delay: delay\r\n                    });\r\n                }\r\n            }\r\n\r\n            delayedCall(delay, ()=>{\r\n                this.sfxOpen = this.scene.sound.add(\"open\");\r\n                this.sfxOpen.play();\r\n            });\r\n\r\n            this.targetLetterLabel.visible = false;\r\n            this.resetCrescentMoons();\r\n            this.randomizeGrid();\r\n\r\n            delayedCall(1200, ()=>{\r\n                this.targetLetterLabel.visible = true;\r\n                this.updateClickLetterTargetLabel();\r\n\r\n                if (this.gameplay.isNewRound()) {\r\n                    if (!this.gameplay.isRoundsComplete()) {\r\n                        this.playCorrectAudio();\r\n                        delayedCall(2000, ()=>{\r\n                            this.setInputEnabled(true);\r\n                        });\r\n                    }\r\n                } else {\r\n                    this.setInputEnabled(true);\r\n                }\r\n            });\r\n        }\r\n\r\n        private sfxClose = null;\r\n        private showInGrid(showOut:boolean):void {\r\n            this.setInputEnabled(false);\r\n\r\n            let delay:number = 700;\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c = this.grid[i][j];\r\n                    this.scene.tweens.add({\r\n                        targets: c,\r\n                        \"scale\": 0,\r\n                        duration: 300,\r\n                        delay: delay,\r\n                        onComplete:()=>{\r\n                            c[\"bg\"].setTexture('rr_def');\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            delayedCall(delay, ()=>{\r\n                this.sfxClose = this.scene.sound.add(\"close\");\r\n                this.sfxClose.play();\r\n            });\r\n\r\n            if (showOut) {\r\n                delayedCall(1000, ()=>{\r\n                    this.showOutGrid();\r\n                });\r\n            }\r\n        }\r\n\r\n        public createInput(): void {\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c = this.grid[i][j];\r\n                    c[\"bg\"].on('pointerup', () => {\r\n                        this.playBtnClickAnim(c);\r\n                        c[\"bg\"].disableInteractive();\r\n\r\n                        let l = c[\"letter\"];\r\n                        if (l && l.texture.key == this.gameplay.getCorrectLetterName()) {\r\n                            c[\"bg\"].setTexture('rr_active');\r\n                            let completed:boolean = this.onCorrectAnswer();\r\n                            if (!completed) {\r\n                                if (this.gameplay.isNewRound()) {\r\n                                    this.showInGrid(true);\r\n                                }\r\n                            } else {\r\n                                this.showInGrid(false);\r\n                            }\r\n                        } else {\r\n                            c[\"bg\"].setTexture('rr_wrong');\r\n                            let lost:boolean = this.onWrongAnswer();\r\n                            if (!lost) {\r\n                                if (this.gameplay.isNewRound()) {\r\n                                    this.showInGrid(true);\r\n                                }\r\n                            } else {\r\n                                this.showInGrid(false);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n\r\n\r\n            this._btnSound.on('pointerup', () => {\r\n                this.playBtnClickAnim(this._btnSound);\r\n\r\n                this.onSoundClick();\r\n            });\r\n\r\n            this._btnClose.on('pointerup', () => {\r\n                this.playBtnClickAnim(this._btnClose);\r\n\r\n                this.onCloseClick();\r\n            });\r\n        }\r\n\r\n        public createGrid():void {\r\n            let startX:number = 355;\r\n            let startY:number = 215;\r\n            let dx:number = 76;\r\n            let dy:number = 71;\r\n            this.grid = [];\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                let arr = [];\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c:Phaser.GameObjects.Container = new Phaser.GameObjects.Container(this.scene, startX+i*dx, startY+j*dy);\r\n                    this.gameplayContainer.add(c);\r\n                    c[\"bg\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, 'rr_def');\r\n                    c.add(c[\"bg\"]);\r\n                    c[\"letter\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, null);\r\n                    c[\"letter\"][\"rectContainer\"] = c;\r\n                    c.add(c[\"letter\"]);\r\n                    c[\"letter\"].tint = Math.round(0x000000 * 0.9);\r\n                    arr.push(c);\r\n                }\r\n                this.grid.push(arr);\r\n            }\r\n        }\r\n\r\n        private randomizeGrid():void {\r\n            let gridLettersNames:string[] = null;\r\n            let minTriesGrid:string[] = null;\r\n            let minTries:number = Number.MAX_VALUE;\r\n            let triesNum:number = 0;\r\n            let sim:number = Number.MAX_VALUE;\r\n            do {\r\n                triesNum++;\r\n\r\n                gridLettersNames = Phaser.Utils.Array.Shuffle(this.gameplay.gridLettersNames.slice());\r\n                sim = this.checkRandomizationSimilarity(gridLettersNames);\r\n\r\n                if (sim < minTries) {\r\n                    minTries = sim;\r\n                    minTriesGrid = gridLettersNames;\r\n                }\r\n\r\n            } while (sim > 0 && triesNum < 100);\r\n\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let l:Phaser.GameObjects.Image = this.grid[i][j][\"letter\"];\r\n                    let rnd:any = minTriesGrid.shift();\r\n                    l.setTexture(rnd);\r\n                }\r\n            }\r\n        }\r\n\r\n        private checkRandomizationSimilarity(gridLettersNames:string[]):number {\r\n            let similarity:number = 0;\r\n            for (let i:number = 0; i < gridLettersNames.length - 1; i++) {\r\n                if (gridLettersNames[i] == gridLettersNames[i+1]) {\r\n                    similarity++;\r\n                }\r\n            }\r\n            for (let i:number = 0; i < gridLettersNames.length - this.rows; i++) {\r\n                if (i+this.rows < gridLettersNames.length && gridLettersNames[i] == gridLettersNames[i+this.rows]) {\r\n                    similarity++;\r\n                }\r\n            }\r\n            // console.log(\"sim: \",similarity);\r\n            return similarity;\r\n        }\r\n\r\n        public updateClickLetterTargetLabel():void {\r\n            this.targetLetterLabel.setTexture(this.gameplay.getCorrectLetterName());\r\n        }\r\n\r\n        public createCrescentMoons():void {\r\n            this.crescentMoons = [];\r\n            let dy:number = 61;\r\n            for (let i:number = 0; i < this.gameplay.choicesNumPerRound; i++) {\r\n                let cm = new Phaser.GameObjects.Image(this.scene, 179, 261 + i * dy, 'crescent_moon_def');\r\n                this.crescentMoons.push(cm);\r\n                this.gameplayContainer.add(cm);\r\n            }\r\n        }\r\n\r\n        public resetCrescentMoons():void {\r\n            for (let i:number = 0; i < this.crescentMoons.length; i++) {\r\n                this.setMoonsActive(i, false);\r\n            }\r\n        }\r\n\r\n        public setMoonsActive(index:number, active:boolean):void {\r\n            this.crescentMoons[index].setTexture(active ? 'crescent_moon_active' : 'crescent_moon_def')\r\n        }\r\n\r\n        private soundGooseYes = null;\r\n        public onCorrectAnswer(): boolean {\r\n            this.setMoonsActive(this.gameplay.correctAnswersCountThisRound, true);\r\n\r\n            let completed:boolean = this.gameplay.onCorrectAnswer();\r\n\r\n            this.soundGooseYes = this.scene.sound.add(\"Correct click\");\r\n            this.soundGooseYes.play();\r\n\r\n            return completed;\r\n        }\r\n\r\n        private soundGooseNo = null;\r\n        public onWrongAnswer(): boolean {\r\n            let lost:boolean = this.gameplay.onWrongAnswer();\r\n\r\n            this.soundGooseNo = this.scene.sound.add(\"Incorrect click\");\r\n            this.soundGooseNo.play();\r\n\r\n            return lost;\r\n        }\r\n\r\n        private correctAudio = null;\r\n        private playCorrectAudio():void {\r\n            if (this.correctAudio) {\r\n                this.correctAudio.stop();\r\n            }\r\n            try {\r\n                this.correctAudio = this.scene.sound.add('translate_click_on');\r\n                this.correctAudio.play();\r\n                if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\r\n                    this.correctAudio.pause();\r\n                }\r\n                delayedCall(750, ()=>{\r\n                    this.correctAudio = this.scene.sound.add(this.gameplay.getCorrectAudioKey());\r\n                    this.correctAudio.play();\r\n                    if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\r\n                        this.correctAudio.pause();\r\n                    }\r\n                });\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n        public onSoundClick(): void {\r\n            this.playCorrectAudio();\r\n        }\r\n\r\n        public onCloseClick(): void {\r\n            this.showAreYouSurePage();\r\n            this.scene.sound.add('warning page pop up sfx').play();\r\n        }\r\n\r\n        private playBtnClickAnim(target): void {\r\n            target.scaleX = target.scaleY = 1;\r\n            this.scene.tweens.add({\r\n                targets: target,\r\n                \"scaleX\": 0.9,\r\n                \"scaleY\": 0.9,\r\n                duration: 100,\r\n                yoyo: true\r\n            });\r\n        }\r\n\r\n        private wfsnd = null;\r\n        private instructionPage: InstructionPage;\r\n        public showInstructionPage(): void {\r\n            setPageBackground(\"bg-blue\");\r\n\r\n            let playInstructionSound:()=>void = ()=>{\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n                this.wfsnd = this.scene.sound.add(\"Unlock the Gate Open the mosque gate by entering the passcode.\");\r\n                this.wfsnd.play();\r\n            };\r\n\r\n            this.instructionPage = new InstructionPage(this.scene, (target) => {\r\n                this.playBtnClickAnim(target);\r\n                this.remove(this.instructionPage);\r\n                this.showGameplay();\r\n\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n            },(target) => {\r\n                this.playBtnClickAnim(target);\r\n                playInstructionSound();\r\n            });\r\n            this.add(this.instructionPage);\r\n            playInstructionSound();\r\n        }\r\n\r\n        private areYouSureWindow:AreYouSureWindow;\r\n        public showAreYouSurePage(): void {\r\n            pauseAllDelayedCalls();\r\n            setPageBackground(\"bg-blue\");\r\n\r\n            this.pauseSounds();\r\n\r\n            this.areYouSureWindow = new AreYouSureWindow(this.scene, ()=> {\r\n                this.remove(this.areYouSureWindow);\r\n                this.destroyGameplay();\r\n                this.showInstructionPage();\r\n            },()=> {\r\n                this.remove(this.areYouSureWindow);\r\n                this.unpauseSounds();\r\n                resumeAllDelayedCalls();\r\n                setPageBackground(\"bg-australia\");\r\n            });\r\n            this.add(this.areYouSureWindow);\r\n        }\r\n\r\n        private sfxCallToPrayer = null;\r\n\r\n        public showCompleteWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let completeWindow: CompleteWindow = new CompleteWindow(this.scene, (target) => {\r\n                this.playBtnClickAnim(target);\r\n            }, (target) => {\r\n                this.playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(completeWindow);\r\n                this.showInstructionPage();\r\n            }, (target) => {\r\n                this.playBtnClickAnim(target);\r\n            });\r\n            this.setInputEnabled(false);\r\n\r\n            delayedCall(1500, () => {\r\n                this.bgMusic.stop();\r\n\r\n                this.doorsWindow.open(()=>{\r\n                    this.sfxCallToPrayer = this.scene.sound.add(\"Call to prayer\");\r\n                    this.sfxCallToPrayer.play();\r\n\r\n                    delayedCall(6000, () => {\r\n                        setPageBackground(\"bg-blue\");\r\n\r\n                        this.add(completeWindow);\r\n                        completeWindow.show(score, starScore);\r\n                    });\r\n                });\r\n            });\r\n        };\r\n\r\n        public showLoseWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let tryAgainWindow: TryAgainWindow = new TryAgainWindow(this.scene, (target) => {\r\n                this.playBtnClickAnim(target);\r\n            }, (target) => {\r\n                this.playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(tryAgainWindow);\r\n                this.showInstructionPage();\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(750, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(tryAgainWindow);\r\n                tryAgainWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public setInputEnabled(enabled: boolean): void {\r\n            if (enabled) {\r\n                for (let i:number = 0; i < this.rows; i++) {\r\n                    for (let j:number = 0; j < this.cols; j++) {\r\n                        this.grid[i][j][\"bg\"].setInteractive({cursor: 'pointer'});\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i:number = 0; i < this.rows; i++) {\r\n                    for (let j:number = 0; j < this.cols; j++) {\r\n                        this.grid[i][j][\"bg\"].disableInteractive();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public pauseSounds():void {\r\n            this.scene.sound.pauseAll();\r\n        }\r\n\r\n        public unpauseSounds():void {\r\n            this.scene.sound.resumeAll();\r\n        }\r\n\r\n        public destroyGameplay():void {\r\n            this.setInputEnabled(false);\r\n            this.remove(this.gameplayContainer);\r\n            destroyAllDelayedCalls();\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class InstructionPage extends Phaser.GameObjects.Container {\r\n\r\n        private _instructionPage: Phaser.GameObjects.Image;\r\n        private _instructionPageTitle: Phaser.GameObjects.Image;\r\n        private _btnPlay: Phaser.GameObjects.Image;\r\n        private _btnSoundInstruction: Phaser.GameObjects.Image;\r\n        private instrTxt: Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onPlayClick:(target)=>void, onSndClick:(target)=>void) {\r\n            super(scene);\r\n\r\n            this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0-105, 0-48, 'Instructions page  ALL ACTIVITY  TITLEs');\r\n            this._instructionPage.setOrigin(0, 0);\r\n            this._instructionPage.setInteractive();\r\n\r\n            this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'welcome');\r\n            this._instructionPageTitle.setScale(0.75);\r\n\r\n            this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\r\n            this._btnPlay.setInteractive({cursor: 'pointer'});\r\n            this._btnPlay.once('pointerup', onPlayClick);\r\n            setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\r\n\r\n            this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Open the mosque gate by entering\\nthe passcode.\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 30,\r\n                \"color\": \"#43425D\",\r\n                \"align\": 'center'\r\n            });\r\n            this.instrTxt.setLineSpacing(20);\r\n            this.instrTxt.setOrigin(0.5, 0.5);\r\n\r\n            this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\r\n            this._btnSoundInstruction.setInteractive({cursor: 'pointer'});\r\n            this._btnSoundInstruction.on('pointerup', onSndClick);\r\n            setupButtonTextureBased(this._btnSoundInstruction, 'Sound','Sound HOVER EFFECT');\r\n\r\n            this.add(this._instructionPage);\r\n            this.add(this._instructionPageTitle);\r\n            this.add(this.instrTxt);\r\n            this.add(this._btnPlay);\r\n            this.add(this._btnSoundInstruction);\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class TryAgainWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bg:Phaser.GameObjects.Image;\r\n        _star:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-106, -48);\r\n\r\n            this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\r\n            this._bg.setOrigin(0, 0);\r\n            this._bg.setInteractive();\r\n            this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bg,\r\n                this._star,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._star.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._star,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            this.music = this.scene.sound.add(\"Fail - close one\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}"]}