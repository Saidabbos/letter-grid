{"version":3,"sources":["main.js","../ts/src/App.ts","../ts/src/screen/TryAgainWindow.ts","../ts/src/FitScaleManager.ts","../ts/src/core/Gameplay.ts","../ts/src/scene/Boot.ts","../ts/src/scene/MainScene.ts","../ts/src/scene/Preloader.ts","../ts/src/screen/AreYouSureWindow.ts","../ts/src/screen/CompleteWindow.ts","../ts/src/screen/DoorsWindow.ts","../ts/src/screen/GameplayScreen.ts","../ts/src/screen/InstructionPage.ts"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","minLen","_arrayLikeToArray","toString","call","slice","name","from","test","arr","len","arr2","_classCallCheck","instance","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Date","getPrototypeOf","game","sh","App","_Phaser$Game","Phaser","Game","_super","_this","config","type","WEBGL","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","scale","mode","FitScaleManager","detectBestScaleMode","autoCenter","Scale","CENTER_BOTH","transparent","scene","add","Boot","window","onload","delayedCalls","delayedCall","delay","callback","args","callbackScope","getAt","dc","time","push","t","setTimeout","pauseAllDelayedCalls","_step","_iterator","Time","TimerEvent","paused","resumeAllDelayedCalls","_step2","_iterator2","destroyAllDelayedCalls","_step3","_iterator3","remove","clearTimeout","setPageBackground","bg","document","querySelector","style","backgroundImage","setupButton","btn","frame","on","setFrame","sound","play","setupButtonTextureBased","texture","hoverTexture","setTexture","_this2","doResize","calculateScale","newCanvasWidth","phaserScaleManager","newCanvasHeight","canvasStyle","marginLeft","innerWidth","marginTop","innerHeight","canvas","addListener","Events","RESIZE","onResize","overridePhaserTransformMethods","scaleMode","NONE","Math","min","_this3","transformX","pageX","parseInt","split","transformY","pageY","RESIZE_DELAY","iOS","navigator","platform","isAndroid","userAgent","toLowerCase","indexOf","FIT","core","Gameplay","totalLettersCount","totalRoundsNum","failsNumToLose","choicesNumPerRound","currentRound","currentLetter","correctAnswersCount","wrongAnswersCount","correctAnswersCountThisRound","wrongAnswersCountThisRound","onComplete","onLose","score","calculateScore","nextLetter","roundsLetter","shift","gridLettersNames","correctLetterName","getCorrectLetterName","_step4","_iterator4","roundsWrongLetters","wl","onLetterChosen","getCurrentTotalAnswersCountThisRound","getCurrentTotalAnswersCount","json","cache","get","letters","rounds","_step5","_iterator5","r","l","_Phaser$Scene","Scene","_super2","setup","Preloader","MainScene","_Phaser$Scene2","_super3","gameplay","gameplayScreen","screen","GameplayScreen","children","showInstructionPage","_Phaser$Scene3","_super4","_this4","load","pack","nextScene","start","AreYouSureWindow","_Phaser$GameObjects$C","GameObjects","Container","_super5","onYes","onNo","_this5","_areYouSurePage","Image","setOrigin","setInteractive","_btnSureYes","cursor","once","_btnSureNo","CompleteWindow","_Phaser$GameObjects$C2","_super6","onBack","onReplay","onNext","_this6","music","setPosition","_bgComplete","_cup","_btnBack","_btnReplay","_btnNext","_CollectedPoints","totalScoreTxt","text","fontFamily","fontSize","color","align","stroke","strokeThickness","grd","context","createLinearGradient","addColorStop","setFill","starScoreTxt","stop","starScore","tweens","targets","duration","ease","Easing","Back","Out","String","DoorsWindow","_Phaser$GameObjects$C3","_super7","_this7","_DoorR","_DoorL","_DoorInside","door","def_vertices_no_offset","vertXIndexes","vertYIndexes","vertYSign","tweenDoorValueY","visible","def_vertices","mesh","make","x","y","vertices","uv","tweenDoorValueX","Linear","onUpdate","k","_step6","_iterator6","openDoor","_Phaser$GameObjects$C4","_super8","_this8","rows","cols","bgMusic","sfxOpen","sfxClose","soundGooseYes","soundGooseNo","correctAudio","wfsnd","sfxCallToPrayer","showCompleteWindow","completeWindow","playBtnClickAnim","destroyGameplay","setInputEnabled","doorsWindow","open","show","showLoseWindow","tryAgainWindow","TryAgainWindow","loop","_gameStage","_btnSound","_btnClose","gameplayContainer","addAt","targetLetterLabel","tint","round","reset","createGrid","createCrescentMoons","createInput","showOutGrid","setupCallbacks","_this9","j","c","grid","setScale","resetCrescentMoons","randomizeGrid","updateClickLetterTargetLabel","isNewRound","isRoundsComplete","playCorrectAudio","showOut","_this10","_loop","_this11","_loop2","disableInteractive","onCorrectAnswer","showInGrid","onWrongAnswer","onSoundClick","onCloseClick","minTriesGrid","minTries","Number","MAX_VALUE","triesNum","sim","Utils","Shuffle","checkRandomizationSimilarity","rnd","similarity","crescentMoons","cm","setMoonsActive","index","active","completed","lost","_this12","areYouSureWindow","parentContainer","pause","getCorrectAudioKey","console","log","showAreYouSurePage","scaleX","scaleY","yoyo","_this13","playInstructionSound","instructionPage","InstructionPage","showGameplay","_this14","pauseSounds","unpauseSounds","enabled","pauseAll","resumeAll","_Phaser$GameObjects$C5","_super9","onPlayClick","onSndClick","_this15","_instructionPage","_instructionPageTitle","_btnPlay","instrTxt","setLineSpacing","_btnSoundInstruction","_Phaser$GameObjects$C6","_super10","_this16","_bg","_star"],"mappings":"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","file":"main.js","sourcesContent":["var sh;\n(function (sh) {\n    class App extends Phaser.Game {\n        constructor() {\n            let config = {\n                type: Phaser.WEBGL,\n                width: App.CANVAS_WIDTH,\n                height: App.CANVAS_HEIGHT,\n                scale: {\n                    mode: FitScaleManager.detectBestScaleMode(),\n                    autoCenter: Phaser.Scale.CENTER_BOTH\n                },\n                transparent: true,\n                scene: {\n                    create: () => {\n                        this.scene.add('Boot', sh.scene.Boot, true);\n                    }\n                }\n            };\n            super(config);\n        }\n    }\n    App.CANVAS_WIDTH = 980;\n    App.CANVAS_HEIGHT = 600;\n    sh.App = App;\n})(sh || (sh = {}));\nlet game;\nwindow.onload = () => {\n    game = new sh.App();\n};\nlet delayedCalls = [];\nfunction delayedCall(delay, callback, args, callbackScope) {\n    let scene = game.scene.getAt(0);\n    if (scene) {\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\n        delayedCalls.push(dc);\n        return dc;\n    }\n    let t = setTimeout(callback, delay);\n    delayedCalls.push(t);\n    return t;\n}\nfunction pauseAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = true;\n        }\n    }\n}\nfunction resumeAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = false;\n        }\n    }\n}\nfunction destroyAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.remove(false);\n        }\n        else {\n            clearTimeout(dc);\n        }\n    }\n    delayedCalls = [];\n}\nfunction setPageBackground(bg) {\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\n}\nfunction setupButton(btn, frame) {\n    btn.on('pointerdown', () => { btn.setFrame(frame + '_hover' + '0000'); });\n    btn.on('pointerover', () => { btn.setFrame(frame + '_hover' + '0000'); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setFrame(frame + '0000'); });\n    btn.on('pointerup', () => { btn.setFrame(frame + '0000'); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction setupButtonTextureBased(btn, texture, hoverTexture) {\n    btn.on('pointerdown', () => { btn.setTexture(hoverTexture); });\n    btn.on('pointerover', () => { btn.setTexture(hoverTexture); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setTexture(texture); });\n    btn.on('pointerup', () => { btn.setTexture(texture); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\n/**\n * @author Roman Parada\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\n *\n * How to use:\n * Just call the code line below in Boot scene's init() method of your project:\n * new FitScaleManager(this.game).setup();\n */\nclass FitScaleManager {\n    constructor(game) {\n        this.doResize = () => {\n            let scale = this.calculateScale();\n            let newCanvasWidth = this.phaserScaleManager.width * scale;\n            let newCanvasHeight = this.phaserScaleManager.height * scale;\n            this.canvasStyle.width = newCanvasWidth + 'px';\n            this.canvasStyle.height = newCanvasHeight + 'px';\n            this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\n            this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\n        };\n        this.game = game;\n        this.canvasStyle = this.game.canvas.style;\n        this.phaserScaleManager = this.game.scale;\n    }\n    static detectBestScaleMode() {\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\n    }\n    ;\n    /**\n     * Just call this method once in Boot scene's init() method\n     */\n    setup() {\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\n        this.overridePhaserTransformMethods();\n        this.onResize();\n    }\n    calculateScale() {\n        if (game.scale.scaleMode == Phaser.Scale.NONE)\n            return 1;\n        return Math.min(window.innerWidth / this.phaserScaleManager.width, window.innerHeight / this.phaserScaleManager.height);\n    }\n    overridePhaserTransformMethods() {\n        this.game.scale.transformX = (pageX) => {\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\n        };\n        this.game.scale.transformY = (pageY) => {\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\n        };\n    }\n    onResize() {\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\n    }\n}\nFitScaleManager.RESIZE_DELAY = 500;\nvar sh;\n(function (sh) {\n    var core;\n    (function (core) {\n        class Gameplay {\n            constructor() {\n                this.totalLettersCount = 25;\n                this.totalRoundsNum = 2;\n                this.failsNumToLose = 3;\n                this.choicesNumPerRound = 5;\n                this.currentRound = 0;\n                this.currentLetter = null;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n            setupCallbacks(onComplete, onLose) {\n                this.onComplete = onComplete;\n                this.onLose = onLose;\n            }\n            calculateScore() {\n                return this.choicesNumPerRound * this.totalRoundsNum - this.wrongAnswersCount;\n            }\n            onLetterChosen() {\n                if (this.correctAnswersCountThisRound == this.choicesNumPerRound) {\n                    this.currentRound++;\n                    if (this.currentRound >= this.totalRoundsNum) {\n                        let score = this.calculateScore();\n                        this.onComplete(score, score);\n                        return true;\n                    }\n                    else {\n                        this.nextLetter();\n                    }\n                }\n                return false;\n            }\n            nextLetter() {\n                if (this.roundsLetter.length == 0) {\n                    this.currentLetter = null;\n                }\n                else {\n                    this.currentLetter = this.roundsLetter.shift();\n                    this.gridLettersNames = [];\n                    let correctLetterName = this.getCorrectLetterName();\n                    for (let i = 0; i < this.choicesNumPerRound; i++) {\n                        this.gridLettersNames.push(correctLetterName);\n                    }\n                    let rwl = this.roundsWrongLetters.shift();\n                    for (let wl of rwl) {\n                        for (let i = 0; i < 2; i++) {\n                            this.gridLettersNames.push(wl);\n                        }\n                    }\n                }\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n            getCorrectLetterName() {\n                return this.currentLetter['correctLetterName'];\n            }\n            getCorrectAudioKey() {\n                return this.currentLetter['correctAudioKey'];\n            }\n            onCorrectAnswer() {\n                this.correctAnswersCount++;\n                this.correctAnswersCountThisRound++;\n                return this.onLetterChosen();\n            }\n            onWrongAnswer() {\n                this.wrongAnswersCount++;\n                this.wrongAnswersCountThisRound++;\n                if (this.wrongAnswersCountThisRound >= this.failsNumToLose) {\n                    this.onLose(0, 0);\n                    return true;\n                }\n                else {\n                    this.onLetterChosen();\n                }\n                return false;\n            }\n            getCurrentTotalAnswersCount() {\n                return this.correctAnswersCount + this.wrongAnswersCount;\n            }\n            getCurrentTotalAnswersCountThisRound() {\n                return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\n            }\n            isNewRound() {\n                return this.getCurrentTotalAnswersCountThisRound() == 0;\n            }\n            isRoundsComplete() {\n                return this.getCurrentTotalAnswersCount() / this.choicesNumPerRound >= this.totalRoundsNum;\n            }\n            reset() {\n                let json = game.cache.json.get('gameplay');\n                this.letters = json[\"letters\"].slice();\n                let rounds = json[\"rounds\"];\n                this.roundsLetter = [];\n                this.roundsWrongLetters = [];\n                for (let r of rounds) {\n                    let l = r[\"correctLetter\"];\n                    for (let i = this.letters.length - 1; i >= 0; i--) {\n                        if (this.letters[i]['correctLetterName'] == l) {\n                            this.roundsLetter.push(this.letters[i]);\n                            break;\n                        }\n                    }\n                    this.roundsWrongLetters.push(r[\"wrongLetters\"]);\n                }\n                this.totalRoundsNum = this.roundsLetter.length;\n                this.nextLetter();\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n        }\n        core.Gameplay = Gameplay;\n    })(core = sh.core || (sh.core = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var scene;\n    (function (scene) {\n        class Boot extends Phaser.Scene {\n            init() {\n                new FitScaleManager(this.game).setup();\n            }\n            create() {\n                game.scene.remove('Boot');\n                game.scene.add('Preloader', sh.scene.Preloader, true);\n            }\n        }\n        scene.Boot = Boot;\n    })(scene = sh.scene || (sh.scene = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var scene;\n    (function (scene) {\n        var Gameplay = sh.core.Gameplay;\n        class MainScene extends Phaser.Scene {\n            create() {\n                this.gameplay = new Gameplay();\n                this.gameplayScreen = new sh.screen.GameplayScreen(this, this.gameplay);\n                this.children.add(this.gameplayScreen);\n                this.gameplayScreen.showInstructionPage();\n            }\n        }\n        scene.MainScene = MainScene;\n    })(scene = sh.scene || (sh.scene = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var scene;\n    (function (scene) {\n        class Preloader extends Phaser.Scene {\n            preload() {\n            }\n            create() {\n                this.load.json('gameplay', 'assets/json/gameplay.json');\n                this.load.pack('preloader', 'assets/pack.json');\n                this.load.on('progress', (value) => {\n                }, this);\n                this.load.on('complete', () => {\n                    this.nextScene();\n                });\n                this.load.start();\n            }\n            nextScene() {\n                game.scene.remove('Preloader');\n                game.scene.add('ScreenMain', sh.scene.MainScene, true);\n            }\n        }\n        scene.Preloader = Preloader;\n    })(scene = sh.scene || (sh.scene = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class AreYouSureWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onYes, onNo) {\n                super(scene);\n                this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0 - 48, 'Exit warning');\n                this._areYouSurePage.setOrigin(0, 0);\n                this._areYouSurePage.setInteractive();\n                this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485 - 50, 'btnYES1');\n                this._btnSureYes.setInteractive({ cursor: 'pointer' });\n                this._btnSureYes.once('pointerup', onYes);\n                setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\n                this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485 - 50, 'btnNO1');\n                this._btnSureNo.setInteractive({ cursor: 'pointer' });\n                this._btnSureNo.once('pointerup', onNo);\n                setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\n                this.add(this._areYouSurePage);\n                this.add(this._btnSureYes);\n                this.add(this._btnSureNo);\n            }\n        }\n        screen.AreYouSureWindow = AreYouSureWindow;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class CompleteWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay, onNext) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-104.5, -48);\n                this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\n                this._bgComplete.setOrigin(0, 0);\n                this._bgComplete.setInteractive();\n                this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\n                this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\n                let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\n                this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bgComplete,\n                    _CollectedPoints,\n                    this._cup,\n                    this._btnBack,\n                    this._btnReplay,\n                    this._btnNext,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n                this._btnNext.setInteractive({ cursor: 'pointer' });\n                this._btnNext.on('pointerup', () => {\n                    onNext(this._btnNext);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\n            }\n            show(score, starScore) {\n                this._cup.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._cup,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                // let music = this.scene.sound.add(\"viktory\");\n                this.music = this.scene.sound.add(\"Activity completion fantastic\");\n                this.music.play();\n            }\n        }\n        screen.CompleteWindow = CompleteWindow;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class DoorsWindow extends Phaser.GameObjects.Container {\n            constructor(scene) {\n                super(scene);\n                this._DoorR = new Phaser.GameObjects.Image(this.scene, 504.5, 158, 'Door R');\n                this._DoorR.setOrigin(0, 0);\n                this._DoorL = new Phaser.GameObjects.Image(this.scene, 313.5, 158, 'Door L');\n                this._DoorL.setOrigin(0, 0);\n                this._DoorInside = new Phaser.GameObjects.Image(this.scene, 313, 158, 'Door Inside');\n                this._DoorInside.setOrigin(0, 0);\n                this.add(this._DoorInside);\n                this.add(this._DoorR);\n                this.add(this._DoorL);\n            }\n            openDoor(door, duration, def_vertices_no_offset, vertXIndexes, vertYIndexes, vertYSign, tweenDoorValueY) {\n                door.visible = false;\n                let dx = 100, dy = 198;\n                let def_vertices = def_vertices_no_offset.slice();\n                for (let i = 0; i < def_vertices_no_offset.length; i += 2) {\n                    def_vertices[i] += dx;\n                }\n                for (let i = 1; i < def_vertices_no_offset.length; i += 2) {\n                    def_vertices[i] += dy;\n                }\n                let mesh = this.scene.make.mesh({\n                    key: door.texture.key,\n                    x: door.x,\n                    y: door.y,\n                    vertices: def_vertices.slice(),\n                    uv: [\n                        /*  U   |   V  */\n                        /* ----------- */\n                        0, 0,\n                        0, 1,\n                        1, 1,\n                        0, 0,\n                        1, 1,\n                        1, 0\n                    ]\n                });\n                mesh[\"def_vertices\"] = def_vertices;\n                door[\"tweenDoorValueX\"] = mesh[\"def_vertices\"][vertXIndexes[0]];\n                door[\"tweenDoorValueY\"] = 0;\n                this.scene.tweens.add({\n                    targets: door,\n                    tweenDoorValueX: -def_vertices_no_offset[vertXIndexes[0]] * 0.6 + dx,\n                    tweenDoorValueY: tweenDoorValueY,\n                    duration: duration,\n                    ease: Phaser.Math.Easing.Linear,\n                    onUpdate: () => {\n                        for (let k = 0; k < vertYIndexes.length; k++) {\n                            mesh.vertices[vertYIndexes[k]] = mesh[\"def_vertices\"][vertYIndexes[k]] + vertYSign[k] * door[\"tweenDoorValueY\"];\n                        }\n                        for (let i of vertXIndexes) {\n                            mesh.vertices[i] = door[\"tweenDoorValueX\"];\n                        }\n                    }\n                });\n                this.add(mesh);\n                this.scene.sound.add('Door opening').play();\n            }\n            open(onComplete) {\n                let duration = 2000;\n                let tweenDoorValueY = 50;\n                this.openDoor(this._DoorR, duration, [\n                    /*  X   |   Y  */\n                    /* ----------- */\n                    -this._DoorR.width / 2, -this._DoorR.height / 2,\n                    -this._DoorR.width / 2, this._DoorR.height / 2,\n                    this._DoorR.width / 2, this._DoorR.height / 2,\n                    -this._DoorR.width / 2, -this._DoorR.height / 2,\n                    this._DoorR.width / 2, this._DoorR.height / 2,\n                    this._DoorR.width / 2, -this._DoorR.height / 2\n                ], [0, 2, 6], [1, 3, 7], [-1, 1, -1], tweenDoorValueY);\n                this.openDoor(this._DoorL, duration, [\n                    /*  X   |   Y  */\n                    /* ----------- */\n                    -this._DoorL.width / 2, -this._DoorL.height / 2,\n                    -this._DoorL.width / 2, this._DoorL.height / 2,\n                    this._DoorL.width / 2, this._DoorL.height / 2,\n                    -this._DoorL.width / 2, -this._DoorL.height / 2,\n                    this._DoorL.width / 2, this._DoorL.height / 2,\n                    this._DoorL.width / 2, -this._DoorL.height / 2\n                ], [4, 8, 10], [5, 9, 11], [-1, -1, 1], -tweenDoorValueY);\n                delayedCall(duration, onComplete);\n            }\n        }\n        screen.DoorsWindow = DoorsWindow;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class GameplayScreen extends Phaser.GameObjects.Container {\n            constructor(scene, gameplay) {\n                super(scene);\n                this.rows = 5;\n                this.cols = 5;\n                this.bgMusic = null;\n                this.sfxOpen = null;\n                this.sfxClose = null;\n                this.soundGooseYes = null;\n                this.soundGooseNo = null;\n                this.correctAudio = null;\n                this.wfsnd = null;\n                this.sfxCallToPrayer = null;\n                this.showCompleteWindow = (score, starScore) => {\n                    let completeWindow = new screen.CompleteWindow(this.scene, (target) => {\n                        this.playBtnClickAnim(target);\n                    }, (target) => {\n                        this.playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(completeWindow);\n                        this.showInstructionPage();\n                    }, (target) => {\n                        this.playBtnClickAnim(target);\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(1500, () => {\n                        this.bgMusic.stop();\n                        this.doorsWindow.open(() => {\n                            this.sfxCallToPrayer = this.scene.sound.add(\"Call to prayer\");\n                            this.sfxCallToPrayer.play();\n                            delayedCall(6000, () => {\n                                setPageBackground(\"bg-blue\");\n                                this.add(completeWindow);\n                                completeWindow.show(score, starScore);\n                            });\n                        });\n                    });\n                };\n                this.showLoseWindow = (score, starScore) => {\n                    let tryAgainWindow = new screen.TryAgainWindow(this.scene, (target) => {\n                        this.playBtnClickAnim(target);\n                    }, (target) => {\n                        this.playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(tryAgainWindow);\n                        this.showInstructionPage();\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(750, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(tryAgainWindow);\n                        tryAgainWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.gameplay = gameplay;\n                window[\"t\"] = this;\n            }\n            showGameplay() {\n                setPageBackground(\"bg-australia\");\n                this.bgMusic = this.scene.sound.add(\"B-g ambience\");\n                this.bgMusic.play();\n                this.bgMusic.loop = true;\n                this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, '3 Letter Grid');\n                this._gameStage.setOrigin(0.485, 0.48);\n                this._gameStage.setInteractive();\n                this._btnSound = new Phaser.GameObjects.Image(this.scene, 160 - 105, 100 - 50, 'Sound');\n                this._btnSound.setInteractive({ cursor: 'pointer' });\n                setupButtonTextureBased(this._btnSound, 'Sound', 'Sound HOVER EFFECT');\n                this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025 - 105, 100 - 50, 'x Button');\n                this._btnClose.setInteractive({ cursor: 'pointer' });\n                setupButtonTextureBased(this._btnClose, 'x Button', 'x Button HOVER EFFECT');\n                this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\n                this.addAt(this.gameplayContainer, 0);\n                this.targetLetterLabel = new Phaser.GameObjects.Image(this.scene, 590, 90, null);\n                this.targetLetterLabel.tint = Math.round(0x000000 * 0.9);\n                this.doorsWindow = new screen.DoorsWindow(this.scene);\n                this.gameplayContainer.add([\n                    this._gameStage,\n                    this.doorsWindow,\n                    this._btnSound,\n                    this._btnClose,\n                    this.targetLetterLabel\n                ]);\n                this.gameplay.reset();\n                this.createGrid();\n                this.createCrescentMoons();\n                this.createInput();\n                this.showOutGrid();\n                this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow);\n            }\n            showOutGrid() {\n                this.setInputEnabled(false);\n                let delay = 700;\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = this.grid[i][j];\n                        c.setScale(0);\n                        this.scene.tweens.add({\n                            targets: c,\n                            \"scale\": 1,\n                            duration: 300,\n                            delay: delay\n                        });\n                    }\n                }\n                delayedCall(delay, () => {\n                    this.sfxOpen = this.scene.sound.add(\"open\");\n                    this.sfxOpen.play();\n                });\n                this.targetLetterLabel.visible = false;\n                this.resetCrescentMoons();\n                this.randomizeGrid();\n                delayedCall(1200, () => {\n                    this.targetLetterLabel.visible = true;\n                    this.updateClickLetterTargetLabel();\n                    if (this.gameplay.isNewRound()) {\n                        if (!this.gameplay.isRoundsComplete()) {\n                            this.playCorrectAudio();\n                            delayedCall(2000, () => {\n                                this.setInputEnabled(true);\n                            });\n                        }\n                    }\n                    else {\n                        this.setInputEnabled(true);\n                    }\n                });\n            }\n            showInGrid(showOut) {\n                this.setInputEnabled(false);\n                let delay = 700;\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = this.grid[i][j];\n                        this.scene.tweens.add({\n                            targets: c,\n                            \"scale\": 0,\n                            duration: 300,\n                            delay: delay,\n                            onComplete: () => {\n                                c[\"bg\"].setTexture('rr_def');\n                            }\n                        });\n                    }\n                }\n                delayedCall(delay, () => {\n                    this.sfxClose = this.scene.sound.add(\"close\");\n                    this.sfxClose.play();\n                });\n                if (showOut) {\n                    delayedCall(1000, () => {\n                        this.showOutGrid();\n                    });\n                }\n            }\n            createInput() {\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = this.grid[i][j];\n                        c[\"bg\"].on('pointerup', () => {\n                            this.playBtnClickAnim(c);\n                            c[\"bg\"].disableInteractive();\n                            let l = c[\"letter\"];\n                            if (l && l.texture.key == this.gameplay.getCorrectLetterName()) {\n                                c[\"bg\"].setTexture('rr_active');\n                                let completed = this.onCorrectAnswer();\n                                if (!completed) {\n                                    if (this.gameplay.isNewRound()) {\n                                        this.showInGrid(true);\n                                    }\n                                }\n                                else {\n                                    this.showInGrid(false);\n                                }\n                            }\n                            else {\n                                c[\"bg\"].setTexture('rr_wrong');\n                                let lost = this.onWrongAnswer();\n                                if (!lost) {\n                                    if (this.gameplay.isNewRound()) {\n                                        this.showInGrid(true);\n                                    }\n                                }\n                                else {\n                                    this.showInGrid(false);\n                                }\n                            }\n                        });\n                    }\n                }\n                this._btnSound.on('pointerup', () => {\n                    this.playBtnClickAnim(this._btnSound);\n                    this.onSoundClick();\n                });\n                this._btnClose.on('pointerup', () => {\n                    this.playBtnClickAnim(this._btnClose);\n                    this.onCloseClick();\n                });\n            }\n            createGrid() {\n                let startX = 355;\n                let startY = 215;\n                let dx = 76;\n                let dy = 71;\n                this.grid = [];\n                for (let i = 0; i < this.rows; i++) {\n                    let arr = [];\n                    for (let j = 0; j < this.cols; j++) {\n                        let c = new Phaser.GameObjects.Container(this.scene, startX + i * dx, startY + j * dy);\n                        this.gameplayContainer.add(c);\n                        c[\"bg\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, 'rr_def');\n                        c.add(c[\"bg\"]);\n                        c[\"letter\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, null);\n                        c[\"letter\"][\"rectContainer\"] = c;\n                        c.add(c[\"letter\"]);\n                        c[\"letter\"].tint = Math.round(0x000000 * 0.9);\n                        arr.push(c);\n                    }\n                    this.grid.push(arr);\n                }\n            }\n            randomizeGrid() {\n                let gridLettersNames = null;\n                let minTriesGrid = null;\n                let minTries = Number.MAX_VALUE;\n                let triesNum = 0;\n                let sim = Number.MAX_VALUE;\n                do {\n                    triesNum++;\n                    gridLettersNames = Phaser.Utils.Array.Shuffle(this.gameplay.gridLettersNames.slice());\n                    sim = this.checkRandomizationSimilarity(gridLettersNames);\n                    if (sim < minTries) {\n                        minTries = sim;\n                        minTriesGrid = gridLettersNames;\n                    }\n                } while (sim > 0 && triesNum < 100);\n                for (let i = 0; i < this.rows; i++) {\n                    for (let j = 0; j < this.cols; j++) {\n                        let l = this.grid[i][j][\"letter\"];\n                        let rnd = minTriesGrid.shift();\n                        l.setTexture(rnd);\n                    }\n                }\n            }\n            checkRandomizationSimilarity(gridLettersNames) {\n                let similarity = 0;\n                for (let i = 0; i < gridLettersNames.length - 1; i++) {\n                    if (gridLettersNames[i] == gridLettersNames[i + 1]) {\n                        similarity++;\n                    }\n                }\n                for (let i = 0; i < gridLettersNames.length - this.rows; i++) {\n                    if (i + this.rows < gridLettersNames.length && gridLettersNames[i] == gridLettersNames[i + this.rows]) {\n                        similarity++;\n                    }\n                }\n                // console.log(\"sim: \",similarity);\n                return similarity;\n            }\n            updateClickLetterTargetLabel() {\n                this.targetLetterLabel.setTexture(this.gameplay.getCorrectLetterName());\n            }\n            createCrescentMoons() {\n                this.crescentMoons = [];\n                let dy = 61;\n                for (let i = 0; i < this.gameplay.choicesNumPerRound; i++) {\n                    let cm = new Phaser.GameObjects.Image(this.scene, 179, 261 + i * dy, 'crescent_moon_def');\n                    this.crescentMoons.push(cm);\n                    this.gameplayContainer.add(cm);\n                }\n            }\n            resetCrescentMoons() {\n                for (let i = 0; i < this.crescentMoons.length; i++) {\n                    this.setMoonsActive(i, false);\n                }\n            }\n            setMoonsActive(index, active) {\n                this.crescentMoons[index].setTexture(active ? 'crescent_moon_active' : 'crescent_moon_def');\n            }\n            onCorrectAnswer() {\n                this.setMoonsActive(this.gameplay.correctAnswersCountThisRound, true);\n                let completed = this.gameplay.onCorrectAnswer();\n                this.soundGooseYes = this.scene.sound.add(\"Correct click\");\n                this.soundGooseYes.play();\n                return completed;\n            }\n            onWrongAnswer() {\n                let lost = this.gameplay.onWrongAnswer();\n                this.soundGooseNo = this.scene.sound.add(\"Incorrect click\");\n                this.soundGooseNo.play();\n                return lost;\n            }\n            playCorrectAudio() {\n                if (this.correctAudio) {\n                    this.correctAudio.stop();\n                }\n                try {\n                    this.correctAudio = this.scene.sound.add('translate_click_on');\n                    this.correctAudio.play();\n                    if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\n                        this.correctAudio.pause();\n                    }\n                    delayedCall(750, () => {\n                        this.correctAudio = this.scene.sound.add(this.gameplay.getCorrectAudioKey());\n                        this.correctAudio.play();\n                        if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\n                            this.correctAudio.pause();\n                        }\n                    });\n                }\n                catch (e) {\n                    console.log(e);\n                }\n            }\n            onSoundClick() {\n                this.playCorrectAudio();\n            }\n            onCloseClick() {\n                this.showAreYouSurePage();\n                this.scene.sound.add('warning page pop up sfx').play();\n            }\n            playBtnClickAnim(target) {\n                target.scaleX = target.scaleY = 1;\n                this.scene.tweens.add({\n                    targets: target,\n                    \"scaleX\": 0.9,\n                    \"scaleY\": 0.9,\n                    duration: 100,\n                    yoyo: true\n                });\n            }\n            showInstructionPage() {\n                setPageBackground(\"bg-blue\");\n                let playInstructionSound = () => {\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                    this.wfsnd = this.scene.sound.add(\"Unlock the Gate Open the mosque gate by entering the passcode.\");\n                    this.wfsnd.play();\n                };\n                this.instructionPage = new screen.InstructionPage(this.scene, (target) => {\n                    this.playBtnClickAnim(target);\n                    this.remove(this.instructionPage);\n                    this.showGameplay();\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                }, (target) => {\n                    this.playBtnClickAnim(target);\n                    playInstructionSound();\n                });\n                this.add(this.instructionPage);\n                playInstructionSound();\n            }\n            showAreYouSurePage() {\n                pauseAllDelayedCalls();\n                setPageBackground(\"bg-blue\");\n                this.pauseSounds();\n                this.areYouSureWindow = new screen.AreYouSureWindow(this.scene, () => {\n                    this.remove(this.areYouSureWindow);\n                    this.destroyGameplay();\n                    this.showInstructionPage();\n                }, () => {\n                    this.remove(this.areYouSureWindow);\n                    this.unpauseSounds();\n                    resumeAllDelayedCalls();\n                    setPageBackground(\"bg-australia\");\n                });\n                this.add(this.areYouSureWindow);\n            }\n            setInputEnabled(enabled) {\n                if (enabled) {\n                    for (let i = 0; i < this.rows; i++) {\n                        for (let j = 0; j < this.cols; j++) {\n                            this.grid[i][j][\"bg\"].setInteractive({ cursor: 'pointer' });\n                        }\n                    }\n                }\n                else {\n                    for (let i = 0; i < this.rows; i++) {\n                        for (let j = 0; j < this.cols; j++) {\n                            this.grid[i][j][\"bg\"].disableInteractive();\n                        }\n                    }\n                }\n            }\n            pauseSounds() {\n                this.scene.sound.pauseAll();\n            }\n            unpauseSounds() {\n                this.scene.sound.resumeAll();\n            }\n            destroyGameplay() {\n                this.setInputEnabled(false);\n                this.remove(this.gameplayContainer);\n                destroyAllDelayedCalls();\n            }\n        }\n        screen.GameplayScreen = GameplayScreen;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class InstructionPage extends Phaser.GameObjects.Container {\n            constructor(scene, onPlayClick, onSndClick) {\n                super(scene);\n                this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0 - 105, 0 - 48, 'Instructions page  ALL ACTIVITY  TITLEs');\n                this._instructionPage.setOrigin(0, 0);\n                this._instructionPage.setInteractive();\n                this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'welcome');\n                this._instructionPageTitle.setScale(0.75);\n                this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\n                this._btnPlay.setInteractive({ cursor: 'pointer' });\n                this._btnPlay.once('pointerup', onPlayClick);\n                setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\n                this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Open the mosque gate by entering\\nthe passcode.\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 30,\n                    \"color\": \"#43425D\",\n                    \"align\": 'center'\n                });\n                this.instrTxt.setLineSpacing(20);\n                this.instrTxt.setOrigin(0.5, 0.5);\n                this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\n                this._btnSoundInstruction.setInteractive({ cursor: 'pointer' });\n                this._btnSoundInstruction.on('pointerup', onSndClick);\n                setupButtonTextureBased(this._btnSoundInstruction, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._instructionPage);\n                this.add(this._instructionPageTitle);\n                this.add(this.instrTxt);\n                this.add(this._btnPlay);\n                this.add(this._btnSoundInstruction);\n            }\n        }\n        screen.InstructionPage = InstructionPage;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\nvar sh;\n(function (sh) {\n    var screen;\n    (function (screen) {\n        class TryAgainWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-106, -48);\n                this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\n                this._bg.setOrigin(0, 0);\n                this._bg.setInteractive();\n                this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\n                this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bg,\n                    this._star,\n                    this._btnBack,\n                    this._btnReplay,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n            }\n            show(score, starScore) {\n                this._star.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._star,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                this.music = this.scene.sound.add(\"Fail - close one\");\n                this.music.play();\n            }\n        }\n        screen.TryAgainWindow = TryAgainWindow;\n    })(screen = sh.screen || (sh.screen = {}));\n})(sh || (sh = {}));\n","namespace sh {\r\n    export class App extends Phaser.Game {\r\n\r\n        public static readonly CANVAS_WIDTH: number = 980;\r\n        public static readonly CANVAS_HEIGHT: number = 600;\r\n\r\n        constructor() {\r\n            let config: Phaser.Types.Core.GameConfig = {\r\n                type: Phaser.WEBGL,\r\n                width: App.CANVAS_WIDTH,\r\n                height: App.CANVAS_HEIGHT,\r\n                scale: {\r\n                    mode: FitScaleManager.detectBestScaleMode(),\r\n                    autoCenter: Phaser.Scale.CENTER_BOTH\r\n                },\r\n                transparent: true,\r\n                scene: {\r\n                    create: () => {\r\n                        this.scene.add('Boot', sh.scene.Boot, true);\r\n                    }\r\n                }\r\n            };\r\n            super(config);\r\n        }\r\n    }\r\n}\r\n\r\nlet game: sh.App;\r\nwindow.onload = () => {\r\n    game = new sh.App();\r\n};\r\n\r\nlet delayedCalls = [];\r\nfunction delayedCall(delay: number, callback: Function, args?: any[], callbackScope?: any): Phaser.Time.TimerEvent | number {\r\n    let scene = game.scene.getAt(0);\r\n    if (scene) {\r\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\r\n        delayedCalls.push(dc);\r\n        return dc;\r\n    }\r\n    let t = setTimeout(callback, delay);\r\n    delayedCalls.push(t);\r\n    return t;\r\n}\r\nfunction pauseAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = true;\r\n        }\r\n    }\r\n}\r\nfunction resumeAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = false;\r\n        }\r\n    }\r\n}\r\nfunction destroyAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).remove(false);\r\n        } else {\r\n            clearTimeout(dc);\r\n        }\r\n    }\r\n    delayedCalls = [];\r\n}\r\n\r\nfunction setPageBackground(bg: string) {\r\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\r\n}\r\n\r\nfunction setupButton(btn, frame) {\r\n    btn.on('pointerdown', ()=>{btn.setFrame(frame + '_hover' + '0000')});\r\n    btn.on('pointerover', ()=>{btn.setFrame(frame + '_hover' + '0000');game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setFrame(frame + '0000')});\r\n    btn.on('pointerup', ()=>{btn.setFrame(frame + '0000');game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\nfunction setupButtonTextureBased(btn:Phaser.GameObjects.Image, texture, hoverTexture) {\r\n    btn.on('pointerdown', ()=>{btn.setTexture(hoverTexture)});\r\n    btn.on('pointerover', ()=>{btn.setTexture(hoverTexture);game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setTexture(texture)});\r\n    btn.on('pointerup', ()=>{btn.setTexture(texture);game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}","namespace sh.screen {\r\n    export class TryAgainWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bg:Phaser.GameObjects.Image;\r\n        _star:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-106, -48);\r\n\r\n            this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\r\n            this._bg.setOrigin(0, 0);\r\n            this._bg.setInteractive();\r\n            this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bg,\r\n                this._star,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._star.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._star,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            this.music = this.scene.sound.add(\"Fail - close one\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}","/**\r\n * @author Roman Parada\r\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\r\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\r\n *\r\n * How to use:\r\n * Just call the code line below in Boot scene's init() method of your project:\r\n * new FitScaleManager(this.game).setup();\r\n */\r\nclass FitScaleManager {\r\n\r\n    public static detectBestScaleMode():integer {\r\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\r\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\r\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\r\n    };\r\n\r\n    private static RESIZE_DELAY: number = 500;\r\n\r\n    private game: Phaser.Game;\r\n\r\n    private canvasStyle: CSSStyleDeclaration;\r\n    private phaserScaleManager: Phaser.Scale.ScaleManager;\r\n\r\n    constructor(game: Phaser.Game) {\r\n        this.game = game;\r\n\r\n        this.canvasStyle = this.game.canvas.style;\r\n        this.phaserScaleManager = this.game.scale;\r\n    }\r\n\r\n    /**\r\n     * Just call this method once in Boot scene's init() method\r\n     */\r\n    public setup(): void {\r\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\r\n\r\n        this.overridePhaserTransformMethods();\r\n\r\n        this.onResize();\r\n    }\r\n\r\n    private calculateScale(): number {\r\n        if (game.scale.scaleMode == Phaser.Scale.NONE) return 1;\r\n\r\n        return Math.min(\r\n            window.innerWidth / this.phaserScaleManager.width,\r\n            window.innerHeight / this.phaserScaleManager.height\r\n        );\r\n    }\r\n\r\n    private overridePhaserTransformMethods(): void {\r\n        this.game.scale.transformX = (pageX: number) => {\r\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n        this.game.scale.transformY = (pageY: number) => {\r\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n    }\r\n\r\n    private onResize(): void {\r\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\r\n    }\r\n\r\n    private doResize: () => void = () => {\r\n        let scale: number = this.calculateScale();\r\n\r\n        let newCanvasWidth: number = this.phaserScaleManager.width * scale;\r\n        let newCanvasHeight: number = this.phaserScaleManager.height * scale;\r\n\r\n        this.canvasStyle.width = newCanvasWidth + 'px';\r\n        this.canvasStyle.height = newCanvasHeight + 'px';\r\n\r\n        this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\r\n        this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\r\n    };\r\n}","namespace sh.core {\r\n    export class Gameplay {\r\n\r\n        private totalLettersCount:number = 25;\r\n\r\n        public totalRoundsNum:number = 2;\r\n        public readonly failsNumToLose:number = 3;\r\n        public readonly choicesNumPerRound:number = 5;\r\n\r\n        private currentRound:number = 0;\r\n        private currentLetter:object = null;\r\n        private letters:object[];\r\n\r\n        private correctAnswersCount: number = 0;\r\n        private wrongAnswersCount: number = 0;\r\n        public correctAnswersCountThisRound: number = 0;\r\n        public wrongAnswersCountThisRound: number = 0;\r\n\r\n        private roundsLetter:object[];\r\n        private roundsWrongLetters:object[][];\r\n\r\n        public gridLettersNames:string[];\r\n\r\n        private onComplete:(score:number, starScore:number)=>void;\r\n        private onLose:(score:number, starScore:number)=>void;\r\n\r\n        constructor() {\r\n        }\r\n\r\n        public setupCallbacks(onComplete:(score:number, starScore:number)=>void, onLose:(score:number, starScore:number)=>void):void {\r\n            this.onComplete = onComplete;\r\n            this.onLose = onLose;\r\n        }\r\n\r\n        public calculateScore():number {\r\n            return this.choicesNumPerRound * this.totalRoundsNum - this.wrongAnswersCount;\r\n        }\r\n\r\n        public onLetterChosen():boolean {\r\n            if (this.correctAnswersCountThisRound == this.choicesNumPerRound) {\r\n                this.currentRound++;\r\n                if (this.currentRound >= this.totalRoundsNum) {\r\n                    let score:number = this.calculateScore();\r\n                    this.onComplete(score, score);\r\n                    return true;\r\n                } else {\r\n                    this.nextLetter();\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public nextLetter():void {\r\n            if (this.roundsLetter.length == 0) {\r\n                this.currentLetter = null;\r\n            } else {\r\n                this.currentLetter = this.roundsLetter.shift();\r\n\r\n                this.gridLettersNames = [];\r\n\r\n                let correctLetterName = this.getCorrectLetterName();\r\n                for (let i:number = 0; i < this.choicesNumPerRound; i++) {\r\n                    this.gridLettersNames.push(correctLetterName);\r\n                }\r\n\r\n                let rwl:any = this.roundsWrongLetters.shift();\r\n                for (let wl of rwl) {\r\n                    for (let i:number = 0; i < 2; i++) {\r\n                        this.gridLettersNames.push(wl);\r\n                    }\r\n                }\r\n            }\r\n            this.correctAnswersCountThisRound = 0;\r\n            this.wrongAnswersCountThisRound = 0;\r\n        }\r\n\r\n        public getCorrectLetterName():string {\r\n            return this.currentLetter['correctLetterName'];\r\n        }\r\n\r\n        public getCorrectAudioKey():string {\r\n            return this.currentLetter['correctAudioKey'];\r\n        }\r\n\r\n        public onCorrectAnswer(): boolean {\r\n            this.correctAnswersCount++;\r\n            this.correctAnswersCountThisRound++;\r\n\r\n            return this.onLetterChosen();\r\n        }\r\n\r\n        public onWrongAnswer(): boolean {\r\n            this.wrongAnswersCount++;\r\n            this.wrongAnswersCountThisRound++;\r\n\r\n            if (this.wrongAnswersCountThisRound >= this.failsNumToLose) {\r\n                this.onLose(0, 0);\r\n                return true;\r\n            } else {\r\n                this.onLetterChosen();\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCount(): number {\r\n            return this.correctAnswersCount + this.wrongAnswersCount;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCountThisRound(): number {\r\n            return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\r\n        }\r\n\r\n        public isNewRound():boolean {\r\n            return this.getCurrentTotalAnswersCountThisRound() == 0;\r\n        }\r\n\r\n        public isRoundsComplete():boolean {\r\n            return this.getCurrentTotalAnswersCount() / this.choicesNumPerRound >= this.totalRoundsNum;\r\n        }\r\n\r\n        public reset():void {\r\n            let json = game.cache.json.get('gameplay');\r\n            this.letters = json[\"letters\"].slice();\r\n            let rounds = json[\"rounds\"];\r\n\r\n            this.roundsLetter = [];\r\n            this.roundsWrongLetters = [];\r\n\r\n            for (let r of rounds) {\r\n                let l:string = r[\"correctLetter\"];\r\n                for (let i:number = this.letters.length - 1; i >= 0; i--) {\r\n                    if (this.letters[i]['correctLetterName'] == l) {\r\n                        this.roundsLetter.push(this.letters[i]);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                this.roundsWrongLetters.push(r[\"wrongLetters\"]);\r\n            }\r\n\r\n            this.totalRoundsNum = this.roundsLetter.length;\r\n\r\n            this.nextLetter();\r\n\r\n            this.currentRound = 0;\r\n            this.correctAnswersCount = 0;\r\n            this.wrongAnswersCount = 0;\r\n            this.correctAnswersCountThisRound = 0;\r\n            this.wrongAnswersCountThisRound = 0;\r\n        }\r\n    }\r\n}","module sh.scene {\r\n    export class Boot extends Phaser.Scene {\r\n        init() {\r\n            new FitScaleManager(this.game).setup();\r\n        }\r\n\r\n        create() {\r\n            game.scene.remove('Boot');\r\n            game.scene.add('Preloader', sh.scene.Preloader, true);\r\n        }\r\n    }\r\n}","namespace sh.scene {\r\n\r\n    import Gameplay = sh.core.Gameplay;\r\n    import GameplayScreen = sh.screen.GameplayScreen;\r\n\r\n    export class MainScene extends Phaser.Scene {\r\n\r\n        private gameplay:Gameplay;\r\n        private gameplayScreen:GameplayScreen;\r\n\r\n        public create():void {\r\n            this.gameplay = new Gameplay();\r\n\r\n            this.gameplayScreen = new sh.screen.GameplayScreen(this, this.gameplay);\r\n            this.children.add(this.gameplayScreen);\r\n            this.gameplayScreen.showInstructionPage();\r\n        }\r\n    }\r\n}","module sh.scene {\r\n\r\n    export class Preloader extends Phaser.Scene {\r\n\r\n        preload() {\r\n        }\r\n\r\n        create() {\r\n            this.load.json('gameplay', 'assets/json/gameplay.json');\r\n            this.load.pack('preloader', 'assets/pack.json');\r\n\r\n            this.load.on('progress', (value:number) => {\r\n            }, this);\r\n\r\n            this.load.on('complete', () => {\r\n                this.nextScene();\r\n            });\r\n\r\n            this.load.start();\r\n        }\r\n\r\n        private nextScene():void {\r\n            game.scene.remove('Preloader');\r\n            game.scene.add('ScreenMain', sh.scene.MainScene, true);\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class AreYouSureWindow extends Phaser.GameObjects.Container {\r\n\r\n        private _areYouSurePage: Phaser.GameObjects.Image;\r\n        private _btnSureYes: Phaser.GameObjects.Image;\r\n        private _btnSureNo: Phaser.GameObjects.Image;\r\n\r\n        constructor(scene: Phaser.Scene, onYes:()=>void, onNo:()=>void) {\r\n            super(scene);\r\n\r\n            this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0-48, 'Exit warning');\r\n            this._areYouSurePage.setOrigin(0, 0);\r\n            this._areYouSurePage.setInteractive();\r\n\r\n            this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485-50, 'btnYES1');\r\n            this._btnSureYes.setInteractive({cursor: 'pointer'});\r\n            this._btnSureYes.once('pointerup', onYes);\r\n            setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\r\n\r\n            this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485-50, 'btnNO1');\r\n            this._btnSureNo.setInteractive({cursor: 'pointer'});\r\n            this._btnSureNo.once('pointerup', onNo);\r\n            setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\r\n\r\n            this.add(this._areYouSurePage);\r\n            this.add(this._btnSureYes);\r\n            this.add(this._btnSureNo);\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class CompleteWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bgComplete:Phaser.GameObjects.Image;\r\n        _cup:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n        _btnNext:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void, onNext:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-104.5, -48);\r\n\r\n            this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\r\n            this._bgComplete.setOrigin(0, 0);\r\n            this._bgComplete.setInteractive();\r\n            this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\r\n            this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\r\n\r\n            let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bgComplete,\r\n                _CollectedPoints,\r\n                this._cup,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this._btnNext,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n            this._btnNext.setInteractive({cursor: 'pointer'});\r\n            this._btnNext.on('pointerup', ()=>{\r\n                onNext(this._btnNext);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._cup.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._cup,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            // let music = this.scene.sound.add(\"viktory\");\r\n            this.music = this.scene.sound.add(\"Activity completion fantastic\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class DoorsWindow extends Phaser.GameObjects.Container {\r\n\r\n        private _DoorR: Phaser.GameObjects.Image;\r\n        private _DoorL: Phaser.GameObjects.Image;\r\n        private _DoorInside: Phaser.GameObjects.Image;\r\n\r\n        constructor(scene: Phaser.Scene) {\r\n            super(scene);\r\n\r\n            this._DoorR = new Phaser.GameObjects.Image(this.scene, 504.5, 158, 'Door R');\r\n            this._DoorR.setOrigin(0, 0);\r\n            this._DoorL = new Phaser.GameObjects.Image(this.scene, 313.5, 158, 'Door L');\r\n            this._DoorL.setOrigin(0, 0);\r\n            this._DoorInside = new Phaser.GameObjects.Image(this.scene, 313, 158, 'Door Inside');\r\n            this._DoorInside.setOrigin(0, 0);\r\n\r\n            this.add(this._DoorInside);\r\n            this.add(this._DoorR);\r\n            this.add(this._DoorL);\r\n        }\r\n\r\n        private openDoor(door:Phaser.GameObjects.Image, duration:number, def_vertices_no_offset:number[], vertXIndexes:number[], vertYIndexes:number[], vertYSign:number[], tweenDoorValueY:number):void {\r\n            door.visible = false;\r\n\r\n            let dx:number = 100, dy:number = 198;\r\n            let def_vertices:number[] = def_vertices_no_offset.slice();\r\n            for (let i:number = 0; i < def_vertices_no_offset.length; i+=2) {\r\n                def_vertices[i] += dx;\r\n            }\r\n            for (let i:number = 1; i < def_vertices_no_offset.length; i+=2) {\r\n                def_vertices[i] += dy;\r\n            }\r\n            let mesh:Phaser.GameObjects.Mesh = this.scene.make.mesh({\r\n                key: door.texture.key,\r\n                x: door.x,\r\n                y: door.y,\r\n                vertices: def_vertices.slice(),\r\n                uv: [\r\n                    /*  U   |   V  */\r\n                    /* ----------- */\r\n                    0,      0,\r\n                    0,      1,\r\n                    1,      1,\r\n\r\n                    0,      0,\r\n                    1,      1,\r\n                    1,      0\r\n                ]\r\n            });\r\n            mesh[\"def_vertices\"] = def_vertices;\r\n            door[\"tweenDoorValueX\"] = mesh[\"def_vertices\"][vertXIndexes[0]];\r\n            door[\"tweenDoorValueY\"] = 0;\r\n            this.scene.tweens.add({\r\n                targets: door,\r\n                tweenDoorValueX: -def_vertices_no_offset[vertXIndexes[0]] * 0.6 + dx,\r\n                tweenDoorValueY: tweenDoorValueY,\r\n                duration: duration,\r\n                ease: Phaser.Math.Easing.Linear,\r\n                onUpdate:()=>{\r\n                    for (let k:number = 0; k < vertYIndexes.length; k++) {\r\n                        mesh.vertices[vertYIndexes[k]] = mesh[\"def_vertices\"][vertYIndexes[k]] + vertYSign[k] * door[\"tweenDoorValueY\"];\r\n                    }\r\n                    for (let i of vertXIndexes) {\r\n                        mesh.vertices[i] = door[\"tweenDoorValueX\"];\r\n                    }\r\n                }\r\n            });\r\n            this.add(mesh);\r\n\r\n            this.scene.sound.add('Door opening').play();\r\n        }\r\n\r\n        public open(onComplete:()=>void):void {\r\n            let duration:number = 2000;\r\n            let tweenDoorValueY:number = 50;\r\n            this.openDoor(this._DoorR, duration, [\r\n                /*  X   |   Y  */\r\n                /* ----------- */\r\n                -this._DoorR.width/2, -this._DoorR.height/2,\r\n                -this._DoorR.width/2, this._DoorR.height/2,\r\n                this._DoorR.width/2, this._DoorR.height/2,\r\n                -this._DoorR.width/2, -this._DoorR.height/2,\r\n                this._DoorR.width/2, this._DoorR.height/2,\r\n                this._DoorR.width/2, -this._DoorR.height/2\r\n            ], [0, 2, 6], [1, 3, 7], [-1, 1, -1], tweenDoorValueY);\r\n            this.openDoor(this._DoorL, duration, [\r\n                /*  X   |   Y  */\r\n                /* ----------- */\r\n                -this._DoorL.width/2, -this._DoorL.height/2,\r\n                -this._DoorL.width/2, this._DoorL.height/2,\r\n                this._DoorL.width/2, this._DoorL.height/2,\r\n                -this._DoorL.width/2, -this._DoorL.height/2,\r\n                this._DoorL.width/2, this._DoorL.height/2,\r\n                this._DoorL.width/2, -this._DoorL.height/2\r\n            ], [4, 8, 10], [5, 9, 11], [-1, -1, 1], -tweenDoorValueY);\r\n            delayedCall(duration, onComplete);\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n\r\n    import Gameplay = sh.core.Gameplay;\r\n\r\n    export class GameplayScreen extends Phaser.GameObjects.Container {\r\n        private rows:number = 5;\r\n        private cols:number = 5;\r\n\r\n        _gameStage: Phaser.GameObjects.Image;\r\n        _btnSound: Phaser.GameObjects.Image;\r\n        _btnClose: Phaser.GameObjects.Image;\r\n\r\n        private gameplayContainer: Phaser.GameObjects.Container;\r\n\r\n        grid: Phaser.GameObjects.Container[][];\r\n        crescentMoons:Phaser.GameObjects.Image[];\r\n\r\n        gameplay: Gameplay;\r\n        targetLetterLabel:Phaser.GameObjects.Image;\r\n\r\n        private bgMusic:any = null;\r\n\r\n        private doorsWindow:DoorsWindow;\r\n\r\n        constructor(scene: Phaser.Scene, gameplay: Gameplay) {\r\n            super(scene);\r\n            this.gameplay = gameplay;window[\"t\"]=this;\r\n        }\r\n\r\n        public showGameplay(): void {\r\n            setPageBackground(\"bg-australia\");\r\n\r\n            this.bgMusic = this.scene.sound.add(\"B-g ambience\");\r\n            this.bgMusic.play();\r\n            this.bgMusic.loop = true;\r\n\r\n            this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, '3 Letter Grid');\r\n            this._gameStage.setOrigin(0.485, 0.48);\r\n            this._gameStage.setInteractive();\r\n            this._btnSound = new Phaser.GameObjects.Image(this.scene, 160-105, 100-50, 'Sound');\r\n            this._btnSound.setInteractive({cursor: 'pointer'});\r\n            setupButtonTextureBased(this._btnSound, 'Sound','Sound HOVER EFFECT');\r\n            this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025-105, 100-50,'x Button');\r\n            this._btnClose.setInteractive({cursor: 'pointer'});\r\n            setupButtonTextureBased(this._btnClose, 'x Button','x Button HOVER EFFECT');\r\n\r\n            this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\r\n            this.addAt(this.gameplayContainer, 0);\r\n\r\n            this.targetLetterLabel = new Phaser.GameObjects.Image(this.scene, 590, 90, null);\r\n            this.targetLetterLabel.tint = Math.round(0x000000 * 0.9);\r\n\r\n            this.doorsWindow = new DoorsWindow(this.scene);\r\n\r\n            this.gameplayContainer.add([\r\n                this._gameStage,\r\n                this.doorsWindow,\r\n                this._btnSound,\r\n                this._btnClose,\r\n                this.targetLetterLabel\r\n            ]);\r\n\r\n            this.gameplay.reset();\r\n            this.createGrid();\r\n            this.createCrescentMoons();\r\n            this.createInput();\r\n            this.showOutGrid();\r\n            this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow);\r\n        }\r\n\r\n        private sfxOpen = null;\r\n        public showOutGrid():void {\r\n            this.setInputEnabled(false);\r\n\r\n            let delay:number = 700;\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c = this.grid[i][j];\r\n                    c.setScale(0);\r\n                    this.scene.tweens.add({\r\n                        targets: c,\r\n                        \"scale\": 1,\r\n                        duration: 300,\r\n                        delay: delay\r\n                    });\r\n                }\r\n            }\r\n\r\n            delayedCall(delay, ()=>{\r\n                this.sfxOpen = this.scene.sound.add(\"open\");\r\n                this.sfxOpen.play();\r\n            });\r\n\r\n            this.targetLetterLabel.visible = false;\r\n            this.resetCrescentMoons();\r\n            this.randomizeGrid();\r\n\r\n            delayedCall(1200, ()=>{\r\n                this.targetLetterLabel.visible = true;\r\n                this.updateClickLetterTargetLabel();\r\n\r\n                if (this.gameplay.isNewRound()) {\r\n                    if (!this.gameplay.isRoundsComplete()) {\r\n                        this.playCorrectAudio();\r\n                        delayedCall(2000, ()=>{\r\n                            this.setInputEnabled(true);\r\n                        });\r\n                    }\r\n                } else {\r\n                    this.setInputEnabled(true);\r\n                }\r\n            });\r\n        }\r\n\r\n        private sfxClose = null;\r\n        private showInGrid(showOut:boolean):void {\r\n            this.setInputEnabled(false);\r\n\r\n            let delay:number = 700;\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c = this.grid[i][j];\r\n                    this.scene.tweens.add({\r\n                        targets: c,\r\n                        \"scale\": 0,\r\n                        duration: 300,\r\n                        delay: delay,\r\n                        onComplete:()=>{\r\n                            c[\"bg\"].setTexture('rr_def');\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            delayedCall(delay, ()=>{\r\n                this.sfxClose = this.scene.sound.add(\"close\");\r\n                this.sfxClose.play();\r\n            });\r\n\r\n            if (showOut) {\r\n                delayedCall(1000, ()=>{\r\n                    this.showOutGrid();\r\n                });\r\n            }\r\n        }\r\n\r\n        public createInput(): void {\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c = this.grid[i][j];\r\n                    c[\"bg\"].on('pointerup', () => {\r\n                        this.playBtnClickAnim(c);\r\n                        c[\"bg\"].disableInteractive();\r\n\r\n                        let l = c[\"letter\"];\r\n                        if (l && l.texture.key == this.gameplay.getCorrectLetterName()) {\r\n                            c[\"bg\"].setTexture('rr_active');\r\n                            let completed:boolean = this.onCorrectAnswer();\r\n                            if (!completed) {\r\n                                if (this.gameplay.isNewRound()) {\r\n                                    this.showInGrid(true);\r\n                                }\r\n                            } else {\r\n                                this.showInGrid(false);\r\n                            }\r\n                        } else {\r\n                            c[\"bg\"].setTexture('rr_wrong');\r\n                            let lost:boolean = this.onWrongAnswer();\r\n                            if (!lost) {\r\n                                if (this.gameplay.isNewRound()) {\r\n                                    this.showInGrid(true);\r\n                                }\r\n                            } else {\r\n                                this.showInGrid(false);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n\r\n\r\n            this._btnSound.on('pointerup', () => {\r\n                this.playBtnClickAnim(this._btnSound);\r\n\r\n                this.onSoundClick();\r\n            });\r\n\r\n            this._btnClose.on('pointerup', () => {\r\n                this.playBtnClickAnim(this._btnClose);\r\n\r\n                this.onCloseClick();\r\n            });\r\n        }\r\n\r\n        public createGrid():void {\r\n            let startX:number = 355;\r\n            let startY:number = 215;\r\n            let dx:number = 76;\r\n            let dy:number = 71;\r\n            this.grid = [];\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                let arr = [];\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let c:Phaser.GameObjects.Container = new Phaser.GameObjects.Container(this.scene, startX+i*dx, startY+j*dy);\r\n                    this.gameplayContainer.add(c);\r\n                    c[\"bg\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, 'rr_def');\r\n                    c.add(c[\"bg\"]);\r\n                    c[\"letter\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, null);\r\n                    c[\"letter\"][\"rectContainer\"] = c;\r\n                    c.add(c[\"letter\"]);\r\n                    c[\"letter\"].tint = Math.round(0x000000 * 0.9);\r\n                    arr.push(c);\r\n                }\r\n                this.grid.push(arr);\r\n            }\r\n        }\r\n\r\n        private randomizeGrid():void {\r\n            let gridLettersNames:string[] = null;\r\n            let minTriesGrid:string[] = null;\r\n            let minTries:number = Number.MAX_VALUE;\r\n            let triesNum:number = 0;\r\n            let sim:number = Number.MAX_VALUE;\r\n            do {\r\n                triesNum++;\r\n\r\n                gridLettersNames = Phaser.Utils.Array.Shuffle(this.gameplay.gridLettersNames.slice());\r\n                sim = this.checkRandomizationSimilarity(gridLettersNames);\r\n\r\n                if (sim < minTries) {\r\n                    minTries = sim;\r\n                    minTriesGrid = gridLettersNames;\r\n                }\r\n\r\n            } while (sim > 0 && triesNum < 100);\r\n\r\n            for (let i:number = 0; i < this.rows; i++) {\r\n                for (let j:number = 0; j < this.cols; j++) {\r\n                    let l:Phaser.GameObjects.Image = this.grid[i][j][\"letter\"];\r\n                    let rnd:any = minTriesGrid.shift();\r\n                    l.setTexture(rnd);\r\n                }\r\n            }\r\n        }\r\n\r\n        private checkRandomizationSimilarity(gridLettersNames:string[]):number {\r\n            let similarity:number = 0;\r\n            for (let i:number = 0; i < gridLettersNames.length - 1; i++) {\r\n                if (gridLettersNames[i] == gridLettersNames[i+1]) {\r\n                    similarity++;\r\n                }\r\n            }\r\n            for (let i:number = 0; i < gridLettersNames.length - this.rows; i++) {\r\n                if (i+this.rows < gridLettersNames.length && gridLettersNames[i] == gridLettersNames[i+this.rows]) {\r\n                    similarity++;\r\n                }\r\n            }\r\n            // console.log(\"sim: \",similarity);\r\n            return similarity;\r\n        }\r\n\r\n        public updateClickLetterTargetLabel():void {\r\n            this.targetLetterLabel.setTexture(this.gameplay.getCorrectLetterName());\r\n        }\r\n\r\n        public createCrescentMoons():void {\r\n            this.crescentMoons = [];\r\n            let dy:number = 61;\r\n            for (let i:number = 0; i < this.gameplay.choicesNumPerRound; i++) {\r\n                let cm = new Phaser.GameObjects.Image(this.scene, 179, 261 + i * dy, 'crescent_moon_def');\r\n                this.crescentMoons.push(cm);\r\n                this.gameplayContainer.add(cm);\r\n            }\r\n        }\r\n\r\n        public resetCrescentMoons():void {\r\n            for (let i:number = 0; i < this.crescentMoons.length; i++) {\r\n                this.setMoonsActive(i, false);\r\n            }\r\n        }\r\n\r\n        public setMoonsActive(index:number, active:boolean):void {\r\n            this.crescentMoons[index].setTexture(active ? 'crescent_moon_active' : 'crescent_moon_def')\r\n        }\r\n\r\n        private soundGooseYes = null;\r\n        public onCorrectAnswer(): boolean {\r\n            this.setMoonsActive(this.gameplay.correctAnswersCountThisRound, true);\r\n\r\n            let completed:boolean = this.gameplay.onCorrectAnswer();\r\n\r\n            this.soundGooseYes = this.scene.sound.add(\"Correct click\");\r\n            this.soundGooseYes.play();\r\n\r\n            return completed;\r\n        }\r\n\r\n        private soundGooseNo = null;\r\n        public onWrongAnswer(): boolean {\r\n            let lost:boolean = this.gameplay.onWrongAnswer();\r\n\r\n            this.soundGooseNo = this.scene.sound.add(\"Incorrect click\");\r\n            this.soundGooseNo.play();\r\n\r\n            return lost;\r\n        }\r\n\r\n        private correctAudio = null;\r\n        private playCorrectAudio():void {\r\n            if (this.correctAudio) {\r\n                this.correctAudio.stop();\r\n            }\r\n            try {\r\n                this.correctAudio = this.scene.sound.add('translate_click_on');\r\n                this.correctAudio.play();\r\n                if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\r\n                    this.correctAudio.pause();\r\n                }\r\n                delayedCall(750, ()=>{\r\n                    this.correctAudio = this.scene.sound.add(this.gameplay.getCorrectAudioKey());\r\n                    this.correctAudio.play();\r\n                    if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\r\n                        this.correctAudio.pause();\r\n                    }\r\n                });\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n        public onSoundClick(): void {\r\n            this.playCorrectAudio();\r\n        }\r\n\r\n        public onCloseClick(): void {\r\n            this.showAreYouSurePage();\r\n            this.scene.sound.add('warning page pop up sfx').play();\r\n        }\r\n\r\n        private playBtnClickAnim(target): void {\r\n            target.scaleX = target.scaleY = 1;\r\n            this.scene.tweens.add({\r\n                targets: target,\r\n                \"scaleX\": 0.9,\r\n                \"scaleY\": 0.9,\r\n                duration: 100,\r\n                yoyo: true\r\n            });\r\n        }\r\n\r\n        private wfsnd = null;\r\n        private instructionPage: InstructionPage;\r\n        public showInstructionPage(): void {\r\n            setPageBackground(\"bg-blue\");\r\n\r\n            let playInstructionSound:()=>void = ()=>{\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n                this.wfsnd = this.scene.sound.add(\"Unlock the Gate Open the mosque gate by entering the passcode.\");\r\n                this.wfsnd.play();\r\n            };\r\n\r\n            this.instructionPage = new InstructionPage(this.scene, (target) => {\r\n                this.playBtnClickAnim(target);\r\n                this.remove(this.instructionPage);\r\n                this.showGameplay();\r\n\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n            },(target) => {\r\n                this.playBtnClickAnim(target);\r\n                playInstructionSound();\r\n            });\r\n            this.add(this.instructionPage);\r\n            playInstructionSound();\r\n        }\r\n\r\n        private areYouSureWindow:AreYouSureWindow;\r\n        public showAreYouSurePage(): void {\r\n            pauseAllDelayedCalls();\r\n            setPageBackground(\"bg-blue\");\r\n\r\n            this.pauseSounds();\r\n\r\n            this.areYouSureWindow = new AreYouSureWindow(this.scene, ()=> {\r\n                this.remove(this.areYouSureWindow);\r\n                this.destroyGameplay();\r\n                this.showInstructionPage();\r\n            },()=> {\r\n                this.remove(this.areYouSureWindow);\r\n                this.unpauseSounds();\r\n                resumeAllDelayedCalls();\r\n                setPageBackground(\"bg-australia\");\r\n            });\r\n            this.add(this.areYouSureWindow);\r\n        }\r\n\r\n        private sfxCallToPrayer = null;\r\n\r\n        public showCompleteWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let completeWindow: CompleteWindow = new CompleteWindow(this.scene, (target) => {\r\n                this.playBtnClickAnim(target);\r\n            }, (target) => {\r\n                this.playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(completeWindow);\r\n                this.showInstructionPage();\r\n            }, (target) => {\r\n                this.playBtnClickAnim(target);\r\n            });\r\n            this.setInputEnabled(false);\r\n\r\n            delayedCall(1500, () => {\r\n                this.bgMusic.stop();\r\n\r\n                this.doorsWindow.open(()=>{\r\n                    this.sfxCallToPrayer = this.scene.sound.add(\"Call to prayer\");\r\n                    this.sfxCallToPrayer.play();\r\n\r\n                    delayedCall(6000, () => {\r\n                        setPageBackground(\"bg-blue\");\r\n\r\n                        this.add(completeWindow);\r\n                        completeWindow.show(score, starScore);\r\n                    });\r\n                });\r\n            });\r\n        };\r\n\r\n        public showLoseWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let tryAgainWindow: TryAgainWindow = new TryAgainWindow(this.scene, (target) => {\r\n                this.playBtnClickAnim(target);\r\n            }, (target) => {\r\n                this.playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(tryAgainWindow);\r\n                this.showInstructionPage();\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(750, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(tryAgainWindow);\r\n                tryAgainWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public setInputEnabled(enabled: boolean): void {\r\n            if (enabled) {\r\n                for (let i:number = 0; i < this.rows; i++) {\r\n                    for (let j:number = 0; j < this.cols; j++) {\r\n                        this.grid[i][j][\"bg\"].setInteractive({cursor: 'pointer'});\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i:number = 0; i < this.rows; i++) {\r\n                    for (let j:number = 0; j < this.cols; j++) {\r\n                        this.grid[i][j][\"bg\"].disableInteractive();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public pauseSounds():void {\r\n            this.scene.sound.pauseAll();\r\n        }\r\n\r\n        public unpauseSounds():void {\r\n            this.scene.sound.resumeAll();\r\n        }\r\n\r\n        public destroyGameplay():void {\r\n            this.setInputEnabled(false);\r\n            this.remove(this.gameplayContainer);\r\n            destroyAllDelayedCalls();\r\n        }\r\n    }\r\n}","namespace sh.screen {\r\n    export class InstructionPage extends Phaser.GameObjects.Container {\r\n\r\n        private _instructionPage: Phaser.GameObjects.Image;\r\n        private _instructionPageTitle: Phaser.GameObjects.Image;\r\n        private _btnPlay: Phaser.GameObjects.Image;\r\n        private _btnSoundInstruction: Phaser.GameObjects.Image;\r\n        private instrTxt: Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onPlayClick:(target)=>void, onSndClick:(target)=>void) {\r\n            super(scene);\r\n\r\n            this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0-105, 0-48, 'Instructions page  ALL ACTIVITY  TITLEs');\r\n            this._instructionPage.setOrigin(0, 0);\r\n            this._instructionPage.setInteractive();\r\n\r\n            this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'welcome');\r\n            this._instructionPageTitle.setScale(0.75);\r\n\r\n            this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\r\n            this._btnPlay.setInteractive({cursor: 'pointer'});\r\n            this._btnPlay.once('pointerup', onPlayClick);\r\n            setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\r\n\r\n            this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Open the mosque gate by entering\\nthe passcode.\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 30,\r\n                \"color\": \"#43425D\",\r\n                \"align\": 'center'\r\n            });\r\n            this.instrTxt.setLineSpacing(20);\r\n            this.instrTxt.setOrigin(0.5, 0.5);\r\n\r\n            this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\r\n            this._btnSoundInstruction.setInteractive({cursor: 'pointer'});\r\n            this._btnSoundInstruction.on('pointerup', onSndClick);\r\n            setupButtonTextureBased(this._btnSoundInstruction, 'Sound','Sound HOVER EFFECT');\r\n\r\n            this.add(this._instructionPage);\r\n            this.add(this._instructionPageTitle);\r\n            this.add(this.instrTxt);\r\n            this.add(this._btnPlay);\r\n            this.add(this._btnSoundInstruction);\r\n        }\r\n    }\r\n}"]}